using IODataControl;
using JsonLib;
using Newtonsoft.Json;
using ParameterControl;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Timers;
using System.Configuration;

namespace DataInterface
{
    #region 消息类型列表
    public enum MessageType
    {
        set_ip_address_request = 0,     //00
        set_ip_address_response,
        status_request,
        status_response,
        set_configuration,
        set_configuration_result,
        activate_nodeb_request,
        activate_nodeb_result,
        cell_info_request,
        cell_info_result,
        femto_status_request,           //10
        femto_status_response,
        scanner,
        result_ack,
        paging_request,
        paging_response,
        meas_report,
        set_son_earfcn,
        set_son_earfcn_response,
        imsi_list_setconfig,
        imsi_list_delconfig,            //20
        imsi_list_config_result,
        imsi_list_check,
        imsi_list_check_result,
        warning_status,
        set_periodic_restart_time,
        set_periodic_restart_time_response,
        get_son_earfcn,
        get_son_earfcn_response,
        set_redirection_req,
        set_redirection_rsp,            //30
        UE_cap_report,
        set_tac_value,
        set_xml_msg_all,
        set_work_mode,
        set_work_mode_reponse,
        get_work_mode,
        get_work_mode_reponse,
        set_macro,
        set_macro_response,
        get_macro,                      //40
        get_macro_response,
        set_report_target_request,
        get_report_target_request,
        set_report_target_response,
        get_report_target_response,
        get_redirection_req,
        get_redirection_rsp,
        set_upload_req,
        set_upload_response,
        get_upload_req,                 //50
        get_upload_response,
        set_system_request,
        get_system_request,
        set_system_response,
        get_system_response,
        Update,
        Update_result,
        file_eof,
        Get_Log,
        Get_Log_result,                 //60
        get_rt_info,
        rt_info_report,
        SYNC_request,
        SYNC_info,
        set_device_id,
        set_device_id_response,
        get_device_id,
        get_device_id_response,
        Syncinfo_set,
        Syncinfo_set_response,          //70
        Syncinfo_get,
        Syncinfo_get_response,
        imei_list_setconfig,
        imei_list_delconfig,
        imei_list_config_result,
        imei_list_delconfig_result,
        imei_list_check,
        imei_list_check_result,
        imsi_temp_list_config,
        imsi_temp_list_result,          //80
        set_device_reboot,
        app_login_request,
        app_login_response,
    }

    //=================GSM MSGTYPE START=================
    public enum RecvPktType                   //设备接收消息_类型
    {
        [Description("系统参数")]
        RECV_SYS_PARA = 0x0001,               //系统参数，在基本参数配置界面中，包括MCC、MNC等
        [Description("系统选项")]
        RECV_SYS_OPTION,                      //系统选项，在可选配置界面中，如是否上报IMEI等
        RECV_DLRX_PARA,                       //下行接收参数，在测试界面中，用于获取网络信息
        [Description("射频参数")]
        RECV_RF_PARA,                         //射频参数，在基本参数配置界面中，如频点、功率等
        RECV_QUERY_VER = 0x0005,              //查询版本，在测试界面中（暂不用）
        RECV_TEST_CMD,                        //测试命令，在测试界面中
        [Description("短信中心号码")]
        RECV_SMS_RPOA,                        //短消息中心号码，在短信配置界面中
        [Description("短信原叫号码")]
        RECV_SMS_TPOA,                        //短消息原叫号码，在短信配置界面中
        [Description("短信发送时间")]
        RECV_SMS_SCTS,                        //短消息发送时间，在短信配置界面中
        [Description("短信息")]
        RECV_SMS_DATA = 10,                   //短消息编辑内容，在短信配置界面中
        RECV_BS_SEAR,                         //基站搜索，在基本参数配置界面中
        RECV_SMS_SEND,                        //发送短信（暂不用）
        RECV_SMS_STOP,                        //停止短信（暂不用）
        RECV_QUERY_RSP,                       //查询响应（暂不用）
        [Description("添加白名单")]
        RECV_LIBRARY_REG_ADD = 15,            //登录控制库中添加IMSI
        [Description("清除白名单")]
        RECV_LIBRARY_REG_DELALL,              //登录控制库清空
        [Description("查询白名单")]
        RECV_LIBRARY_REG_QUERY,               //登录控制库中查询，返回所有库中IMSI
        RECV_LIBRARY_SMS_ADD,                 //短信控制库中添加IMSI
        RECV_LIBRARY_SMS_DELALL,              //短信控制库清空
        RECV_LIBRARY_SMS_QUERY = 20,          //短信控制库中查询，返回所有库中IMSI
        RECV_NCELLTAB_SET,                    //配置邻区表
        RECV_NCELLTAB_DEL,                    //清空邻区表
        RECV_CHNUM,                           //配置进程数（暂不用）
        RECV_REREG,                           //重新获取
        RECV_BS_CALL_END = 25,                //BS挂机
        RECV_BS_CALL_CON,                     //BS接听
        RECV_MT_CALL,                         //设备电话主叫，需要被呼叫的IMSI号，原叫号码
        RECV_MT_SMS,                          //设备短信主叫，需要被呼叫的IMSI号，其他在短信界面配置
        RECV_MT_CALL_SILENCE,                 //设备连续安全电话主叫，需要被呼叫的IMSI号，呼叫周期
        RECV_MT_SMS_SILENCE = 30,             //设备连续安全短信主叫，需要被呼叫的IMSI号，呼叫周期（暂不用）
        RECV_ANT_DIREC,                       //使用开关控制4个方向性定位天线
        RECV_TALK_PARA,                       //设置通话参数，包括频点和手机发射功率
        [Description("注册模式")]
        RECV_REG_MODE,                        //手机注册时的工作模式
        [Description("短信息发送")]            //短信息发送
        RECV_SMS_OPTION
    };

    public enum SendPktType                 //设备发送消息
    {
        SEND_REQ_CNF = 0x0001,              //确认接收到的请求，在状态栏显示
        SEND_OM_INFO,                       //设备OM信息，在状态栏显示，每60s发送一次
        SEND_VER_INFO,                      //设备版本信息，在状态栏显示
        SEND_UE_INFO,                       //用户设备信息，在上报信息界面显示，包括IMSI、IMEI等
        SEND_TEST_INFO = 0x0005,            //返回测试信息，在测试界面显示 GSM心跳10秒1次
        SEND_BS_INFO,                       //返回基站信息，在配置页显示
        SEND_QUERY_REQ,                     //查询请求
        SEND_LIBRARY_REG,                   //登录库返回信息
        SEND_LIBRARY_SMS,                   //SMS库返回信息
        SEND_OBJECT_POWER = 0x000A,         //目标功率
        SEND_BS_SEAR_INFO,                  //基站搜索到的信息
        SEND_MS_CALL_SETUP,                 //手机主动发起呼叫，包括其IMSI，被叫号码
        SEND_MS_SMS_SEND,                   //手机主动发起短信，包括其IMSI，被叫号码，短信内容
        SEND_MS_CALL_OPERATE                //手机在被呼叫时的操作，可以是挂机、摘机或未操作而超时。
    };
    //================= MSGTYPE END =================

    //================= CDMA MessageType Start ===================
    public enum CDMAMsgType
    {
        [Description("邻区信息查询")]
        QUERY_NB_CELL_INFO_MSG = 202,                        //GUI To FAP GUI查询邻区信息
        [Description("上报邻区信息")]
        FAP_NB_CELL_INFO_MSG = 203,                          //FAP To GUI FAP上报邻区信息
        [Description("小区参数")]
        CONFIG_FAP_MSG = 204,                                //GUI To FAP GUI配置FAP的启动参数
        [Description("重启")]
        CONTROL_FAP_REBOOT_MSG = 205,                        //GUI To FAP GUI控制FAP的重启。
        [Description("射频")]
        CONTROL_FAP_RF_MSG_ID = 206,                         //GUI To FAP 控制FAP射频的消息
        [Description("心跳")]
        FAP_HEARTBEAT_MSG = 208,                             //FAP To GUI FAP心跳消息，FAP启动成功后，每10秒发送一次该消息给GUI。心跳消息包含基站的一些状态信息，比如工作模式、同步状态等
        [Description("事件状态")]
        FAP_TRACE_MSG = 210,                                 //FAP To GUI FAP上报一些事件和状态给GUI，GUI程序需要显示给操作者看。
        [Description("上报UE状态")]
        UE_STATUS_REPORT_MSG = 212,                          //FAP To GUI FAP上报UE相关状态. 
        [Description("上报UE主叫信息")]
        PAGE_UE_MSG = 218,
        [Description("短信息UEID")]
        UE_ORM_REPORT_MSG = 219,                             //FAP To GUI FAP上报UE主叫信息，只用于GSM和CDMA
        [Description("配置短信号码与内容")]
        CONFIG_SMS_CONTENT_MSG = 192,                        //FAP To GUI FAP 配置下发短信号码和内容
        [Description("开启射频")]
        CONTROL_FAP_RADIO_ON_MSG = 193,                      //GUI To FAP GUI 控制FAP开启射频
        [Description("关闭射频")]
        CONTROL_FAP_RADIO_OFF_MSG = 194,                     //GUI To FAP GUI 控制FAP关闭射频
        [Description("复位")]
        CONTROL_FAP_RESET_MSG = 195,                         //GUI To FAP GUI 控制FAP的软复位
        [Description("多载波参数")]
        CONFIG_CDMA_CARRIER_MSG = 196,                       //GUI To FAP GUI 配置CDMA多载波参数
        [Description("小区参数查询")]
        QUERY_FAP_PARAM_MSG = 197,                           //GUI To FAP GUI 查询FAP运行参数
        [Description("小区参数查询响应")]
        FAP_PARAM_REPORT_MSG = 198,                          //FAP To GUI FAP上报FAP运行参数. 
        [Description("IMSI设置")]
        CONFIG_IMSI_MSG_V3_ID = 245,                         //FAP <=> GUI 大数量imsi名单，用于配置不同的目标IMSI不同的行为
        [Description("时间控制")]
        TIME_CONTROL = 399                                   //时间控制(新增加)
    }
    //================= CDMA MessageType End ====================
    #endregion

    #region 通讯数据结构
    public class MssageTypeHead
    {
        private string messageType;
        private string type;

        public string MessageType
        {
            get
            {
                return messageType;
            }

            set
            {
                messageType = value;
            }
        }

        public string Type
        {
            get
            {
                return type;
            }

            set
            {
                type = value;
            }
        }
    }

    public class TreeViewItems
    {
        private DataColumn Column0 = new DataColumn();

    }
    #endregion

    #region 树形结构类
    public class CheckBoxTreeModel : INotifyPropertyChanged
    {
        #region 字段
        /// <summary>
        /// Id值
        /// </summary>
        private string _id;
        /// <summary>
        /// 父ID
        /// </summary>
        private string _parentID;
        /// <summary>
        /// 显示的名称
        /// </summary>
        private string _name;
        /// <summary>
        /// 显示的制式
        /// </summary>
        private string _mode;
        /// <summary>
        /// 全名
        /// </summary>
        private string _fullName;
        /// <summary>
        /// 图标路径
        /// </summary>
        private string _icon;
        /// <summary>
        /// 站点
        /// </summary>
        private string _isStation;
        /// <summary>
        /// 选中状态
        /// </summary>
        private bool _isChecked;
        /// <summary>
        /// 折叠状态
        /// </summary>
        private bool _isExpanded;
        /// <summary>
        /// 结点属性
        /// </summary>
        private string _selfNodeType;
        /// <summary>
        /// 子项
        /// </summary>
        private IList<CheckBoxTreeModel> _children;
        /// <summary>
        /// 父项
        /// </summary>
        private CheckBoxTreeModel _parent;
        /// <summary>
        /// IP地址
        /// </summary>
        private string _iPAddr;
        /// <summary>
        /// 端口
        /// </summary>
        private int _port;
        /// <summary>
        /// 子网掩码
        /// </summary>
        private string _netMask;

        /// <summary>
        /// AP在线 
        /// </summary>
        private bool _isOnLine;

        /// <summary>
        /// 最后一次上线时间
        /// </summary>
        private string _lastOnline;

        /// <summary>
        /// 版本
        /// </summary>
        private string _apVersion;

        /// <summary>
        /// SN
        /// </summary>
        private string _sN;

        /// <summary>
        /// ActiveStatus
        /// </summary>
        private string _activeStatus;

        /// <summary>
        /// InnerType
        /// </summary>
        private string _innerType;

        /// <summary>
        /// AlertIcon
        /// </summary>
        private string _alertIcon;

        /// <summary>
        /// AlertText
        /// </summary>
        private string _alertText;

        /// <summary>
        /// Des
        /// </summary>
        private string _des;

        /// <summary>
        /// 标示值
        /// </summary>
        private object _tag;
        #endregion

        /// <summary>
        /// 构造
        /// </summary>
        public CheckBoxTreeModel()
        {
            Children = new List<CheckBoxTreeModel>();
            _isChecked = false;
            IsExpanded = false;
            _icon = "";
        }

        /// <summary>
        /// 键值
        /// </summary>
        public string Id
        {
            get { return _id; }
            set { _id = value; NotifyPropertyChanged("Id"); }
        }

        /// <summary>
        /// 父ID值
        /// </summary>
        public string ParentID
        {
            get { return _parentID; }
            set { _parentID = value; NotifyPropertyChanged("ParentID"); }
        }

        /// <summary>
        /// 显示的设备名
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; NotifyPropertyChanged("Name"); }
        }

        /// <summary>
        /// 显示的制式
        /// </summary>
        public string Mode
        {
            get { return _mode; }
            set { _mode = value; NotifyPropertyChanged("Mode"); }
        }

        /// <summary>
        /// 全名
        /// </summary>
        public string FullName
        {
            get { return _fullName; }
            set { _fullName = value; NotifyPropertyChanged("FullName"); }
        }

        /// <summary>
        /// 图标
        /// </summary>
        public string Icon
        {
            get { return _icon; }
            set { _icon = value; NotifyPropertyChanged("Icon"); }
        }

        /// <summary>
        /// 是否是站点
        /// </summary>
        public string IsStation
        {
            get { return _isStation; }
            set { _isStation = value; NotifyPropertyChanged("IsStation"); }
        }

        /// <summary>
        /// 指针悬停时的显示说明
        /// </summary>
        public string ToolTip
        {
            get
            {
                string ToolTipContent = string.Empty;
                if (this.SelfNodeType != null)
                {
                    StringBuilder selfInfo = new StringBuilder();
                    if (this.SelfNodeType.Equals(NodeType.StructureNode.ToString()) || this.SelfNodeType.Equals(NodeType.RootNode.ToString()))
                    {
                        selfInfo.AppendLine("名称：[" + Name + "]");
                        selfInfo.AppendLine("全名：[" + FullName + "]");
                        if (IsStation.Equals("1"))
                        {
                            selfInfo.AppendLine("类型：[站点]");
                        }
                        else
                        {
                            selfInfo.AppendLine("类型：[域]");
                        }
                    }
                    else if (this.SelfNodeType.Equals(NodeType.LeafNode.ToString()))
                    {
                        try
                        {
                            selfInfo.AppendLine("名称：[" + Name + "]");
                            selfInfo.AppendLine("全名：[" + FullName + "]");
                            selfInfo.AppendLine("类型：[AP设备]");
                            selfInfo.AppendLine("制式：[" + Mode + "]");
                            selfInfo.AppendLine("SN：[" + SN + "]");
                            if (IPAddr != "" || IPAddr != null)
                            {
                                selfInfo.AppendLine("IP地址：[" + IPAddr + "]");
                            }
                            else
                            {
                                selfInfo.AppendLine("IP地址：[" + "无" + "]");
                            }

                            if (Port != 0)
                            {
                                selfInfo.AppendLine("端口：[" + Port.ToString() + "]");
                            }
                            else
                            {
                                selfInfo.AppendLine("端口：[" + "无" + "]");
                            }

                            if (NetMask != "" || NetMask != null)
                            {
                                selfInfo.AppendLine("掩码：[" + NetMask + "]");
                            }
                            else
                            {
                                selfInfo.AppendLine("掩码：[" + "无" + "]");
                            }

                            if (this.Icon.Equals(new NodeIcon().LeafAllReadyNodeIcon))
                            {
                                selfInfo.AppendLine("状态：[工作正常]");
                            }
                            else if (this.Icon.Equals(new NodeIcon().LeafNoActiveNodeIcon))
                            {
                                selfInfo.AppendLine("状态：[未激活]");
                            }
                            else if (this.Icon.Equals(new NodeIcon().LeafNoConnectNodeIcon))
                            {
                                selfInfo.AppendLine("状态：[不在线]");
                            }

                            selfInfo.AppendLine("数据状态：[" + AlertText + "]");

                            if (LastOnline != "" || LastOnline != null)
                            {
                                selfInfo.AppendLine("最后一次上线时间：[" + LastOnline + "]");
                            }
                            else
                            {
                                selfInfo.AppendLine("最后一次上线时间：[" + "无" + "]");
                            }
                        }
                        catch (Exception ex)
                        {
                            JsonInterFace.IODataHelper.SaveLogs(DateTime.Now.ToString(), "设备信息提示", ex.Message, ex.StackTrace);
                        }
                    }
                    ToolTipContent = selfInfo.ToString();
                }
                return ToolTipContent;
            }
        }

        /// <summary>
        /// 是否选中
        /// </summary>
        public bool IsChecked
        {
            get
            {
                return _isChecked;
            }
            set
            {
                if (value != _isChecked)
                {
                    _isChecked = value;

                    if (_isChecked)
                    {

                    }
                    else
                    {
                        if (Children != null)
                        {
                            //如果取消选中子项也应该取消选中
                            foreach (CheckBoxTreeModel child in Children)
                            {
                                child.IsChecked = false;
                            }
                        }
                    }
                }

                NotifyPropertyChanged("IsChecked");
            }
        }

        /// <summary>
        /// 是否展开
        /// </summary>
        public bool IsExpanded
        {
            get { return _isExpanded; }
            set
            {
                if (value != _isExpanded)
                {
                    //折叠状态改变
                    _isExpanded = value;
                    NotifyPropertyChanged("IsExpanded");
                }
            }
        }

        /// <summary>
        /// 父项
        /// </summary>
        public CheckBoxTreeModel Parent
        {
            get { return _parent; }
            set { _parent = value; }
        }

        /// <summary>
        /// 子项
        /// </summary>
        public IList<CheckBoxTreeModel> Children
        {
            get { return _children; }
            set { _children = value; }
        }

        public string SelfNodeType
        {
            get
            {
                return _selfNodeType;
            }

            set
            {
                _selfNodeType = value;
                NotifyPropertyChanged("SelfNodeType");
            }
        }

        public string IPAddr
        {
            get
            {
                return _iPAddr;
            }

            set
            {
                _iPAddr = value;
                NotifyPropertyChanged("IPAddr");
            }
        }

        public int Port
        {
            get
            {
                return _port;
            }

            set
            {
                _port = value;
                NotifyPropertyChanged("Port");
            }
        }

        public string NetMask
        {
            get
            {
                return _netMask;
            }

            set
            {
                _netMask = value;
                NotifyPropertyChanged("NetMask");
            }
        }

        public string LastOnline
        {
            get
            {
                return _lastOnline;
            }

            set
            {
                _lastOnline = value;
                NotifyPropertyChanged("LastOnline");
            }
        }

        public bool IsOnLine
        {
            get
            {
                return _isOnLine;
            }

            set
            {
                _isOnLine = value;
                NotifyPropertyChanged("IsOnLine");
            }
        }

        public string ApVersion
        {
            get
            {
                return _apVersion;
            }

            set
            {
                _apVersion = value;
                NotifyPropertyChanged("ApVersion");
            }
        }

        public string SN
        {
            get
            {
                return _sN;
            }

            set
            {
                _sN = value;
                NotifyPropertyChanged("SN");
            }
        }

        public string ActiveStatus
        {
            get
            {
                return _activeStatus;
            }

            set
            {
                _activeStatus = value;
                NotifyPropertyChanged("ActiveStatus");
            }
        }

        public string InnerType
        {
            get
            {
                return _innerType;
            }

            set
            {
                _innerType = value;
                NotifyPropertyChanged("InnerType");
            }
        }

        public string AlertIcon
        {
            get
            {
                return _alertIcon;
            }

            set
            {
                _alertIcon = value;
                NotifyPropertyChanged("AlertIcon");
            }
        }

        public string AlertText
        {
            get
            {
                return _alertText;
            }

            set
            {
                _alertText = value;
                NotifyPropertyChanged("AlertText");
            }
        }

        public string Des
        {
            get
            {
                return _des;
            }

            set
            {
                _des = value;
                NotifyPropertyChanged("Des");
            }
        }

        public object Tag
        {
            get
            {
                return _tag;
            }

            set
            {
                _tag = value;
                NotifyPropertyChanged("Tag");
            }
        }

        /// <summary>
        /// 设置所有子项的选中状态
        /// </summary>
        /// <param name="isChecked"></param>
        public void SetChildrenChecked(bool IsChecked)
        {
            if (Children != null)
            {
                foreach (CheckBoxTreeModel child in Children)
                {
                    child.IsChecked = IsChecked;
                    child.SetChildrenChecked(IsChecked);
                }
            }
        }

        /// <summary>
        /// 设置所有子项的选中状态
        /// </summary>
        /// <param name="isChecked"></param>
        public void UnSetChildrenChecked(bool IsChecked)
        {
            if (Children != null)
            {
                foreach (CheckBoxTreeModel child in Children)
                {
                    child.IsChecked = IsChecked;
                    child.SetChildrenChecked(IsChecked);
                }
            }
        }

        /// <summary>
        /// 设置所有子项展开状态
        /// </summary>
        /// <param name="isExpanded"></param>
        public void SetChildrenExpanded(bool isExpanded)
        {
            if (Children != null)
            {
                foreach (CheckBoxTreeModel child in Children)
                {
                    child.IsExpanded = isExpanded;
                    child.SetChildrenExpanded(isExpanded);
                }
            }
        }

        /// <summary>
        /// 属性改变事件
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
    }
    #endregion

    #region 生存目录树类
    public class BindCheckBoxTreeView
    {
        private DataTable dt;

        public BindCheckBoxTreeView()
        {

        }

        public DataTable Dt
        {
            get
            {
                return dt;
            }

            set
            {
                dt = value;
            }
        }

        public void TreeViewBind(CheckBoxTreeModel tr)
        {
            tr.Children.Clear();

            if (Dt != null || Dt.Rows.Count > 0)
            {
                //首先遍历父节点
                CheckBoxTreeModel item;
                DataRow[] dr = Dt.Select("ParentID='-1'");
                if (dr.Length != 0)
                {
                    foreach (DataRow drTemp in dr)
                    {
                        item = new CheckBoxTreeModel();
                        item.Id = drTemp["ParentID"].ToString();        //一般绑定ID
                        item.Name = drTemp["SelfName"].ToString();      //名称
                        item.IsChecked = false;
                        item.IsExpanded = true;
                        item.Parent = tr;
                        tr.Name = drTemp["SelfName"].ToString();
                        tr.IsExpanded = true;
                        tr.Children = item.Children;
                        BindNode(item);
                    }
                }
            }
        }

        /// <summary>
        /// 遍历所有的子节点
        /// </summary>
        /// <param name="item">父节点的item</param>
        private void BindNode(CheckBoxTreeModel item)
        {
            DataRow[] dr = Dt.Select("ParentID = '" + item.Id + "'"); //查询子节点条件
            if (dr.Length > 0)
                foreach (DataRow drTemp in dr)
                {
                    CheckBoxTreeModel childItem = new CheckBoxTreeModel();
                    childItem.Name = drTemp["SelfName"].ToString();
                    childItem.Id = drTemp["ParentID"].ToString();
                    childItem.IsChecked = false;
                    childItem.IsExpanded = true;
                    childItem.Parent = item;
                    item.Children.Add(childItem);
                    BindNode(childItem);
                }
        }

        public bool DeviceTreeViewBind(ref CheckBoxTreeModel tr)
        {
            try
            {
                tr.Children.Clear();

                if (Dt != null || Dt.Rows.Count > 0)
                {
                    //首先遍历父节点
                    CheckBoxTreeModel item;
                    DataRow[] dr = Dt.Select("ParentID='-1'");
                    if (dr.Length != 0)
                    {
                        foreach (DataRow drTemp in dr)
                        {
                            item = new CheckBoxTreeModel();
                            item.Id = drTemp["SelfID"].ToString();     //一般绑定ID
                            item.Name = drTemp["SelfName"].ToString(); //名称
                            item.Des = drTemp["des"].ToString();
                            item.IsChecked = false;
                            item.IsExpanded = true;
                            tr.Id = drTemp["SelfID"].ToString();
                            tr.Name = drTemp["SelfName"].ToString();
                            tr.FullName = drTemp["PathName"].ToString();
                            tr.ParentID = drTemp["ParentID"].ToString();
                            tr.Icon = new NodeIcon().RootNodeCloseIcon; //父结点图标
                            tr.SelfNodeType = NodeType.RootNode.ToString();
                            tr.IsExpanded = true;
                            tr.IsStation = drTemp["IsStation"].ToString();
                            tr.Children = item.Children;
                            item.Parent = tr;

                            DeviceBindNode(ref item);
                        }
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                JsonInterFace.IODataHelper.SaveLogs(DateTime.Now.ToString(), "配置结点信息", ex.Message, ex.StackTrace);
            }

            return false;
        }

        /// <summary>
        /// 遍历所有的子节点
        /// </summary>
        /// <param name="item">父节点的item</param>
        private void DeviceBindNode(ref CheckBoxTreeModel item)
        {
            try
            {
                DataRow[] dr = Dt.Select("ParentID = '" + item.Id + "'"); //查询子节点条件
                if (dr.Length > 0)
                {
                    foreach (DataRow drTemp in dr)
                    {
                        CheckBoxTreeModel childItem = new CheckBoxTreeModel();
                        childItem.Name = drTemp["SelfName"].ToString();
                        childItem.FullName = drTemp["PathName"].ToString();
                        childItem.Id = drTemp["SelfID"].ToString();
                        childItem.ParentID = drTemp["ParentID"].ToString();
                        childItem.IsChecked = false;
                        childItem.IsExpanded = true;

                        //根据结点类型定义不同子结点图标
                        if (drTemp["NodeType"].ToString() == NodeType.StructureNode.ToString())
                        {
                            childItem.IsStation = drTemp["IsStation"].ToString();

                            childItem.SelfNodeType = NodeType.StructureNode.ToString();
                            if (childItem.IsExpanded)
                            {
                                if (childItem.IsStation == "0")
                                {
                                    childItem.Icon = new NodeIcon().StructureOpenNodeIcon;
                                }
                                else if (childItem.IsStation == "1")
                                {
                                    childItem.Icon = new NodeIcon().StationNodeIcon;
                                }
                            }
                            else
                            {
                                childItem.Icon = new NodeIcon().StructureCloseNodeIcon;
                            }
                        }
                        else if (drTemp["NodeType"].ToString() == NodeType.LeafNode.ToString())
                        {
                            childItem.IsStation = "0";
                            childItem.Icon = drTemp["NodeIcon"].ToString();

                            for (int i = 0; i < JsonInterFace.APATTributesLists.Count; i++)
                            {
                                if (JsonInterFace.APATTributesLists[i].FullName == childItem.FullName)
                                {
                                    childItem.Mode = JsonInterFace.APATTributesLists[i].Mode;

                                    childItem.SelfNodeType = NodeType.LeafNode.ToString();

                                    childItem.IPAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                    try
                                    {
                                        if (JsonInterFace.APATTributesLists[i].Port != "" && JsonInterFace.APATTributesLists[i].Port != null)
                                        {
                                            if (Parameters.ISDigital(JsonInterFace.APATTributesLists[i].Port))
                                            {
                                                childItem.Port = int.Parse(JsonInterFace.APATTributesLists[i].Port);
                                            }
                                            else
                                            {
                                                childItem.Port = 0;
                                            }
                                        }
                                        else
                                        {
                                            childItem.Port = 0;
                                        }
                                    }
                                    catch
                                    {
                                        childItem.Port = 0;
                                    }
                                    childItem.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                    if (JsonInterFace.APATTributesLists[i].OnLine != null && JsonInterFace.APATTributesLists[i].OnLine != "")
                                    {
                                        if (Parameters.ISDigital(JsonInterFace.APATTributesLists[i].OnLine))
                                        {
                                            childItem.IsOnLine = Convert.ToBoolean(Convert.ToInt32(JsonInterFace.APATTributesLists[i].OnLine));
                                        }
                                        else
                                        {
                                            childItem.IsOnLine = false;
                                        }
                                    }
                                    else
                                    {
                                        childItem.IsOnLine = false;
                                    }
                                    childItem.LastOnline = JsonInterFace.APATTributesLists[i].LastOnline;
                                    childItem.ApVersion = JsonInterFace.APATTributesLists[i].ApVersion;
                                    childItem.SN = JsonInterFace.APATTributesLists[i].SN;
                                    childItem.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                    //数据对齐状态与高温告警状态
                                    childItem.AlertIcon = JsonInterFace.APATTributesLists[i].AlertIcon;
                                    childItem.AlertText = JsonInterFace.APATTributesLists[i].AlertText;
                                    break;
                                }
                            }
                        }
                        childItem.Des = drTemp["des"].ToString();

                        item.Parent = childItem;
                        item.Children.Add(childItem);
                        DeviceBindNode(ref childItem);
                    }
                }
            }
            catch (Exception ex)
            {
                JsonInterFace.IODataHelper.SaveLogs(DateTime.Now.ToString(), "配置结点信息", ex.Message, ex.StackTrace);
            }
        }
    }
    #endregion

    #region 运营商对应表
    public class OperatorsList
    {
        private string _mCC;
        private string _mNC;
        private string _brand;
        private string _operatorName;
        private string _status;
        private string _bands;
        private string _refrencesAndNotes;
        private List<OperatorsList> Operators;

        public string MCC
        {
            get
            {
                return _mCC;
            }

            set
            {
                _mCC = value;
            }
        }

        public string MNC
        {
            get
            {
                return _mNC;
            }

            set
            {
                _mNC = value;
            }
        }

        public string Brand
        {
            get
            {
                return _brand;
            }

            set
            {
                _brand = value;
            }
        }

        public string OperatorName
        {
            get
            {
                return _operatorName;
            }

            set
            {
                _operatorName = value;
            }
        }

        public string Status
        {
            get
            {
                return _status;
            }

            set
            {
                _status = value;
            }
        }

        public string Bands
        {
            get
            {
                return _bands;
            }

            set
            {
                _bands = value;
            }
        }

        public string RefrencesAndNotes
        {
            get
            {
                return _refrencesAndNotes;
            }

            set
            {
                _refrencesAndNotes = value;
            }
        }

        public OperatorsList()
        {
            Operators = new List<OperatorsList>();
        }

        /// <summary>
        /// 运营商 (后续从文件载入)
        /// </summary>
        private void InitOperators()
        {
            try
            {
                OperatorsList Oper1 = new OperatorsList();
                Oper1.MCC = "460";
                Oper1.MNC = "00";
                Oper1.Brand = "中国移动";
                Oper1.OperatorName = "中国移动";
                Oper1.Status = "Operational";
                Oper1.Bands = "GSM 900 / GSM 1800 / TD-SCDMA 1900 / TD-SCDMA 2000 / TD-LTE 1900 / TD-LTE 2300 / TD-LTE 2600";
                Oper1.RefrencesAndNotes = string.Empty;
                Operators.Add(Oper1);

                OperatorsList Oper2 = new OperatorsList();
                Oper2.MCC = "460";
                Oper2.MNC = "01";
                Oper2.Brand = "中国联通";
                Oper2.OperatorName = "中国联通";
                Oper2.Status = "Operational";
                Oper2.Bands = "GSM 900 / GSM 1800 / UMTS 2100 / TD-LTE 2300 / TD-LTE 2600 / FDD-LTE 1800";
                Oper2.RefrencesAndNotes = "CDMA network sold to  China Telecom, WCDMA commercial trial started in May 2009 and in full commercial operation as of October 2009.";
                Operators.Add(Oper2);

                OperatorsList Oper3 = new OperatorsList();
                Oper3.MCC = "460";
                Oper3.MNC = "02";
                Oper3.Brand = "中国移动";
                Oper3.OperatorName = "中国移动";
                Oper3.Status = "Operational";
                Oper3.Bands = "GSM 900 / GSM 1800 / TD-SCDMA 1900 / TD-SCDMA 2000 / TD-LTE 1900 / TD-LTE 2300 / TD-LTE 2600";
                Oper3.RefrencesAndNotes = string.Empty;
                Operators.Add(Oper3);

                OperatorsList Oper4 = new OperatorsList();
                Oper4.MCC = "460";
                Oper4.MNC = "03";
                Oper4.Brand = "中国电信";
                Oper4.OperatorName = "中国电信";
                Oper4.Status = "Operational";
                Oper4.Bands = "CDMA2000 800 / CDMA2000 2100 / FDD-LTE 2100 / TD-LTE 2300 / TD-LTE 2600";
                Oper4.RefrencesAndNotes = "EV-DO";
                Operators.Add(Oper4);


                OperatorsList Oper5 = new OperatorsList();
                Oper5.MCC = "460";
                Oper5.MNC = "05";
                Oper5.Brand = "中国电信";
                Oper5.OperatorName = "中国电信";
                Oper5.Status = "Not Operational";
                Oper5.Bands = "CDMA2000 800 / CDMA2000 2100 / FDD-LTE 2100 / TD-LTE 2300 / TD-LTE 2600";
                Oper5.RefrencesAndNotes = string.Empty;
                Operators.Add(Oper5);

                OperatorsList Oper6 = new OperatorsList();
                Oper6.MCC = "460";
                Oper6.MNC = "06";
                Oper6.Brand = "中国联通";
                Oper6.OperatorName = "中国联通";
                Oper6.Status = "Not Operational";
                Oper6.Bands = "GSM 900 / GSM 1800 / UMTS 2100";
                Oper6.RefrencesAndNotes = string.Empty;
                Operators.Add(Oper6);

                OperatorsList Oper7 = new OperatorsList();
                Oper7.MCC = "460";
                Oper7.MNC = "06";
                Oper7.Brand = "中国移动";
                Oper7.OperatorName = "中国移动";
                Oper7.Status = "Not Operational";
                Oper7.Bands = "GSM 900 / GSM 1800 / TD-SCDMA 1900 / TD-SCDMA 2000 / TD-LTE 1900 / TD-LTE 2300 / TD-LTE 2600";
                Oper7.RefrencesAndNotes = string.Empty;
                Operators.Add(Oper7);

                OperatorsList Oper8 = new OperatorsList();
                Oper5.MCC = "460";
                Oper5.MNC = "11";
                Oper5.Brand = "中国电信";
                Oper5.OperatorName = "中国电信";
                Oper5.Status = "Not Operational";
                Oper5.Bands = "CDMA2000 800 / CDMA2000 2100 / FDD-LTE 2100 / TD-LTE 2300 / TD-LTE 2600";
                Oper5.RefrencesAndNotes = string.Empty;
                Operators.Add(Oper5);
            }
            catch (Exception ex)
            {
                JsonInterFace.IODataHelper.SaveLogs(DateTime.Now.ToString(), "初始化远营商类型", ex.Message, ex.StackTrace);
            }
        }

        public string GetOperators(string PLMN)
        {
            InitOperators();

            if (PLMN != null || PLMN != "")
            {
                for (int i = 0; i < Operators.Count; i++)
                {
                    if ((Operators[i].MCC.Trim() + Operators[i].MNC.Trim()) == (PLMN))
                    {
                        string _Operators = Operators[i].OperatorName.Trim();
                        return _Operators;
                    }
                }
            }
            return "UnKnown";
        }
    }
    #endregion

    #region 设备类型相关
    public static class DeviceType
    {
        private static string lTE = "LTE";
        private static string lTE_FDD = "LTE-FDD";
        private static string lTE_TDD = "LTE-TDD";
        private static string tDS = "TDS";
        private static string wCDMA = "WCDMA";
        private static string tD_SCDMA = "TD-SCDMA";
        private static string cDMA = "CDMA";
        private static string gSM = "GSM";
        private static string gSMV2 = "GSM-V2";
        private static string gSM_V2 = "GSM_V2";
        private static string unknownType = "device_unknown";

        public static string TDS
        {
            get
            {
                return tDS;
            }

            set
            {
                tDS = value;
            }
        }

        public static string WCDMA
        {
            get
            {
                return wCDMA;
            }

            set
            {
                wCDMA = value;
            }
        }

        public static string CDMA
        {
            get
            {
                return cDMA;
            }

            set
            {
                cDMA = value;
            }
        }

        public static string GSM
        {
            get
            {
                return gSM;
            }

            set
            {
                gSM = value;
            }
        }

        public static string UnknownType
        {
            get
            {
                return unknownType;
            }

            set
            {
                unknownType = value;
            }
        }

        public static string GSMV2
        {
            get
            {
                return gSMV2;
            }

            set
            {
                gSMV2 = value;
            }
        }

        public static string TD_SCDMA
        {
            get
            {
                return tD_SCDMA;
            }

            set
            {
                tD_SCDMA = value;
            }
        }

        public static string LTE_FDD
        {
            get
            {
                return lTE_FDD;
            }

            set
            {
                lTE_FDD = value;
            }
        }

        public static string LTE
        {
            get
            {
                return lTE;
            }

            set
            {
                lTE = value;
            }
        }

        public static string LTE_TDD
        {
            get
            {
                return lTE_TDD;
            }

            set
            {
                lTE_TDD = value;
            }
        }

        public static string GSM_V2
        {
            get
            {
                return gSM_V2;
            }

            set
            {
                gSM_V2 = value;
            }
        }
    }
    #endregion

    #region 用户组类型
    public static class RoleTypeClass
    {
        private static string engineering = "Engineering";
        private static string superAdmin = "SuperAdmin";
        private static string administrator = "Administrator";
        private static string seniorOperator = "SeniorOperator";
        private static string user = "User";
        private static string roleType = string.Empty;
        private static Dictionary<string, string> roleprivilege = new Dictionary<string, string>();

        public static string Engineering
        {
            get
            {
                return engineering;
            }

            set
            {
                engineering = value;
            }
        }

        public static string SuperAdmin
        {
            get
            {
                return superAdmin;
            }

            set
            {
                superAdmin = value;
            }
        }

        public static string Administrator
        {
            get
            {
                return administrator;
            }

            set
            {
                administrator = value;
            }
        }

        public static string SeniorOperator
        {
            get
            {
                return seniorOperator;
            }

            set
            {
                seniorOperator = value;
            }
        }

        public static string User
        {
            get
            {
                return user;
            }

            set
            {
                user = value;
            }
        }
        public static string RoleType
        {
            get
            {
                return roleType;
            }

            set
            {
                roleType = value;
            }
        }

        public static Dictionary<string, string> RolePrivilege
        {
            get
            {
                return roleprivilege;
            }

            set
            {
                roleprivilege = value;
            }
        }
    }

    public static class DefaultPrivilege
    {
        private static string aliasName = "-1,所有,所有,所有,功能,功能,功能,功能,设置,设置,设置,设置,设置,显示,显示,显示,显示,显示,显示,用户管理,用户管理,系统管理,系统管理,高级管理,高级管理,特殊名单管理,特殊名单管理,特殊名单管理,特殊名单管理,设备管理,设备管理,设备管理,设备管理,设备管理,设备管理,设备管理,设备管理,设备管理,设备管理,设备管理,高级设置,高级设置,显示,显示,统计分析,统计分析,统计分析,统计分析,历史记录管理,历史记录管理,历史记录管理";
        private static string funName = "所有,功能,设置,显示,设备管理,特殊名单管理,历史记录管理,系统日志管理,用户管理,域管理,系统管理,高级管理,选项...,捕号窗口,黑名单窗口,状态窗口,默认窗口,未知设备提示器,系统状态监控器,账号设置,用户组设置,密码修改,本地设置,后台设置,配置导入导出,黑名单,白名单,普通用户,重定向设置,设备信息,小区信息,高级设置,系统维护,工程设置,非XML设置,邻小区信息,IMSI设置,短信息设置,通话记录,短信记录,时间段控制,其它设置,地图显示,统计分析,分时统计,常驻人口分析,碰撞分析,伴随分析,历史记录查询,通话记录查询,短信记录查询";
        private static string priId = "";
        private static string des = "0";
        public static string AliasName
        {
            get
            {
                return aliasName;
            }

            set
            {
                aliasName = value;
            }
        }
        public static string FunName
        {
            get
            {
                return funName;
            }

            set
            {
                funName = value;
            }
        }
        public static string PriId
        {
            get
            {
                return priId;
            }

            set
            {
                priId = value;
            }
        }
        public static string Des
        {
            get
            {
                return des;
            }

            set
            {
                des = value;
            }
        }
    }
    #endregion

    #region 设备管理数据结构
    #region LTE
    /// <summary>
    /// 设设备信息
    /// </summary>
    /// /// <summary>
    /// AP属性
    /// </summary>
    public class APClass : INotifyPropertyChanged
    {
        private string fullName;
        private string selfName;
        private string selfID;
        private string parentID;
        private string mode;
        private string carrier;
        private string ipAddr;
        private string port;
        private string netMask;
        private string sN;
        private string onLine;
        private string innerType;
        private string apVersion;
        private string lastOnline;
        private string isActive;
        private string aLIGN;
        private string radio;
        private string alertIcon;
        private string alertText;
        private string des;

        public string FullName
        {
            get
            {
                return fullName;
            }

            set
            {
                fullName = value;
                NotifyPropertyChanged("fullName");
            }
        }

        public string Mode
        {
            get
            {
                return mode;
            }

            set
            {
                mode = value;
                NotifyPropertyChanged("mode");
            }
        }

        public string Carrier
        {
            get
            {
                return carrier;
            }

            set
            {
                carrier = value;
                NotifyPropertyChanged("carrier");
            }
        }

        public string LastOnline
        {
            get
            {
                return lastOnline;
            }

            set
            {
                lastOnline = value;
                NotifyPropertyChanged("lastOnline");
            }
        }

        public string IsActive
        {
            get
            {
                return isActive;
            }

            set
            {
                isActive = value;
                NotifyPropertyChanged("isActive");
            }
        }

        public string SelfName
        {
            get
            {
                return selfName;
            }

            set
            {
                selfName = value;
                NotifyPropertyChanged("selfName");
            }
        }

        public string SelfID
        {
            get
            {
                return selfID;
            }

            set
            {
                selfID = value;
                NotifyPropertyChanged("SelfID");
            }
        }

        public string ParentID
        {
            get
            {
                return parentID;
            }

            set
            {
                parentID = value;
                NotifyPropertyChanged("ParentID");
            }
        }

        public string IpAddr
        {
            get
            {
                return ipAddr;
            }

            set
            {
                ipAddr = value;
                NotifyPropertyChanged("IpAddr");
            }
        }

        public string Port
        {
            get
            {
                return port;
            }

            set
            {
                port = value;
                NotifyPropertyChanged("Port");
            }
        }

        public string NetMask
        {
            get
            {
                return netMask;
            }

            set
            {
                netMask = value;
                NotifyPropertyChanged("NetMask");
            }
        }

        public string SN
        {
            get
            {
                return sN;
            }

            set
            {
                sN = value;
                NotifyPropertyChanged("SN");
            }
        }

        public string InnerType
        {
            get
            {
                return innerType;
            }

            set
            {
                innerType = value;
                NotifyPropertyChanged("InnerType");
            }
        }

        public string ApVersion
        {
            get
            {
                return apVersion;
            }

            set
            {
                apVersion = value;
                NotifyPropertyChanged("ApVersion");
            }
        }

        public string OnLine
        {
            get
            {
                return onLine;
            }

            set
            {
                onLine = value;
                NotifyPropertyChanged("OnLine");
            }
        }

        public string ALIGN
        {
            get
            {
                return aLIGN;
            }

            set
            {
                aLIGN = value;
                NotifyPropertyChanged("ALIGN");
            }
        }

        public string Radio
        {
            get
            {
                return radio;
            }

            set
            {
                radio = value;
                NotifyPropertyChanged("Radio");
            }
        }

        public string AlertIcon
        {
            get
            {
                return alertIcon;
            }

            set
            {
                alertIcon = value;
                NotifyPropertyChanged("AlertIcon");
            }
        }

        public string AlertText
        {
            get
            {
                return alertText;
            }

            set
            {
                alertText = value;
                NotifyPropertyChanged("AlertText");
            }
        }

        public string Des
        {
            get
            {
                return des;
            }

            set
            {
                des = value;
                NotifyPropertyChanged("Des");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        public void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    /// <summary>
    /// LTE设备参数
    /// </summary>
    public class LTEDeviceParameterClass : APClass
    {
        private DeviceTreeOperation operation;
        private string domainFullPathName;
        private string station;
        private string deviceName;
        private string deviceMode;
        private bool staticIPMode;
        private bool dynamicIPMode;
        private string deviceIdentificationMode;

        public DeviceTreeOperation Operation
        {
            get
            {
                return operation;
            }

            set
            {
                operation = value;
                NotifyPropertyChanged("operation");
            }
        }

        public string DomainFullPathName
        {
            get
            {
                return domainFullPathName;
            }

            set
            {
                domainFullPathName = value;
                NotifyPropertyChanged("DomainFullPathName");
            }
        }

        public string Station
        {
            get
            {
                return station;
            }

            set
            {
                station = value;
                NotifyPropertyChanged("Station");
            }
        }

        public string DeviceName
        {
            get
            {
                return deviceName;
            }

            set
            {
                deviceName = value;
                NotifyPropertyChanged("DeviceName");
            }
        }

        public string DeviceMode
        {
            get
            {
                return deviceMode;
            }

            set
            {
                deviceMode = value;
                NotifyPropertyChanged("DeviceMode");
            }
        }

        public bool StaticIPMode
        {
            get
            {
                return staticIPMode;
            }

            set
            {
                staticIPMode = value;
                NotifyPropertyChanged("StaticIPMode");
            }
        }

        public bool DynamicIPMode
        {
            get
            {
                return dynamicIPMode;
            }

            set
            {
                dynamicIPMode = value;
                NotifyPropertyChanged("DynamicIPMode");
            }
        }

        public string DeviceIdentificationMode
        {
            get
            {
                return deviceIdentificationMode;
            }

            set
            {
                deviceIdentificationMode = value;
                NotifyPropertyChanged("DeviceIdentificationMode");
            }
        }
    }

    /// <summary>
    /// 小区信息
    /// </summary>
    public class LTECellNeighParameterClass : LTEDeviceParameterClass
    {
        private string _pLMN;
        private string _frequencyPoint;
        private string _bandWidth;
        private string _powerAttenuation;
        private string _operators;
        private string _scrambler;
        private string _tacLac;
        private string _period;
        private string _cellID;
        private string _cycle;

        private DataTable _morePLMNSTab = null;
        private DataTable _perierFreqTab = null;
        private object _inputLock = null;

        private DataTable _cellInfoTab = null;
        private DataTable _itemCellInfoTab = null;
        private object _cellInfoInputLock = null;
        private object _itemCellInfoInputLock = null;
        private DataTable _gSMV2CellInfoTab = null;

        public LTECellNeighParameterClass()
        {

            if (MorePLMNSTab == null)
            {
                MorePLMNSTab = new DataTable("MorePlmnList");

                DataColumn DataColumn0 = new DataColumn();
                DataColumn0.DataType = System.Type.GetType("System.String");
                DataColumn0.ColumnName = "PLMNS";

                MorePLMNSTab.Columns.Add(DataColumn0);
            }
            if (PerierFreqTab == null)
            {
                PerierFreqTab = new DataTable("PerierFreqList");
                DataColumn DataColumn0 = new DataColumn();
                DataColumn0.DataType = System.Type.GetType("System.String");
                DataColumn0.ColumnName = "PerierFreq";

                PerierFreqTab.Columns.Add(DataColumn0);
            }

            if (InputLock == null)
            {
                InputLock = new object();
            }

            if (CellInfoTab == null)
            {
                CellInfoTab = new DataTable("CellInfo");
                InitCellInfoTab();
            }
            if (GSMV2CellInfoTab == null)
            {
                GSMV2CellInfoTab = new DataTable("GSMV2CellInfo");
                GSMV2InitCellInfoTab();
            }

            if (ItemCellInfoTab == null)
            {
                ItemCellInfoTab = new DataTable("ItemCellInfo");
                InitItemCellInfoTab();
            }
        }

        private void InitCellInfoTab()
        {
            DataColumn DataColumn0 = new DataColumn();
            DataColumn0.DataType = System.Type.GetType("System.String");
            DataColumn0.ColumnName = "SID";

            DataColumn DataColumn1 = new DataColumn();
            DataColumn1.DataType = System.Type.GetType("System.String");
            DataColumn1.ColumnName = "NID";

            DataColumn DataColumn2 = new DataColumn();
            DataColumn2.DataType = System.Type.GetType("System.String");
            DataColumn2.ColumnName = "BPLMNID";

            DataColumn DataColumn3 = new DataColumn();
            DataColumn3.DataType = System.Type.GetType("System.String");
            DataColumn3.ColumnName = "CRSRP";

            DataColumn DataColumn4 = new DataColumn();
            DataColumn4.DataType = System.Type.GetType("System.String");
            DataColumn4.ColumnName = "WTAC";

            DataColumn DataColumn5 = new DataColumn();
            DataColumn5.DataType = System.Type.GetType("System.String");
            DataColumn5.ColumnName = "WPhyCellID";

            DataColumn DataColumn6 = new DataColumn();
            DataColumn6.DataType = System.Type.GetType("System.String");
            DataColumn6.ColumnName = "WUARFCN";

            DataColumn DataColumn7 = new DataColumn();
            DataColumn7.DataType = System.Type.GetType("System.String");
            DataColumn7.ColumnName = "CRefTxPower";

            DataColumn DataColumn8 = new DataColumn();
            DataColumn8.DataType = System.Type.GetType("System.String");
            DataColumn8.ColumnName = "BNbCellNum";

            DataColumn DataColumn9 = new DataColumn();
            DataColumn9.DataType = System.Type.GetType("System.String");
            DataColumn9.ColumnName = "BC2";

            DataColumn DataColumn10 = new DataColumn();
            DataColumn10.DataType = System.Type.GetType("System.String");
            DataColumn10.ColumnName = "Rkey";

            CellInfoTab.Columns.Add(DataColumn0);
            CellInfoTab.Columns.Add(DataColumn1);
            CellInfoTab.Columns.Add(DataColumn2);
            CellInfoTab.Columns.Add(DataColumn3);
            CellInfoTab.Columns.Add(DataColumn4);
            CellInfoTab.Columns.Add(DataColumn5);
            CellInfoTab.Columns.Add(DataColumn6);
            CellInfoTab.Columns.Add(DataColumn7);
            CellInfoTab.Columns.Add(DataColumn8);
            CellInfoTab.Columns.Add(DataColumn9);
            CellInfoTab.Columns.Add(DataColumn10);
        }

        private void GSMV2InitCellInfoTab()
        {
            DataColumn DataColumn0 = new DataColumn();
            DataColumn0.DataType = System.Type.GetType("System.String");
            DataColumn0.ColumnName = "DwCellId";

            DataColumn DataColumn1 = new DataColumn();
            DataColumn1.DataType = System.Type.GetType("System.String");
            DataColumn1.ColumnName = "BPLMNID";

            DataColumn DataColumn2 = new DataColumn();
            DataColumn2.DataType = System.Type.GetType("System.String");
            DataColumn2.ColumnName = "CRSRP";

            DataColumn DataColumn3 = new DataColumn();
            DataColumn3.DataType = System.Type.GetType("System.String");
            DataColumn3.ColumnName = "WTAC";

            DataColumn DataColumn4 = new DataColumn();
            DataColumn4.DataType = System.Type.GetType("System.String");
            DataColumn4.ColumnName = "WPhyCellID";

            DataColumn DataColumn5 = new DataColumn();
            DataColumn5.DataType = System.Type.GetType("System.String");
            DataColumn5.ColumnName = "WUARFCN";

            DataColumn DataColumn6 = new DataColumn();
            DataColumn6.DataType = System.Type.GetType("System.String");
            DataColumn6.ColumnName = "CRefTxPower";

            DataColumn DataColumn7 = new DataColumn();
            DataColumn7.DataType = System.Type.GetType("System.String");
            DataColumn7.ColumnName = "BNbCellNum";

            DataColumn DataColumn8 = new DataColumn();
            DataColumn8.DataType = System.Type.GetType("System.String");
            DataColumn8.ColumnName = "BC2";

            DataColumn DataColumn9 = new DataColumn();
            DataColumn9.DataType = System.Type.GetType("System.String");
            DataColumn9.ColumnName = "Rkey";

            GSMV2CellInfoTab.Columns.Add(DataColumn0);
            GSMV2CellInfoTab.Columns.Add(DataColumn1);
            GSMV2CellInfoTab.Columns.Add(DataColumn2);
            GSMV2CellInfoTab.Columns.Add(DataColumn3);
            GSMV2CellInfoTab.Columns.Add(DataColumn4);
            GSMV2CellInfoTab.Columns.Add(DataColumn5);
            GSMV2CellInfoTab.Columns.Add(DataColumn6);
            GSMV2CellInfoTab.Columns.Add(DataColumn7);
            GSMV2CellInfoTab.Columns.Add(DataColumn8);
            GSMV2CellInfoTab.Columns.Add(DataColumn9);
        }

        private void InitItemCellInfoTab()
        {
            DataColumn DataColumn0 = new DataColumn();
            DataColumn0.DataType = System.Type.GetType("System.String");
            DataColumn0.ColumnName = "WUarfcn";

            DataColumn DataColumn1 = new DataColumn();
            DataColumn1.DataType = System.Type.GetType("System.String");
            DataColumn1.ColumnName = "WPhyCellId";

            DataColumn DataColumn2 = new DataColumn();
            DataColumn2.DataType = System.Type.GetType("System.String");
            DataColumn2.ColumnName = "CRSRP";

            DataColumn DataColumn3 = new DataColumn();
            DataColumn3.DataType = System.Type.GetType("System.String");
            DataColumn3.ColumnName = "CC1";

            DataColumn DataColumn4 = new DataColumn();
            DataColumn4.DataType = System.Type.GetType("System.String");
            DataColumn4.ColumnName = "BC2";

            DataColumn DataColumn5 = new DataColumn();
            DataColumn5.DataType = System.Type.GetType("System.String");
            DataColumn5.ColumnName = "Index_Ptr";

            ItemCellInfoTab.Columns.Add(DataColumn0);
            ItemCellInfoTab.Columns.Add(DataColumn1);
            ItemCellInfoTab.Columns.Add(DataColumn2);
            ItemCellInfoTab.Columns.Add(DataColumn3);
            ItemCellInfoTab.Columns.Add(DataColumn4);
            ItemCellInfoTab.Columns.Add(DataColumn5);
        }

        public void PlmnsInput(string plmn)
        {
            lock (InputLock)
            {
                DataRow dr = MorePLMNSTab.NewRow();
                dr[0] = plmn;
                MorePLMNSTab.Rows.Add(dr);
            }
        }

        public void PerierInput(string freq)
        {
            lock (InputLock)
            {
                DataRow dr = PerierFreqTab.NewRow();
                dr[0] = freq;
                PerierFreqTab.Rows.Add(dr);
            }
        }

        public void CellInfoInput(
                                                    string SID,
                                                    string NID,
                                                    string bPLMNId,
                                                    string cRSRP,
                                                    string wTac,
                                                    string wPhyCellId,
                                                    string wUARFCN,
                                                    string cRefTxPower,
                                                    string bNbCellNum,
                                                    string bC2,
                                                    string Rkey
                                                )
        {
            if (CellInfoInputLock == null)
            {
                CellInfoInputLock = new DataTable("CellInfo");
            }
            lock (CellInfoInputLock)
            {
                DataRow dr = CellInfoTab.NewRow();
                dr[0] = SID;
                dr[1] = NID;
                dr[2] = bPLMNId;
                dr[3] = cRSRP;
                dr[4] = wTac;
                dr[5] = wPhyCellId;
                dr[6] = wUARFCN;
                dr[7] = cRefTxPower;
                dr[8] = bNbCellNum;
                dr[9] = bC2;
                dr[10] = Rkey;
                CellInfoTab.Rows.Add(dr);
            }
        }

        public void GSMV2CellInfoInput(
                                                    string DwCellId,
                                                    string bPLMNId,
                                                    string cRSRP,
                                                    string wTac,
                                                    string wPhyCellId,
                                                    string wUARFCN,
                                                    string cRefTxPower,
                                                    string bNbCellNum,
                                                    string bC2,
                                                    string Rkey
                                                )
        {
            if (CellInfoInputLock == null)
            {
                CellInfoInputLock = new DataTable("GSMV2CellInfo");
            }
            lock (CellInfoInputLock)
            {
                DataRow dr = GSMV2CellInfoTab.NewRow();
                dr[0] = DwCellId;
                dr[1] = bPLMNId;
                dr[2] = cRSRP;
                dr[3] = wTac;
                dr[4] = wPhyCellId;
                dr[5] = wUARFCN;
                dr[6] = cRefTxPower;
                dr[7] = bNbCellNum;
                dr[8] = bC2;
                dr[9] = Rkey;
                GSMV2CellInfoTab.Rows.Add(dr);
            }
        }

        public void ItemCellInfoInput(
                                                            string WUarfcn,
                                                            string WPhyCellId,
                                                            string CRSRP,
                                                            string CC1,
                                                            string BC2,
                                                            string Index_Ptr
                                                        )
        {
            if (ItemCellInfoInputLock == null)
            {
                ItemCellInfoInputLock = new DataTable("ItemCellInfo");
            }
            lock (ItemCellInfoInputLock)
            {
                DataRow dr = ItemCellInfoTab.NewRow();
                dr[0] = WUarfcn;
                dr[1] = WPhyCellId;
                dr[2] = CRSRP;
                dr[3] = CC1;
                dr[4] = BC2;
                dr[5] = Index_Ptr;
                ItemCellInfoTab.Rows.Add(dr);
            }
        }

        public string PLMN
        {
            get
            {
                return _pLMN;
            }

            set
            {
                _pLMN = value;
                NotifyPropertyChanged("PLMN");
            }
        }

        public string FrequencyPoint
        {
            get
            {
                return _frequencyPoint;
            }

            set
            {
                _frequencyPoint = value;
                NotifyPropertyChanged("FrequencyPoint");
            }
        }

        public string BandWidth
        {
            get
            {
                return _bandWidth;
            }

            set
            {
                _bandWidth = value;
                NotifyPropertyChanged("BandWidth");
            }
        }

        public string PowerAttenuation
        {
            get
            {
                return _powerAttenuation;
            }

            set
            {
                _powerAttenuation = value;
                NotifyPropertyChanged("PowerAttenuation");
            }
        }

        public string Operators
        {
            get
            {
                return _operators;
            }

            set
            {
                _operators = value;
                NotifyPropertyChanged("Operators");
            }
        }

        public string Scrambler
        {
            get
            {
                return _scrambler;
            }

            set
            {
                _scrambler = value;
                NotifyPropertyChanged("Scrambler");
            }
        }

        public string TacLac
        {
            get
            {
                return _tacLac;
            }

            set
            {
                _tacLac = value;
                NotifyPropertyChanged("TacLac");
            }
        }

        public string Period
        {
            get
            {
                return _period;
            }

            set
            {
                _period = value;
                NotifyPropertyChanged("Period");
            }
        }

        public string CellID
        {
            get
            {
                return _cellID;
            }

            set
            {
                _cellID = value;
                NotifyPropertyChanged("CellID");
            }
        }

        public DataTable MorePLMNSTab
        {
            get
            {
                return _morePLMNSTab;
            }

            set
            {
                _morePLMNSTab = value;
            }
        }

        public DataTable PerierFreqTab
        {
            get
            {
                return _perierFreqTab;
            }

            set
            {
                _perierFreqTab = value;
            }
        }

        public object InputLock
        {
            get
            {
                return _inputLock;
            }

            set
            {
                _inputLock = value;
            }
        }

        public string Cycle
        {
            get
            {
                return _cycle;
            }

            set
            {
                _cycle = value;
                NotifyPropertyChanged("Cycle");
            }
        }

        public DataTable CellInfoTab
        {
            get
            {
                return _cellInfoTab;
            }

            set
            {
                _cellInfoTab = value;
            }
        }
        public DataTable GSMV2CellInfoTab
        {
            get
            {
                return _gSMV2CellInfoTab;
            }

            set
            {
                _gSMV2CellInfoTab = value;
            }
        }


        public DataTable ItemCellInfoTab
        {
            get
            {
                return _itemCellInfoTab;
            }

            set
            {
                _itemCellInfoTab = value;
            }
        }

        public object CellInfoInputLock
        {
            get
            {
                return _cellInfoInputLock;
            }

            set
            {
                _cellInfoInputLock = value;
            }
        }

        public object ItemCellInfoInputLock
        {
            get
            {
                return _itemCellInfoInputLock;
            }

            set
            {
                _itemCellInfoInputLock = value;
            }
        }
    }

    /// <summary>
    /// 工作模式设置
    /// </summary>
    public class LTESetWorkModeParameterClass : LTECellNeighParameterClass
    {
        private bool rebootModeAuto;
        private bool rebootModeManul;
        private bool frequencyChioceModeAuto;
        private bool frequencyChioceModeManul;
        private string audit;
        private string scanner;

        public string Audit
        {
            get
            {
                return audit;
            }

            set
            {
                audit = value;
                NotifyPropertyChanged("Audit");
            }
        }

        public string Scanner
        {
            get
            {
                return scanner;
            }

            set
            {
                scanner = value;
                NotifyPropertyChanged("Scanner");
            }
        }

        public bool RebootModeAuto
        {
            get
            {
                return rebootModeAuto;
            }

            set
            {
                rebootModeAuto = value;
                NotifyPropertyChanged("RebootModeAuto");
            }
        }

        public bool RebootModeManul
        {
            get
            {
                return rebootModeManul;
            }

            set
            {
                rebootModeManul = value;
                NotifyPropertyChanged("RebootModeManul");
            }
        }

        public bool FrequencyChioceModeAuto
        {
            get
            {
                return frequencyChioceModeAuto;
            }

            set
            {
                frequencyChioceModeAuto = value;
                NotifyPropertyChanged("FrequencyChioceModeAuto");
            }
        }

        public bool FrequencyChioceModeManul
        {
            get
            {
                return frequencyChioceModeManul;
            }

            set
            {
                frequencyChioceModeManul = value;
                NotifyPropertyChanged("FrequencyChioceModeManul");
            }
        }
    }

    /// <summary>
    /// 高级设置
    /// </summary>
    public class LTEDeviceAdvanceSettingClass : LTESetWorkModeParameterClass
    {
        private string frequencyList;
        private bool gPSStatusConfig;
        private bool gPSStatusNoneConfig;
        private string frequencyOffsetList;
        private string nTPServerIP;
        private string nTPLevel;
        private bool syncSourceWithGPS;
        private bool syncSourceWithKongKou;
        private bool appointNeighNoneConfig;
        private bool appointNeighConfig;
        private string appointNeighList;
        private string appointNeighPci;
        private string appointNeighBandWidth;
        private string firstPeriodTimeStart = "";
        private string firstPeriodTimeEnd = "";
        private string secondPeriodTimeStart = "";
        private string secoondPeriodTimeEnd = "";
        private string threePeriodTimeStart = "";
        private string threePeriodTimeEnd = "";
        private int scanEnable = 0;

        public int ScanEnable
        {
            get
            {
                return scanEnable;
            }

            set
            {
                scanEnable = value;
                NotifyPropertyChanged("ScanEnable");
            }
        }
        public string FrequencyList
        {
            get
            {
                return frequencyList;
            }

            set
            {
                frequencyList = value;
                NotifyPropertyChanged("FrequencyList");
            }
        }

        public string FrequencyOffsetList
        {
            get
            {
                return frequencyOffsetList;
            }

            set
            {
                frequencyOffsetList = value;
                NotifyPropertyChanged("FrequencyOffsetList");
            }
        }

        public string NTPLevel
        {
            get
            {
                return nTPLevel;
            }

            set
            {
                nTPLevel = value;
                NotifyPropertyChanged("NTPLevel");
            }
        }

        public string AppointNeighList
        {
            get
            {
                return appointNeighList;
            }

            set
            {
                appointNeighList = value;
                NotifyPropertyChanged("AppointNeighList");
            }
        }

        public string FirstPeriodTimeStart
        {
            get
            {
                return firstPeriodTimeStart;
            }

            set
            {
                firstPeriodTimeStart = value;
                NotifyPropertyChanged("FirstPeriodTimeStart");
            }
        }

        public string FirstPeriodTimeEnd
        {
            get
            {
                return firstPeriodTimeEnd;
            }

            set
            {
                firstPeriodTimeEnd = value;
                NotifyPropertyChanged("FirstPeriodTimeEnd");
            }
        }

        public string SecondPeriodTimeStart
        {
            get
            {
                return secondPeriodTimeStart;
            }

            set
            {
                secondPeriodTimeStart = value;
                NotifyPropertyChanged("SecondPeriodTimeStart");
            }
        }

        public string SecoondPeriodTimeEnd
        {
            get
            {
                return secoondPeriodTimeEnd;
            }

            set
            {
                secoondPeriodTimeEnd = value;
                NotifyPropertyChanged("SecoondPeriodTimeEnd");
            }
        }
        public string ThreePeriodTimeStart
        {
            get
            {
                return threePeriodTimeStart;
            }

            set
            {
                threePeriodTimeStart = value;
                NotifyPropertyChanged("ThreePeriodTimeStart");
            }
        }

        public string ThreePeriodTimeEnd
        {
            get
            {
                return threePeriodTimeEnd;
            }

            set
            {
                threePeriodTimeEnd = value;
                NotifyPropertyChanged("ThreePeriodTimeEnd");
            }
        }

        public bool SyncSourceWithGPS
        {
            get
            {
                return syncSourceWithGPS;
            }

            set
            {
                syncSourceWithGPS = value;
                NotifyPropertyChanged("SyncSourceWithGPS");
            }
        }

        public bool SyncSourceWithKongKou
        {
            get
            {
                return syncSourceWithKongKou;
            }

            set
            {
                syncSourceWithKongKou = value;
                NotifyPropertyChanged("SyncSourceWithKongKou");
            }
        }

        public bool AppointNeighNoneConfig
        {
            get
            {
                return appointNeighNoneConfig;
            }

            set
            {
                appointNeighNoneConfig = value;
                NotifyPropertyChanged("AppointNeighNoneConfig");
            }
        }

        public bool AppointNeighConfig
        {
            get
            {
                return appointNeighConfig;
            }

            set
            {
                appointNeighConfig = value;
                NotifyPropertyChanged("AppointNeighConfig");
            }
        }

        public bool GPSStatusConfig
        {
            get
            {
                return gPSStatusConfig;
            }

            set
            {
                gPSStatusConfig = value;
                NotifyPropertyChanged("GPSStatusConfig");
            }
        }

        public bool GPSStatusNoneConfig
        {
            get
            {
                return gPSStatusNoneConfig;
            }

            set
            {
                gPSStatusNoneConfig = value;
                NotifyPropertyChanged("GPSStatusNoneConfig");
            }
        }

        public string NTPServerIP
        {
            get
            {
                return nTPServerIP;
            }

            set
            {
                nTPServerIP = value;
                NotifyPropertyChanged("NTPServerIP");
            }
        }

        public string AppointNeighPci
        {
            get
            {
                return appointNeighPci;
            }

            set
            {
                appointNeighPci = value;
                NotifyPropertyChanged("AppointNeighPci");
            }
        }

        public string AppointNeighBandWidth
        {
            get
            {
                return appointNeighBandWidth;
            }

            set
            {
                appointNeighBandWidth = value;
                NotifyPropertyChanged("AppointNeighBandWidth");
            }
        }
    }

    /// <summary>
    /// 设备系统维护
    /// </summary>
    public class LTEDeviceSystemMaintenence : LTEDeviceAdvanceSettingClass
    {
        private string upgradeFile;
        private string fileVertion;
        private string logFiles;
        private IntPtr selfWinHandle;
        List<string> deviceLists = null;

        public LTEDeviceSystemMaintenence()
        {
            if (DeviceLists == null)
            {
                DeviceLists = new List<string>();
            }
        }

        public string UpgradeFile
        {
            get
            {
                return upgradeFile;
            }

            set
            {
                upgradeFile = value;
                NotifyPropertyChanged("UpgradeFile");
            }
        }

        public string LogFiles
        {
            get
            {
                return logFiles;
            }

            set
            {
                logFiles = value;
                NotifyPropertyChanged("LogFiles");
            }
        }

        public IntPtr SelfWinHandle
        {
            get
            {
                return selfWinHandle;
            }

            set
            {
                selfWinHandle = value;
                NotifyPropertyChanged("SelfWinHandle");
            }
        }

        public List<string> DeviceLists
        {
            get
            {
                return deviceLists;
            }

            set
            {
                deviceLists = value;
                NotifyPropertyChanged("DeviceLists");
            }
        }

        public string FileVertion
        {
            get
            {
                return fileVertion;
            }

            set
            {
                fileVertion = value;
                NotifyPropertyChanged("FileVertion");
            }
        }
    }

    /// <summary>
    /// 工程设置
    /// </summary>
    public class LTEDeviceObjectSetting : LTEDeviceSystemMaintenence
    {
        private string _parameterKeyName;
        private string _parameterValue;
        private string _parameterCommandList;
        private string _parameterResultValue;

        public string ParameterKeyName
        {
            get
            {
                return _parameterKeyName;
            }

            set
            {
                _parameterKeyName = value;
                NotifyPropertyChanged("ParameterKeyName");
            }
        }

        public string ParameterValue
        {
            get
            {
                return _parameterValue;
            }

            set
            {
                _parameterValue = value;
                NotifyPropertyChanged("ParameterValue");
            }
        }

        public string ParameterCommandList
        {
            get
            {
                return _parameterCommandList;
            }

            set
            {
                _parameterCommandList = value;
                NotifyPropertyChanged("ParameterCommandList");
            }
        }

        public string ParameterResultValue
        {
            get
            {
                return _parameterResultValue;
            }

            set
            {
                _parameterResultValue = value;
                NotifyPropertyChanged("ParameterResultValue");
            }
        }
    }

    /// <summary>
    /// LTE白名单自学习型
    /// </summary>
    public class WhiteListSelfLearningParameterClass : LTEDeviceObjectSetting
    {
        private string _command;
        private string _txpower;
        private string _duration;
        private string _clearWhiteList;

        public class _editorParameterClass
        {
            private string _command;
            private string _txpower;
            private string _duration;
            private string _clearWhiteList;

            public string Command
            {
                get
                {
                    return _command;
                }

                set
                {
                    _command = value;
                }
            }

            public string Txpower
            {
                get
                {
                    return _txpower;
                }

                set
                {
                    _txpower = value;
                }
            }

            public string Duration
            {
                get
                {
                    return _duration;
                }

                set
                {
                    _duration = value;
                }
            }

            public string ClearWhiteList
            {
                get
                {
                    return _clearWhiteList;
                }

                set
                {
                    _clearWhiteList = value;
                }
            }
        }

        public string Command
        {
            get
            {
                return _command;
            }

            set
            {
                _command = value;
                NotifyPropertyChanged("Command");
            }
        }

        public string Txpower
        {
            get
            {
                return _txpower;
            }

            set
            {
                _txpower = value;
                NotifyPropertyChanged("Txpower");
            }
        }

        public string Duration
        {
            get
            {
                return _duration;
            }

            set
            {
                _duration = value;
                NotifyPropertyChanged("Duration");
            }
        }

        public string ClearWhiteList
        {
            get
            {
                return _clearWhiteList;
            }

            set
            {
                _clearWhiteList = value;
                NotifyPropertyChanged("ClearWhiteList");
            }
        }

        public _editorParameterClass EditorParameter = new _editorParameterClass();
    }
    #endregion

    #region GSM
    /// <summary>
    /// GSM载波参数
    /// </summary>
    public class GSMCarrierParameterClass : WhiteListSelfLearningParameterClass
    {
        private bool carrierOne;
        private bool carrierTwo;
        private sbyte carrierTotal;
        private byte submitCount;

        public bool CarrierOne
        {
            get
            {
                return carrierOne;
            }

            set
            {
                carrierOne = value;
                NotifyPropertyChanged("CarrierOne");
            }
        }
        public bool CarrierTwo
        {
            get
            {
                return carrierTwo;
            }

            set
            {
                carrierTwo = value;
                NotifyPropertyChanged("CarrierTwo");
            }
        }
        public sbyte CarrierTotal
        {
            get
            {
                return carrierTotal;
            }

            set
            {
                carrierTotal = value;
                NotifyPropertyChanged("CarrierTotal");
            }
        }
        public byte SubmitCount
        {
            get
            {
                return submitCount;
            }

            set
            {
                submitCount = value;
                NotifyPropertyChanged("SubmitCount");
            }
        }
    }

    /// <summary>
    /// GSM设备参数
    /// </summary>
    public class GSMDeviceParameterClass : GSMCarrierParameterClass
    {

    }

    /// <summary>
    /// GSM系统参数
    /// </summary>
    public class GSMSystemParameterClass : GSMDeviceParameterClass
    {
        private string _paraMcc;
        private string _paraMnc;
        private string _paraBsic;
        private string _paraLac;
        private string _paraC2;
        private string _paraPeri;
        private string _paraAccPwr;
        private string _paraMsPwr;
        private string _paraRejCau;

        public string ParaBsic
        {
            get
            {
                return _paraBsic;
            }

            set
            {
                _paraBsic = value;
                NotifyPropertyChanged("ParaBsic");
            }
        }

        public string ParaLac
        {
            get
            {
                return _paraLac;
            }

            set
            {
                _paraLac = value;
                NotifyPropertyChanged("ParaLac");
            }
        }

        public string ParaC2
        {
            get
            {
                return _paraC2;
            }

            set
            {
                _paraC2 = value;
                NotifyPropertyChanged("ParaC2");
            }
        }

        public string ParaPeri
        {
            get
            {
                return _paraPeri;
            }

            set
            {
                _paraPeri = value;
                NotifyPropertyChanged("ParaPeri");
            }
        }

        public string ParaAccPwr
        {
            get
            {
                return _paraAccPwr;
            }

            set
            {
                _paraAccPwr = value;
                NotifyPropertyChanged("ParaAccPwr");
            }
        }

        public string ParaMsPwr
        {
            get
            {
                return _paraMsPwr;
            }

            set
            {
                _paraMsPwr = value;
                NotifyPropertyChanged("ParaMsPwr");
            }
        }

        public string ParaRejCau
        {
            get
            {
                return _paraRejCau;
            }

            set
            {
                _paraRejCau = value;
                NotifyPropertyChanged("ParaRejCau");
            }
        }

        public string ParaMcc
        {
            get
            {
                return _paraMcc;
            }

            set
            {
                _paraMcc = value;
                NotifyPropertyChanged("ParaMcc");
            }
        }

        public string ParaMnc
        {
            get
            {
                return _paraMnc;
            }

            set
            {
                _paraMnc = value;
                NotifyPropertyChanged("ParaMnc");
            }
        }
    }

    /// <summary>
    /// GSM系统选项
    /// </summary>
    public class GSMSystemOptionParameterClass : GSMSystemParameterClass
    {
        private string _opLuSms;
        private string _opLuImei;
        private string _opCallEn;
        private string _opDebug;
        private string _opLuType;
        private string _opLuText;
        private string _opSmsType;

        public string OpLuSms
        {
            get
            {
                return _opLuSms;
            }

            set
            {
                _opLuSms = value;
                NotifyPropertyChanged("OpLuSms");
            }
        }

        public string OpLuImei
        {
            get
            {
                return _opLuImei;
            }

            set
            {
                _opLuImei = value;
                NotifyPropertyChanged("OpLuImei");
            }
        }

        public string OpCallEn
        {
            get
            {
                return _opCallEn;
            }

            set
            {
                _opCallEn = value;
                NotifyPropertyChanged("OpCallEn");
            }
        }

        public string OpDebug
        {
            get
            {
                return _opDebug;
            }

            set
            {
                _opDebug = value;
                NotifyPropertyChanged("OpDebug");
            }
        }

        public string OpLuType
        {
            get
            {
                return _opLuType;
            }

            set
            {
                _opLuType = value;
                NotifyPropertyChanged("OpLuType");
            }
        }

        public string OpLuText
        {
            get
            {
                return _opLuText;
            }

            set
            {
                _opLuText = value;
                NotifyPropertyChanged("OpLuText");
            }
        }

        public string OpSmsType
        {
            get
            {
                return _opSmsType;
            }

            set
            {
                _opSmsType = value;
                NotifyPropertyChanged("OpSmsType");
            }
        }
    }

    /// <summary>
    /// GSM射频参数
    /// </summary>
    public class GSMRadioFrequencyParameterClass : GSMSystemOptionParameterClass
    {
        private string _rfEnable;
        private string _rfFreq;
        private string _rfPwr;

        public string RfEnable
        {
            get
            {
                return _rfEnable;
            }

            set
            {
                _rfEnable = value;
                NotifyPropertyChanged("RfEnable");
            }
        }

        public string RfFreq
        {
            get
            {
                return _rfFreq;
            }

            set
            {
                _rfFreq = value;
                NotifyPropertyChanged("RfFreq");
            }
        }

        public string RfPwr
        {
            get
            {
                return _rfPwr;
            }

            set
            {
                _rfPwr = value;
                NotifyPropertyChanged("RfPwr");
            }
        }
    }

    /// <summary>
    /// GSM短信息参数
    /// </summary>
    public class GSMSMSParameterClass : GSMRadioFrequencyParameterClass
    {
        private string _gSmsRpoa;             //短消息中心号码
        private string _gSmsTpoa;             //短消息原叫号码
        private string _gSmsScts;             //短消息发送时间  （时间格式为年/月/日/时/分/秒各两位，不足两位前补0。如2014年4月22日15点46分47秒的消息内容为“140422154647”；）
        private string _gSmsData;             //短消息内容 （编码格式为Unicode编码）
        private string _autoSendtiny;         //是否自动发送
        private string _autoFilterSMStiny;    //是否自动过滤短信
        private string _delayTime;            //发送延时时间
        private string _smsCodingtiny;        //短信的编码格式  0: Unicode  1: GSM 7 Bit

        private bool _cycleSender;            //轮循发送信息
        private string _cycleDelayTime;       //轮循时间周期

        public object SMSRWLock;

        public List<GSMSMSParameterClass> GSMSMSParameterList = null;

        public GSMSMSParameterClass()
        {
            if (GSMSMSParameterList == null)
            {
                GSMSMSParameterList = new List<GSMSMSParameterClass>();
            }

            if (SMSRWLock == null)
            {
                SMSRWLock = new object();
            }
        }

        public string GSmsRpoa
        {
            get
            {
                return _gSmsRpoa;
            }

            set
            {
                _gSmsRpoa = value;
                NotifyPropertyChanged("GSmsRpoa");
            }
        }

        public string GSmsTpoa
        {
            get
            {
                return _gSmsTpoa;
            }

            set
            {
                _gSmsTpoa = value;
                NotifyPropertyChanged("GSmsTpoa");
            }
        }

        public string GSmsScts
        {
            get
            {
                return _gSmsScts;
            }

            set
            {
                _gSmsScts = value;
                NotifyPropertyChanged("GSmsScts");
            }
        }

        public string GSmsData
        {
            get
            {
                return _gSmsData;
            }

            set
            {
                _gSmsData = value;
                NotifyPropertyChanged("GSmsData");
            }
        }

        public string AutoSendtiny
        {
            get
            {
                return _autoSendtiny;
            }

            set
            {
                _autoSendtiny = value;
                NotifyPropertyChanged("AutoSendtiny");
            }
        }

        public string AutoFilterSMStiny
        {
            get
            {
                return _autoFilterSMStiny;
            }

            set
            {
                _autoFilterSMStiny = value;
                NotifyPropertyChanged("AutoFilterSMStiny");
            }
        }

        public string DelayTime
        {
            get
            {
                return _delayTime;
            }

            set
            {
                _delayTime = value;
                NotifyPropertyChanged("DelayTime");
            }
        }

        public string SmsCodingtiny
        {
            get
            {
                return _smsCodingtiny;
            }

            set
            {
                _smsCodingtiny = value;
                NotifyPropertyChanged("SmsCodingtiny");
            }
        }

        public bool CycleSender
        {
            get
            {
                return _cycleSender;
            }

            set
            {
                _cycleSender = value;
                NotifyPropertyChanged("CycleSender");
            }
        }

        public string CycleDelayTime
        {
            get
            {
                return _cycleDelayTime;
            }

            set
            {
                _cycleDelayTime = value;
                NotifyPropertyChanged("CycleDelayTime");
            }
        }
    }

    /// <summary>
    /// GSM高级设置
    /// </summary>
    public class GSMDeviceAdvanceSettingClass : GSMSMSParameterClass
    {

    }

    /// <summary>
    /// GSM UE信息数据上报
    /// </summary>
    public class GSMUEInformationParameterClass : GSMDeviceAdvanceSettingClass
    {
        private string _ueImsi;                  //手机IMSI号
        private string _ueImei;                  //手机IMEI号 
        private string _ueMsisdn;                //手机号码号段 7位
        private string _uePwr;                   //设备接收的手机功率
        private string _uERegtype;               //0表示位置更新接受，6表示位置更新拒绝
        private string _uEQueryResult;           //查询结果，同查询响应SEND_QUERY_RSP中的flagType
        private string _uETmsi;                  //TMSI号
        private string _uELlac;                  //采集设备自己的LAC号
        private string _uESlac;                  //从外网转移过来时，它原来的LAC号

        private DataTable UEInfoDataTab = null;

        public GSMUEInformationParameterClass()
        {
            if (UEInfoDataTab == null)
            {
                UEInfoDataTab = new DataTable("UEInfoReport");
                InitDataTab();
            }
        }

        //初始化表
        private void InitDataTab()
        {
            DataColumn DataColumn0 = new DataColumn();
            DataColumn0.DataType = System.Type.GetType("System.String");
            DataColumn0.ColumnName = "UeImsi";

            DataColumn DataColumn1 = new DataColumn();
            DataColumn1.DataType = System.Type.GetType("System.String");
            DataColumn1.ColumnName = "UeImei";

            DataColumn DataColumn2 = new DataColumn();
            DataColumn2.DataType = System.Type.GetType("System.String");
            DataColumn2.ColumnName = "UeMsisdn";

            DataColumn DataColumn3 = new DataColumn();
            DataColumn3.DataType = System.Type.GetType("System.String");
            DataColumn3.ColumnName = "UePwr";

            DataColumn DataColumn4 = new DataColumn();
            DataColumn4.DataType = System.Type.GetType("System.String");
            DataColumn4.ColumnName = "UeRegtype";

            DataColumn DataColumn5 = new DataColumn();
            DataColumn5.DataType = System.Type.GetType("System.String");
            DataColumn5.ColumnName = "UeQueryResult";

            DataColumn DataColumn6 = new DataColumn();
            DataColumn6.DataType = System.Type.GetType("System.String");
            DataColumn6.ColumnName = "UeTmsi";

            DataColumn DataColumn7 = new DataColumn();
            DataColumn7.DataType = System.Type.GetType("System.String");
            DataColumn7.ColumnName = "UeLlac";

            DataColumn DataColumn8 = new DataColumn();
            DataColumn8.DataType = System.Type.GetType("System.String");
            DataColumn8.ColumnName = "UeSlac";

            DataColumn DataColumn9 = new DataColumn();
            DataColumn9.DataType = System.Type.GetType("System.String");
            DataColumn9.ColumnName = "DTime";

            DataColumn DataColumn10 = new DataColumn();
            DataColumn10.DataType = System.Type.GetType("System.String");
            DataColumn10.ColumnName = "DeviceName";

            DataColumn DataColumn11 = new DataColumn();
            DataColumn11.DataType = System.Type.GetType("System.String");
            DataColumn11.ColumnName = "UserType";

            DataColumn DataColumn12 = new DataColumn();
            DataColumn12.DataType = System.Type.GetType("System.String");
            DataColumn12.ColumnName = "Des";

            UEInfoDataTab.Columns.Add(DataColumn0);
            UEInfoDataTab.Columns.Add(DataColumn1);
            UEInfoDataTab.Columns.Add(DataColumn2);
            UEInfoDataTab.Columns.Add(DataColumn3);
            UEInfoDataTab.Columns.Add(DataColumn4);
            UEInfoDataTab.Columns.Add(DataColumn5);
            UEInfoDataTab.Columns.Add(DataColumn6);
            UEInfoDataTab.Columns.Add(DataColumn7);
            UEInfoDataTab.Columns.Add(DataColumn8);
            UEInfoDataTab.Columns.Add(DataColumn9);
            UEInfoDataTab.Columns.Add(DataColumn10);
            UEInfoDataTab.Columns.Add(DataColumn11);
            UEInfoDataTab.Columns.Add(DataColumn12);
        }

        public string UeImsi
        {
            get
            {
                return _ueImsi;
            }

            set
            {
                _ueImsi = value;
                NotifyPropertyChanged("UeImsi");
            }
        }

        public string UeImei
        {
            get
            {
                return _ueImei;
            }

            set
            {
                _ueImei = value;
                NotifyPropertyChanged("UeImei");
            }
        }

        public string UeMsisdn
        {
            get
            {
                return _ueMsisdn;
            }

            set
            {
                _ueMsisdn = value;
                NotifyPropertyChanged("UeMsisdn");
            }
        }

        public string UePwr
        {
            get
            {
                return _uePwr;
            }

            set
            {
                _uePwr = value;
                NotifyPropertyChanged("UePwr");
            }
        }

        public string UERegtype
        {
            get
            {
                return _uERegtype;
            }

            set
            {
                _uERegtype = value;
                NotifyPropertyChanged("UERegtype");
            }
        }

        public string UEQueryResult
        {
            get
            {
                return _uEQueryResult;
            }

            set
            {
                _uEQueryResult = value;
                NotifyPropertyChanged("UEQueryResult");
            }
        }

        public string UETmsi
        {
            get
            {
                return _uETmsi;
            }

            set
            {
                _uETmsi = value;
                NotifyPropertyChanged("UETmsi");
            }
        }

        public string UELlac
        {
            get
            {
                return _uELlac;
            }

            set
            {
                _uELlac = value;
                NotifyPropertyChanged("UELlac");
            }
        }

        public string UESlac
        {
            get
            {
                return _uESlac;
            }

            set
            {
                _uESlac = value;
                NotifyPropertyChanged("UESlac");
            }
        }

        //数据输入
        public void UEInfoInput(
                                                string ueImsi,
                                                string ueImei,
                                                string ueMsisdn,
                                                string uePwr,
                                                string uERegtype,
                                                string uEQueryResult,
                                                string uETmsi,
                                                string uELlac,
                                                string uESlac,
                                                string dTime,
                                                string deviceName,
                                                string userType,
                                                string des
                                                )
        {
            lock (JsonInterFace.ScannerData.Mutex_DbHelper)
            {
                DataRow dr = UEInfoDataTab.NewRow();
                dr[0] = ueImsi;
                dr[1] = ueImei;
                dr[2] = ueMsisdn;
                dr[3] = uePwr;
                dr[4] = uERegtype;
                dr[5] = uEQueryResult;
                dr[6] = uETmsi;
                dr[7] = uELlac;
                dr[8] = uESlac;
                dr[9] = dTime;
                dr[10] = deviceName;
                dr[11] = userType;
                dr[12] = des;
                UEInfoDataTab.Rows.Add(dr);
            }
        }

        //放入显示表
        public void GSMDataInScannerTab()
        {
            while (true)
            {
                if (UEInfoDataTab.Rows.Count > 0)
                {
                    try
                    {
                        lock (JsonInterFace.ScannerData.Mutex_DbHelper)
                        {
                            for (int i = 0; i < UEInfoDataTab.Rows.Count; i++)
                            {
                                string ID = string.Empty;


                                if (JsonInterFace.ScannerData.ScannerDataTable.Rows.Count > 0)
                                {
                                    if (JsonInterFace.ScannerData.ScannerDataTable.Rows[JsonInterFace.ScannerData.ScannerDataTable.Rows.Count - 1][0].ToString() != ""
                                        && JsonInterFace.ScannerData.ScannerDataTable.Rows[JsonInterFace.ScannerData.ScannerDataTable.Rows.Count - 1][0].ToString() != null)
                                    {
                                        ID = (Convert.ToUInt32(JsonInterFace.ScannerData.ScannerDataTable.Rows[JsonInterFace.ScannerData.ScannerDataTable.Rows.Count - 1][0].ToString()) + 1).ToString();
                                    }
                                }
                                else
                                {
                                    ID = "";
                                }

                                //获取运营商，归属地
                                JsonInterFace.PhoneAreaConvertion.Get(UEInfoDataTab.Rows[i][0].ToString());

                                JsonInterFace.ScannerData.Input(
                                                                    ID,
                                                                    UEInfoDataTab.Rows[i][0].ToString(),
                                                                    UEInfoDataTab.Rows[i][9].ToString(),
                                                                    UEInfoDataTab.Rows[i][11].ToString(),         //UserType
                                                                    UEInfoDataTab.Rows[i][6].ToString(),
                                                                    UEInfoDataTab.Rows[i][1].ToString(),
                                                                    UEInfoDataTab.Rows[i][3].ToString(),
                                                                    JsonInterFace.PhoneAreaConvertion.Country + JsonInterFace.PhoneAreaConvertion.Operators, //运营商
                                                                    JsonInterFace.PhoneAreaConvertion.Country + JsonInterFace.PhoneAreaConvertion.Location,  //号码归属地
                                                                    UEInfoDataTab.Rows[i][10].ToString(),
                                                                    UEInfoDataTab.Rows[i][12].ToString()
                                                                );

                            }
                            UEInfoDataTab.Rows.Clear();
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message + ex.StackTrace);
                        Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
                    }
                }
                else
                {
                    Thread.Sleep(600);
                }
            }
        }
    }

    /// <summary>
    /// 添加登录库
    /// </summary>
    public class GSMLibyraryRegAddClass : GSMUEInformationParameterClass
    {
        private string _iMSI;
        private string _iMEI;
        private string _gLibrary_reg;
        private object ActionLock = new object();
        private int _iMSITotal;
        private int _stepValue;
        private Visibility _barStatus = Visibility.Collapsed;
        private bool _add = true;
        private bool _input = true;
        public string ConfigType = string.Empty;
        public byte Flag = 0;
        public List<string> IMSIList = null;
        public CompleteInfoClass CompleteInfo = null;

        public GSMLibyraryRegAddClass()
        {
            if (IMSIList == null)
            {
                IMSIList = new List<string>();
            }

            if (CompleteInfo == null)
            {
                CompleteInfo = new CompleteInfoClass();
            }
        }

        public class CompleteInfoClass : INotifyPropertyChanged
        {
            private double _inputComplete;

            public double InputComplete
            {
                get
                {
                    return _inputComplete;
                }

                set
                {
                    _inputComplete = value;
                    NotifyPropertyChanged("InputComplete");
                }
            }

            public event PropertyChangedEventHandler PropertyChanged;

            private void NotifyPropertyChanged(string value)
            {
                if (PropertyChanged != null)
                {
                    PropertyChanged(this, new PropertyChangedEventArgs(value));
                }
            }
        }

        public string GLibrary_reg
        {
            get
            {
                return _gLibrary_reg;
            }

            set
            {
                _gLibrary_reg = value;
                NotifyPropertyChanged("GLibrary_reg");
            }
        }
        public string IMSI
        {
            get
            {
                return _iMSI;
            }

            set
            {
                _iMSI = value;
                NotifyPropertyChanged("IMSI");
            }
        }
        public string IMEI
        {
            get
            {
                return _iMEI;
            }

            set
            {
                _iMEI = value;
                NotifyPropertyChanged("IMEI");
            }
        }

        public int IMSITotal
        {
            get
            {
                return _iMSITotal;
            }

            set
            {
                _iMSITotal = value;
                NotifyPropertyChanged("IMSITotal");
            }
        }

        public int StepValue
        {
            get
            {
                return _stepValue;
            }

            set
            {
                _stepValue = value;
                NotifyPropertyChanged("StepValue");
            }
        }

        public Visibility BarStatus
        {
            get
            {
                return _barStatus;
            }

            set
            {
                _barStatus = value;
                NotifyPropertyChanged("BarStatus");
            }
        }

        public bool Add
        {
            get
            {
                return _add;
            }

            set
            {
                _add = value;
                NotifyPropertyChanged("Add");
            }
        }

        public bool Input
        {
            get
            {
                return _input;
            }

            set
            {
                _input = value;
                NotifyPropertyChanged("Input");
            }
        }
    }

    /// <summary>
    /// 查询登录库类
    /// </summary>
    public class GSMLibyraryRegQueryClass : GSMLibyraryRegAddClass
    {
        private DataTable _libraryRegIMSITab = null;
        private DataTable _libraryRegIMEITab = null;

        public DataTable LibraryRegIMSITab
        {
            get
            {
                return _libraryRegIMSITab;
            }

            set
            {
                _libraryRegIMSITab = value;
            }
        }

        public DataTable LibraryRegIMEITab
        {
            get
            {
                return _libraryRegIMEITab;
            }

            set
            {
                _libraryRegIMEITab = value;
            }
        }

        public GSMLibyraryRegQueryClass()
        {
            if (LibraryRegIMSITab == null)
            {
                InitDataTab();
            }
        }

        private void InitDataTab()
        {
            LibraryRegIMSITab = new DataTable("IMSILibraryReg");
            DataColumn IMSIDataColumn0 = new DataColumn();
            IMSIDataColumn0.DataType = System.Type.GetType("System.String");
            IMSIDataColumn0.ColumnName = "IMSI";

            LibraryRegIMSITab.Columns.Add(IMSIDataColumn0);

            LibraryRegIMEITab = new DataTable("IMEILibraryReg");
            DataColumn IMEIDataColumn0 = new DataColumn();
            IMEIDataColumn0.DataType = System.Type.GetType("System.String");
            IMEIDataColumn0.ColumnName = "IMEI";

            LibraryRegIMEITab.Columns.Add(IMEIDataColumn0);
        }

        public void InputIMSI(string imsi)
        {
            DataRow dr = LibraryRegIMSITab.NewRow();
            dr[0] = imsi;
            LibraryRegIMSITab.Rows.Add(dr);
        }

        public void InputIMEI(string imei)
        {
            DataRow dr = LibraryRegIMEITab.NewRow();
            dr[0] = imei;
            LibraryRegIMEITab.Rows.Add(dr);
        }
    }

    /// <summary>
    /// 注册模式
    /// </summary>
    public class GSMRegModeParameterClass : GSMLibyraryRegQueryClass
    {
        private string _regMode;

        public string RegMode
        {
            get
            {
                return _regMode;
            }

            set
            {
                _regMode = value;
                NotifyPropertyChanged("RegMode");
            }
        }
    }

    /// <summary>
    /// GSM 通话，短信息记录
    /// </summary>
    public class GSMDeviceSMSPhoneNumberRecordClass : GSMRegModeParameterClass
    {
        private string _phoneNumber;
        private string _codeType;
        private string _sMSData;

        private DataTable _phoneRecordTab = null;
        private DataTable _sMSRecordTab = null;

        private object _phoneRecordeLock = null;
        private object _sMSRecordLock = null;

        public string PhoneNumber
        {
            get
            {
                return _phoneNumber;
            }

            set
            {
                _phoneNumber = value;
                NotifyPropertyChanged("PhoneNumber");
            }
        }

        public string CodeType
        {
            get
            {
                return _codeType;
            }

            set
            {
                _codeType = value;
                NotifyPropertyChanged("CodeType");
            }
        }

        public string SMSData
        {
            get
            {
                return _sMSData;
            }

            set
            {
                _sMSData = value;
                NotifyPropertyChanged("SMSData");
            }
        }

        public DataTable PhoneRecordTab
        {
            get
            {
                return _phoneRecordTab;
            }

            set
            {
                _phoneRecordTab = value;
            }
        }

        public DataTable SMSRecordTab
        {
            get
            {
                return _sMSRecordTab;
            }

            set
            {
                _sMSRecordTab = value;
            }
        }

        public object PhoneRecordeLock
        {
            get
            {
                return _phoneRecordeLock;
            }

            set
            {
                _phoneRecordeLock = value;
            }
        }

        public object SMSRecordLock
        {
            get
            {
                return _sMSRecordLock;
            }

            set
            {
                _sMSRecordLock = value;
            }
        }

        public GSMDeviceSMSPhoneNumberRecordClass()
        {
            if (PhoneRecordTab == null)
            {
                PhoneRecordTab = new DataTable("PhoneRecord");

                DataColumn DataColumn0 = new DataColumn();
                DataColumn0.DataType = System.Type.GetType("System.String");
                DataColumn0.ColumnName = "IMSI";

                DataColumn DataColumn1 = new DataColumn();
                DataColumn1.DataType = System.Type.GetType("System.String");
                DataColumn1.ColumnName = "PhoneNumber";

                PhoneRecordTab.Columns.Add(DataColumn0);
                PhoneRecordTab.Columns.Add(DataColumn1);
            }

            if (SMSRecordTab == null)
            {
                SMSRecordTab = new DataTable("sMSRecord");

                DataColumn DataColumn0 = new DataColumn();
                DataColumn0.DataType = System.Type.GetType("System.String");
                DataColumn0.ColumnName = "IMSI";

                DataColumn DataColumn1 = new DataColumn();
                DataColumn1.DataType = System.Type.GetType("System.String");
                DataColumn1.ColumnName = "PhoneNumber";

                DataColumn DataColumn2 = new DataColumn();
                DataColumn2.DataType = System.Type.GetType("System.String");
                DataColumn2.ColumnName = "CodeType";

                DataColumn DataColumn3 = new DataColumn();
                DataColumn3.DataType = System.Type.GetType("System.String");
                DataColumn3.ColumnName = "SMSData";

                SMSRecordTab.Columns.Add(DataColumn0);
                SMSRecordTab.Columns.Add(DataColumn1);
                SMSRecordTab.Columns.Add(DataColumn2);
                SMSRecordTab.Columns.Add(DataColumn3);
            }

            if (PhoneRecordeLock == null)
            {
                PhoneRecordeLock = new object();
            }
            if (SMSRecordLock == null)
            {
                SMSRecordLock = new object();
            }
        }

        public void PhoneRecordInput(string IMSI, string PhoneNumber)
        {
            DataRow dr = PhoneRecordTab.NewRow();
            dr["IMSI"] = IMSI;
            dr["PhoneNumber"] = PhoneNumber;
            PhoneRecordTab.Rows.Add(dr);
        }

        public void SMSRecordInput(string IMSI, string PhoneNumber, string CodeType, string SMSData)
        {
            DataRow dr = SMSRecordTab.NewRow();
            dr["IMSI"] = IMSI;
            dr["PhoneNumber"] = PhoneNumber;
            dr["CodeType"] = CodeType;
            dr["SMSData"] = SMSData;
            SMSRecordTab.Rows.Add(dr);
        }
    }

    /// <summary>
    /// 工程设置
    /// </summary>
    public class GSMDeviceObjectSetting : GSMDeviceSMSPhoneNumberRecordClass
    {

    }

    /// <summary>
    /// 设备细信息
    /// </summary>
    public class GSMDeviceDetaiInfoClass : GSMDeviceObjectSetting
    {
        private List<GSMDeviceDetaiInfoClass> _gSMDeviceCarrierOneInfoList = null;
        private List<GSMDeviceDetaiInfoClass> _gSMDeviceCarrierTwoInfoList = null;

        public List<GSMDeviceDetaiInfoClass> GSMDeviceCarrierOneInfoList
        {
            get
            {
                return _gSMDeviceCarrierOneInfoList;
            }

            set
            {
                _gSMDeviceCarrierOneInfoList = value;
                NotifyPropertyChanged("GSMDeviceCarrierOneInfoList");
            }
        }

        public List<GSMDeviceDetaiInfoClass> GSMDeviceCarrierTwoInfoList
        {
            get
            {
                return _gSMDeviceCarrierTwoInfoList;
            }

            set
            {
                _gSMDeviceCarrierTwoInfoList = value;
                NotifyPropertyChanged("GSMDeviceCarrierTwoInfoList");
            }
        }

        //构造
        public GSMDeviceDetaiInfoClass()
        {
            if (GSMDeviceCarrierOneInfoList == null)
            {
                GSMDeviceCarrierOneInfoList = new List<GSMDeviceDetaiInfoClass>();
            }
            if (GSMDeviceCarrierTwoInfoList == null)
            {
                GSMDeviceCarrierTwoInfoList = new List<GSMDeviceDetaiInfoClass>();
            }
        }
    }
    #endregion

    #region CDMA相关类

    /// <summary>
    /// 设备细信息
    /// </summary>
    public class CDMADeviceParameterClass : GSMDeviceDetaiInfoClass
    {
        private string _hardWareID;
        private DataTable _sMSIMSITab;
        private object _sMSIMSITabLock = null;

        public CDMADeviceParameterClass()
        {
            if (SMSIMSITab == null)
            {
                SMSIMSITab = new DataTable("IMSIList");
                SMSIMSITab.Columns.Add(new DataColumn("IMSI", System.Type.GetType("System.String")));
                SMSIMSITab.Columns.Add(new DataColumn("Used", System.Type.GetType("System.Boolean")));
            }

            if (SMSIMSITabLock == null)
            {
                SMSIMSITabLock = new object();
            }
        }

        public string HardWareID
        {
            get
            {
                return _hardWareID;
            }

            set
            {
                _hardWareID = value;
                NotifyPropertyChanged("HardWareID");
            }
        }

        public DataTable SMSIMSITab
        {
            get
            {
                return _sMSIMSITab;
            }

            set
            {
                _sMSIMSITab = value;
            }
        }

        public object SMSIMSITabLock
        {
            get
            {
                return _sMSIMSITabLock;
            }

            set
            {
                _sMSIMSITabLock = value;
            }
        }

        public void IMSIReportInput(string IMSI)
        {
            if (IMSI == null || IMSI == "") { return; }
            int Count = 0;
            lock (SMSIMSITabLock)
            {
                Count = SMSIMSITab.Rows.Count;
                DataRow dr = SMSIMSITab.NewRow();

                dr.BeginEdit();
                dr["IMSI"] = IMSI;
                dr["Used"] = false;
                if (Count < Parameters.SMSIMSITotal)
                {
                    SMSIMSITab.Rows.Add(dr);
                }
                else
                {
                    SMSIMSITab.Rows.RemoveAt(0);
                    SMSIMSITab.Rows.Add(dr);
                }
                dr.EndEdit();
            }
        }
    }
    // CDMA UE信息数据上报
    public class CDMAUEInformationParameterClass : CDMADeviceParameterClass
    {
        private string _imsi;                    //上报imsi，如果没有为空
        private string _imei;                    //上报imsi，如果没有为空      
        private string _tmsi;                    //上报imsi，如果没有为空       
        private string _rsrp;                    //上报imsi，如果没有为空
        private string _sn;                      //上报ap的Sn
        private string _userType;                //用户类型，该版本一直为空

        private DataTable UEInfoDataTab = null;

        public string Imsi
        {
            get
            {
                return _imsi;
            }

            set
            {
                _imsi = value;
            }
        }

        public string Imei
        {
            get
            {
                return _imei;
            }

            set
            {
                _imei = value;
            }
        }

        public string Tmsi
        {
            get
            {
                return _tmsi;
            }

            set
            {
                _tmsi = value;
            }
        }

        public string Rsrp
        {
            get
            {
                return _rsrp;
            }

            set
            {
                _rsrp = value;
            }
        }

        public string Sn
        {
            get
            {
                return _sn;
            }

            set
            {
                _sn = value;
            }
        }

        public string UserType
        {
            get
            {
                return _userType;
            }

            set
            {
                _userType = value;
            }
        }

        public CDMAUEInformationParameterClass()
        {
            if (UEInfoDataTab == null)
            {
                UEInfoDataTab = new DataTable("UEInfoReport");
                InitDataTab();
            }
        }

        //初始化表
        private void InitDataTab()
        {
            DataColumn DataColumn0 = new DataColumn();
            DataColumn0.DataType = System.Type.GetType("System.String");
            DataColumn0.ColumnName = "imsi";

            DataColumn DataColumn1 = new DataColumn();
            DataColumn1.DataType = System.Type.GetType("System.String");
            DataColumn1.ColumnName = "imei";

            DataColumn DataColumn2 = new DataColumn();
            DataColumn2.DataType = System.Type.GetType("System.String");
            DataColumn2.ColumnName = "tmsi";

            DataColumn DataColumn3 = new DataColumn();
            DataColumn3.DataType = System.Type.GetType("System.String");
            DataColumn3.ColumnName = "rsrp";

            DataColumn DataColumn4 = new DataColumn();
            DataColumn4.DataType = System.Type.GetType("System.String");
            DataColumn4.ColumnName = "sn";

            DataColumn DataColumn5 = new DataColumn();
            DataColumn5.DataType = System.Type.GetType("System.String");
            DataColumn5.ColumnName = "userType";

            DataColumn DataColumn6 = new DataColumn();
            DataColumn6.DataType = System.Type.GetType("System.String");
            DataColumn6.ColumnName = "DTime";

            DataColumn DataColumn7 = new DataColumn();
            DataColumn7.DataType = System.Type.GetType("System.String");
            DataColumn7.ColumnName = "DeviceName";

            DataColumn DataColumn8 = new DataColumn();
            DataColumn8.DataType = System.Type.GetType("System.String");
            DataColumn8.ColumnName = "Des";

            UEInfoDataTab.Columns.Add(DataColumn0);
            UEInfoDataTab.Columns.Add(DataColumn1);
            UEInfoDataTab.Columns.Add(DataColumn2);
            UEInfoDataTab.Columns.Add(DataColumn3);
            UEInfoDataTab.Columns.Add(DataColumn4);
            UEInfoDataTab.Columns.Add(DataColumn5);
            UEInfoDataTab.Columns.Add(DataColumn6);
            UEInfoDataTab.Columns.Add(DataColumn7);
            UEInfoDataTab.Columns.Add(DataColumn8);
        }

        //数据输入
        public void CDMAUEInfoInput(
                                string IMSI,
                                string IMEI,
                                string TMSI,
                                string RSRP,
                                string SN,
                                string userType,
                                string DTime,
                                string DeviceName,
                                string Des
                                )
        {
            lock (JsonInterFace.ScannerData.Mutex_DbHelper)
            {
                DataRow dr = UEInfoDataTab.NewRow();
                dr[0] = IMSI;
                dr[1] = IMEI;
                dr[2] = TMSI;
                dr[3] = RSRP;
                dr[4] = SN;
                dr[5] = userType;
                dr[6] = DTime;
                dr[7] = DeviceName;
                dr[8] = Des;
                UEInfoDataTab.Rows.Add(dr);
            }
        }

        //放入显示表
        public void CDMADataInScannerTab()
        {
            while (true)
            {
                if (UEInfoDataTab.Rows.Count > 0)
                {
                    try
                    {
                        lock (JsonInterFace.ScannerData.Mutex_DbHelper)
                        {
                            for (int i = 0; i < UEInfoDataTab.Rows.Count; i++)
                            {
                                string ID = string.Empty;
                                string UserType = string.Empty;

                                if (JsonInterFace.ScannerData.ScannerDataTable.Rows.Count > 0)
                                {
                                    if (JsonInterFace.ScannerData.ScannerDataTable.Rows[JsonInterFace.ScannerData.ScannerDataTable.Rows.Count - 1][0].ToString() != ""
                                        && JsonInterFace.ScannerData.ScannerDataTable.Rows[JsonInterFace.ScannerData.ScannerDataTable.Rows.Count - 1][0].ToString() != null)
                                    {
                                        ID = (Convert.ToUInt32(JsonInterFace.ScannerData.ScannerDataTable.Rows[JsonInterFace.ScannerData.ScannerDataTable.Rows.Count - 1][0].ToString()) + 1).ToString();
                                    }
                                }
                                else
                                {
                                    ID = "";
                                }

                                //获取运营商，归属地
                                JsonInterFace.PhoneAreaConvertion.Get(UEInfoDataTab.Rows[i]["imsi"].ToString());

                                JsonInterFace.ScannerData.Input(
                                                                    ID,                                           //ID
                                                                    UEInfoDataTab.Rows[i][0].ToString(),          //IMSI
                                                                    UEInfoDataTab.Rows[i][6].ToString(),          //DTime
                                                                    UEInfoDataTab.Rows[i][5].ToString(),          //UserType
                                                                    UEInfoDataTab.Rows[i][2].ToString(),          //TMSI
                                                                    UEInfoDataTab.Rows[i][1].ToString(),          //IMEI
                                                                    UEInfoDataTab.Rows[i][3].ToString(),          //IntenSity
                                                                    JsonInterFace.PhoneAreaConvertion.Country + JsonInterFace.PhoneAreaConvertion.Operators, //Operators
                                                                    JsonInterFace.PhoneAreaConvertion.Country + JsonInterFace.PhoneAreaConvertion.Location,  //号码归属地
                                                                    UEInfoDataTab.Rows[i][7].ToString(),          //DeviceName
                                                                    UEInfoDataTab.Rows[i][8].ToString()           //别名，备注
                                                                );

                            }
                            UEInfoDataTab.Rows.Clear();
                        }
                    }
                    catch (Exception ex)
                    {
                        Parameters.PrintfLogsExtended("CDMA上报显示", ex.Message, ex.StackTrace);
                    }
                }
                else
                {
                    Thread.Sleep(400);
                }
            }
        }
    }
    //邻小区信息
    public class CDMACellNeighParameterClass : CDMAUEInformationParameterClass
    {
        private string _bWorkingMode;
        private string _bCYes;
        private string _bCNo;
        private string _wRedirectCellUarfcn;
        private string _dwDateTime;
        private string _bPLMNId;
        private string _bTxPower;
        private string _bRxGain;
        private string _wPhyCellId;
        private string _wLAC;
        private string _wUARFCN;
        private string _dwCellId;
        private string _sID;
        private string _nID;

        public class NeithCellInfo : INotifyPropertyChanged
        {
            private string _iD = string.Empty;
            private string _bGCId = string.Empty;
            private string _bSID = string.Empty;
            private string _bNID = string.Empty;
            private string _bPLMNId = string.Empty;
            private string _cRSRP = string.Empty;
            private string _wTac = string.Empty;
            private string _wPhyCellId = string.Empty;
            private string _wUARFCN = string.Empty;
            private string _cRefTxPower = string.Empty;
            private string _bNbCellNum = string.Empty;
            private string _bC2 = string.Empty;
            private string _bReserved1 = string.Empty;
            private string _rkey = string.Empty;

            public event PropertyChangedEventHandler PropertyChanged;

            public void NotifyPropertyChanged(string value)
            {
                if (PropertyChanged != null)
                {
                    PropertyChanged(this, new PropertyChangedEventArgs(value));
                }
            }

            public string ID
            {
                get
                {
                    return _iD;
                }

                set
                {
                    _iD = value;
                    NotifyPropertyChanged("ID");
                }
            }

            public string BGCId
            {
                get
                {
                    return _bGCId;
                }

                set
                {
                    _bGCId = value;
                    NotifyPropertyChanged("BGCId");
                }
            }

            public string BPLMNId
            {
                get
                {
                    return _bPLMNId;
                }

                set
                {
                    _bPLMNId = value;
                    NotifyPropertyChanged("BPLMNId");
                }
            }

            public string CRSRP
            {
                get
                {
                    return _cRSRP;
                }

                set
                {
                    _cRSRP = value;
                    NotifyPropertyChanged("CRSRP");
                }
            }

            public string WTac
            {
                get
                {
                    return _wTac;
                }

                set
                {
                    _wTac = value;
                    NotifyPropertyChanged("WTac");
                }
            }

            public string WPhyCellId
            {
                get
                {
                    return _wPhyCellId;
                }

                set
                {
                    _wPhyCellId = value;
                    NotifyPropertyChanged("WPhyCellId");
                }
            }

            public string WUARFCN
            {
                get
                {
                    return _wUARFCN;
                }

                set
                {
                    _wUARFCN = value;
                    NotifyPropertyChanged("WUARFCN");
                }
            }

            public string CRefTxPower
            {
                get
                {
                    return _cRefTxPower;
                }

                set
                {
                    _cRefTxPower = value;
                    NotifyPropertyChanged("CRefTxPower");
                }
            }

            public string BNbCellNum
            {
                get
                {
                    return _bNbCellNum;
                }

                set
                {
                    _bNbCellNum = value;
                    NotifyPropertyChanged("BNbCellNum");
                }
            }

            public string BC2
            {
                get
                {
                    return _bC2;
                }

                set
                {
                    _bC2 = value;
                    NotifyPropertyChanged("BC2");
                }
            }

            public string BReserved1
            {
                get
                {
                    return _bReserved1;
                }

                set
                {
                    _bReserved1 = value;
                    NotifyPropertyChanged("BReserved1");
                }
            }

            public string BSID
            {
                get
                {
                    return _bSID;
                }

                set
                {
                    _bSID = value;
                    NotifyPropertyChanged("BSID");
                }
            }

            public string BNID
            {
                get
                {
                    return _bNID;
                }

                set
                {
                    _bNID = value;
                    NotifyPropertyChanged("BNID");
                }
            }

            public string Rkey
            {
                get
                {
                    return _rkey;
                }

                set
                {
                    _rkey = value;
                    NotifyPropertyChanged("Rkey");
                }
            }
        }

        public class ItemNeithCellInfo : INotifyPropertyChanged
        {
            private string _iD = string.Empty;
            private string _indexPtr = string.Empty;
            private string _wUarfcn = string.Empty;
            private string _wPhyCellId = string.Empty;
            private string _cRSRP = string.Empty;
            private string _cC1 = string.Empty;
            private string _bC2 = string.Empty;

            public event PropertyChangedEventHandler PropertyChanged;

            public void NotifyPropertyChanged(string value)
            {
                if (PropertyChanged != null)
                {
                    PropertyChanged(this, new PropertyChangedEventArgs(value));
                }
            }

            public string ID
            {
                get
                {
                    return _iD;
                }

                set
                {
                    _iD = value;
                    NotifyPropertyChanged("ID");
                }
            }

            public string IndexPtr
            {
                get
                {
                    return _indexPtr;
                }

                set
                {
                    _indexPtr = value;
                    NotifyPropertyChanged("IndexPtr");
                }
            }

            public string WUarfcn
            {
                get
                {
                    return _wUarfcn;
                }

                set
                {
                    _wUarfcn = value;
                    NotifyPropertyChanged("WUarfcn");
                }
            }

            public string WPhyCellId
            {
                get
                {
                    return _wPhyCellId;
                }

                set
                {
                    _wPhyCellId = value;
                    NotifyPropertyChanged("WPhyCellId");
                }
            }

            public string CRSRP
            {
                get
                {
                    return _cRSRP;
                }

                set
                {
                    _cRSRP = value;
                    NotifyPropertyChanged("CRSRP");
                }
            }

            public string CC1
            {
                get
                {
                    return _cC1;
                }

                set
                {
                    _cC1 = value;
                    NotifyPropertyChanged("CC1");
                }
            }

            public string BC2
            {
                get
                {
                    return _bC2;
                }

                set
                {
                    _bC2 = value;
                    NotifyPropertyChanged("BC2");
                }
            }
        }

        public string BWorkingMode
        {
            get
            {
                return _bWorkingMode;
            }

            set
            {
                _bWorkingMode = value;
                NotifyPropertyChanged("BWorkingMode");
            }
        }

        public string WRedirectCellUarfcn
        {
            get
            {
                return _wRedirectCellUarfcn;
            }

            set
            {
                _wRedirectCellUarfcn = value;
                NotifyPropertyChanged("WRedirectCellUarfcn");
            }
        }

        public string DwDateTime
        {
            get
            {
                return _dwDateTime;
            }

            set
            {
                _dwDateTime = value;
                NotifyPropertyChanged("DwDateTime");
            }
        }

        public string BPLMNId
        {
            get
            {
                return _bPLMNId;
            }

            set
            {
                _bPLMNId = value;
                NotifyPropertyChanged("BPLMNId");
            }
        }

        public string BTxPower
        {
            get
            {
                return _bTxPower;
            }

            set
            {
                _bTxPower = value;
                NotifyPropertyChanged("BTxPower");
            }
        }

        public string BRxGain
        {
            get
            {
                return _bRxGain;
            }

            set
            {
                _bRxGain = value;
                NotifyPropertyChanged("BRxGain");
            }
        }

        public string WPhyCellId
        {
            get
            {
                return _wPhyCellId;
            }

            set
            {
                _wPhyCellId = value;
                NotifyPropertyChanged("WPhyCellId");
            }
        }

        public string WLAC
        {
            get
            {
                return _wLAC;
            }

            set
            {
                _wLAC = value;
                NotifyPropertyChanged("WLAC");
            }
        }

        public string WUARFCN
        {
            get
            {
                return _wUARFCN;
            }

            set
            {
                _wUARFCN = value;
                NotifyPropertyChanged("WUARFCN");
            }
        }

        public string DwCellId
        {
            get
            {
                return _dwCellId;
            }

            set
            {
                _dwCellId = value;
                //CellID 分为SID与NID
                SID = (Convert.ToUInt32(_dwCellId) / 65536).ToString();
                NID = (Convert.ToUInt32(_dwCellId) % 65536).ToString();
                NotifyPropertyChanged("DwCellId");
            }
        }

        public string BCYes
        {
            get
            {
                return _bCYes;
            }

            set
            {
                _bCYes = value;
                NotifyPropertyChanged("BCYes");
            }
        }

        public string BCNo
        {
            get
            {
                return _bCNo;
            }

            set
            {
                _bCNo = value;
                NotifyPropertyChanged("BCNo");
            }
        }

        public string SID
        {
            get
            {
                return _sID;
            }

            set
            {
                _sID = value;
                NotifyPropertyChanged("SID");
            }
        }

        public string NID
        {
            get
            {
                return _nID;
            }

            set
            {
                _nID = value;
                NotifyPropertyChanged("NID");
            }
        }
    }

    //高级设置
    public class CDMADeviceAdvanceSettingClass : CDMACellNeighParameterClass
    {

    }

    //多载波
    public class CDMAMultiCarrierParameterClass : CDMADeviceAdvanceSettingClass
    {
        private string _wARFCN1;            //工作频点1 
        private ModeList _bARFCN1Mode;      //工作频点1模式。0表示扫描，1表示常开,2表示关闭。
        private string _wARFCN1Duration;    //工作频点1扫描时长
        private string _wARFCN1Period;      //工作频点1扫描间隔

        private string _wARFCN2;            //工作频点2
        private ModeList _bARFCN2Mode;      //工作频点2模式。 0表示扫描，1表示常开,2表示关闭。
        private string _wARFCN2Duration;    //工作频点2扫描时长
        private string _wARFCN2Period;      //工作频点2扫描间隔

        private string _wARFCN3;            //工作频点3 
        private ModeList _bARFCN3Mode;      //工作频点3模式。 0表示扫描，1表示常开,2表示关闭。
        private string _wARFCN3Duration;    //工作频点3扫描时长 
        private string _wARFCN3Period;      //工作频点3扫描间隔

        private string _wARFCN4;            //工作频点4 
        private ModeList _bARFCN4Mode;      //工作频点4模式。   0表示扫描，1表示常开,2表示关闭。
        private string _wARFCN4Duration;    //工作频点4扫描时长
        private string _wARFCN4Period;      //工作频点4扫描间隔

        public CDMAMultiCarrierParameterClass()
        {
            if (BARFCN1Mode == null)
            {
                BARFCN1Mode = new ModeList();
            }

            if (BARFCN2Mode == null)
            {
                BARFCN2Mode = new ModeList();
            }

            if (BARFCN3Mode == null)
            {
                BARFCN3Mode = new ModeList();
            }

            if (BARFCN4Mode == null)
            {
                BARFCN4Mode = new ModeList();
            }
        }

        public class ModeList : INotifyPropertyChanged
        {
            private bool _scanner;
            private bool _normallyRun;
            private bool _Closed;

            public event PropertyChangedEventHandler PropertyChanged;

            private void OnPropertyChanged(string value)
            {
                if (PropertyChanged != null)
                {
                    PropertyChanged(this, new PropertyChangedEventArgs(value));
                }
            }

            public bool Scanner
            {
                get
                {
                    return _scanner;
                }

                set
                {
                    _scanner = value;
                    OnPropertyChanged("Scanner");
                }
            }

            public bool NormallyRun
            {
                get
                {
                    return _normallyRun;
                }

                set
                {
                    _normallyRun = value;
                    OnPropertyChanged("NormallyRun");
                }
            }

            public bool Closed
            {
                get
                {
                    return _Closed;
                }

                set
                {
                    _Closed = value;
                    OnPropertyChanged("Closed");
                }
            }
        }

        public string WARFCN1
        {
            get
            {
                return _wARFCN1;
            }

            set
            {
                _wARFCN1 = value;
                NotifyPropertyChanged("WARFCN1");
            }
        }

        public ModeList BARFCN1Mode
        {
            get
            {
                return _bARFCN1Mode;
            }

            set
            {
                _bARFCN1Mode = value;
                NotifyPropertyChanged("BARFCN1Mode");
            }
        }

        public string WARFCN1Duration
        {
            get
            {
                return _wARFCN1Duration;
            }

            set
            {
                _wARFCN1Duration = value;
                NotifyPropertyChanged("WARFCN1Duration");
            }
        }

        public string WARFCN1Period
        {
            get
            {
                return _wARFCN1Period;
            }

            set
            {
                _wARFCN1Period = value;
                NotifyPropertyChanged("WARFCN1Period");
            }
        }

        public string WARFCN2
        {
            get
            {
                return _wARFCN2;
            }

            set
            {
                _wARFCN2 = value;
                NotifyPropertyChanged("WARFCN2");
            }
        }

        public ModeList BARFCN2Mode
        {
            get
            {
                return _bARFCN2Mode;
            }

            set
            {
                _bARFCN2Mode = value;
                NotifyPropertyChanged("BARFCN2Mode");
            }
        }

        public string WARFCN2Duration
        {
            get
            {
                return _wARFCN2Duration;
            }

            set
            {
                _wARFCN2Duration = value;
                NotifyPropertyChanged("WARFCN2Duration");
            }
        }

        public string WARFCN2Period
        {
            get
            {
                return _wARFCN2Period;
            }

            set
            {
                _wARFCN2Period = value;
                NotifyPropertyChanged("WARFCN2Period");
            }
        }

        public string WARFCN3
        {
            get
            {
                return _wARFCN3;
            }

            set
            {
                _wARFCN3 = value;
                NotifyPropertyChanged("WARFCN3");
            }
        }

        public ModeList BARFCN3Mode
        {
            get
            {
                return _bARFCN3Mode;
            }

            set
            {
                _bARFCN3Mode = value;
                NotifyPropertyChanged("BARFCN3Mode");
            }
        }

        public string WARFCN3Duration
        {
            get
            {
                return _wARFCN3Duration;
            }

            set
            {
                _wARFCN3Duration = value;
                NotifyPropertyChanged("WARFCN3Duration");
            }
        }

        public string WARFCN3Period
        {
            get
            {
                return _wARFCN3Period;
            }

            set
            {
                _wARFCN3Period = value;
                NotifyPropertyChanged("WARFCN3Period");
            }
        }

        public string WARFCN4
        {
            get
            {
                return _wARFCN4;
            }

            set
            {
                _wARFCN4 = value;
                NotifyPropertyChanged("WARFCN4");
            }
        }

        public ModeList BARFCN4Mode
        {
            get
            {
                return _bARFCN4Mode;
            }

            set
            {
                _bARFCN4Mode = value;
                NotifyPropertyChanged("BARFCN4Mode");
            }
        }

        public string WARFCN4Duration
        {
            get
            {
                return _wARFCN4Duration;
            }

            set
            {
                _wARFCN4Duration = value;
                NotifyPropertyChanged("WARFCN4Duration");
            }
        }

        public string WARFCN4Period
        {
            get
            {
                return _wARFCN4Period;
            }

            set
            {
                _wARFCN4Period = value;
                NotifyPropertyChanged("WARFCN4Period");
            }
        }
    }

    //系统维护
    public class CDMADeviceSystemMaintenence : CDMAMultiCarrierParameterClass
    {

    }

    //工程设置
    public class CDMADeviceObjectSetting : CDMADeviceSystemMaintenence
    {

    }

    /// <summary>
    /// CDMA IMSI导入类
    /// </summary>
    public class CDMAIMSIControlInfoClass : CDMADeviceObjectSetting
    {
        private string _actionFlag;
        private bool _isSucess = true;

        private DataTable _iMSIListTab = null;

        public CDMAIMSIControlInfoClass()
        {
            if (IMSIListTab == null)
            {
                IMSIListTab = new DataTable("IMSIList");

                DataColumn DataColumn0 = new DataColumn();
                DataColumn0.DataType = System.Type.GetType("System.String");
                DataColumn0.ColumnName = "IMSI";

                DataColumn DataColumn1 = new DataColumn();
                DataColumn1.DataType = System.Type.GetType("System.String");
                DataColumn1.ColumnName = "ActionFlag";

                IMSIListTab.Columns.Add(DataColumn0);
                IMSIListTab.Columns.Add(DataColumn1);
            }
        }

        public string ActionFlag
        {
            get
            {
                return _actionFlag;
            }

            set
            {
                _actionFlag = value;
                NotifyPropertyChanged("ActionFlag");
            }
        }
        public bool IsSucess
        {
            get
            {
                return _isSucess;
            }

            set
            {
                _isSucess = value;
                NotifyPropertyChanged("_isSucess");
            }
        }

        public DataTable IMSIListTab
        {
            get
            {
                return _iMSIListTab;
            }

            set
            {
                _iMSIListTab = value;
            }
        }

        public void Input(string IMSI, string ActionFlag)
        {
            DataRow dr = IMSIListTab.NewRow();
            dr[0] = IMSI;
            dr[1] = ActionFlag;
            IMSIListTab.Rows.Add(dr);
        }
    }
    #endregion

    #region GSMV2
    /// <summary>
    /// GSMV2 IMSI导入类
    /// </summary>
    public class GSMV2IMSIControlInfoClass : CDMAIMSIControlInfoClass
    {
        private string _id;
        private string _bUeActionFlag;
        private string _bIMSI;
        private DataTable _iMSIListTab = null;

        public GSMV2IMSIControlInfoClass()
        {
            if (GSMV2IMSIListTab == null)
            {
                GSMV2IMSIListTab = new DataTable("IMSIList");

                DataColumn DataColumn0 = new DataColumn();
                DataColumn0.DataType = System.Type.GetType("System.String");
                DataColumn0.ColumnName = "ID";

                DataColumn DataColumn1 = new DataColumn();
                DataColumn1.DataType = System.Type.GetType("System.String");
                DataColumn1.ColumnName = "BIMSI";

                DataColumn DataColumn2 = new DataColumn();
                DataColumn2.DataType = System.Type.GetType("System.String");
                DataColumn2.ColumnName = "BActionFlag";

                GSMV2IMSIListTab.Columns.Add(DataColumn0);
                GSMV2IMSIListTab.Columns.Add(DataColumn1);
                GSMV2IMSIListTab.Columns.Add(DataColumn2);
            }
        }

        public string ID
        {
            get
            {
                return _id;
            }

            set
            {
                _id = value;
                NotifyPropertyChanged("ID");
            }
        }

        public DataTable GSMV2IMSIListTab
        {
            get
            {
                return _iMSIListTab;
            }

            set
            {
                _iMSIListTab = value;
            }
        }

        public string BUeActionFlag
        {
            get
            {
                return _bUeActionFlag;
            }

            set
            {
                _bUeActionFlag = value;
            }
        }

        public string BIMSI
        {
            get
            {
                return _bIMSI;
            }

            set
            {
                _bIMSI = value;
            }
        }

        public void Input(string ID, string IMSI, string ActionFlag)
        {
            DataRow dr = GSMV2IMSIListTab.NewRow();
            dr[0] = ID;
            dr[1] = IMSI;
            dr[2] = ActionFlag;
            GSMV2IMSIListTab.Rows.Add(dr);
        }

    }
    /// <summary>
    /// 载波
    /// </summary>
    public class GSMV2CarrierParameterClass : GSMV2IMSIControlInfoClass
    {

    }
    /// <summary>
    /// 设备细信息
    /// </summary>
    public class GSMV2DeviceParameterClass : GSMV2CarrierParameterClass
    {

    }
    //小区信息
    public class GSMV2CellNeighParameterClass : GSMV2DeviceParameterClass
    {

    }
    /// <summary>
    /// GSMV2高级设置
    /// </summary>
    public class GSMV2DeviceAdvanceSettingClass : GSMV2CellNeighParameterClass
    {

    }
    /// <summary>
    /// GSMV2捕号上报
    /// </summary>
    public class GSMV2UEInformationParameterClass : GSMV2DeviceAdvanceSettingClass
    {

    }

    /// <summary>
    /// FAP上报UE主叫信息
    /// </summary>
    public class GSMV2UEReportInfoClass : GSMV2UEInformationParameterClass
    {
        private string id;
        private string bOrmType;                        //主叫类型。1=呼叫号码, 2=短消息PDU,3=寻呼测量
        private string bUeId;                          //IMSI
        private string cRSRP;                         //接收信号强度。寻呼测量时，-128表示寻呼失败
        private string bUeContentLen;                //XXX Ue主叫内容长度
        private string bUeContent;                  //XXX Ue主叫内容。最大249字节。
        private string carrier;                    //载波
        private string dataTime;

        private DataTable uEReportDataTab = null;
        private DataTable uECallInfoDataTab = null;

        public DataTable UEReportDataTab
        {
            get
            {
                return uEReportDataTab;
            }

            set
            {
                uEReportDataTab = value;
            }
        }
        public DataTable UECallInfoDataTab
        {
            get
            {
                return uECallInfoDataTab;
            }

            set
            {
                uECallInfoDataTab = value;
            }
        }

        public string ReportID
        {
            get
            {
                return id;
            }

            set
            {
                id = value;
                NotifyPropertyChanged("ID");
            }
        }
        public string Carrier
        {
            get
            {
                return carrier;
            }

            set
            {
                carrier = value;
                NotifyPropertyChanged("Carrier");
            }
        }
        public string BOrmType
        {
            get
            {
                return bOrmType;
            }

            set
            {
                bOrmType = value;
                NotifyPropertyChanged("BOrmType");
            }
        }

        public string BUeId
        {
            get
            {
                return bUeId;
            }

            set
            {
                bUeId = value;
                NotifyPropertyChanged("BUeId");
            }
        }

        public string CRSRP
        {
            get
            {
                return cRSRP;
            }

            set
            {
                cRSRP = value;
                NotifyPropertyChanged("CRSRP");
            }
        }

        public string BUeContentLen
        {
            get
            {
                return bUeContentLen;
            }

            set
            {
                bUeContentLen = value;
                NotifyPropertyChanged("BUeContentLen");
            }
        }

        public string BUeContent
        {
            get
            {
                return bUeContent;
            }

            set
            {
                bUeContent = value;
                NotifyPropertyChanged("BUeContent");
            }
        }
        public string DataTime
        {
            get
            {
                return dataTime;
            }

            set
            {
                dataTime = value;
                NotifyPropertyChanged("DataTime");
            }
        }


        public GSMV2UEReportInfoClass()
        {
            if (UEReportDataTab == null)
            {
                UEReportDataTab = new DataTable("UEReportData");
                InitDataTab();
            }
            if (UECallInfoDataTab == null)
            {
                UECallInfoDataTab = new DataTable("UECallInfoData");
                UECallDataTab();
            }
        }

        //初始化表
        private void InitDataTab()
        {
            DataColumn DataColumn0 = new DataColumn();
            DataColumn0.DataType = System.Type.GetType("System.String");
            DataColumn0.ColumnName = "BOrmType";

            DataColumn DataColumn1 = new DataColumn();
            DataColumn1.DataType = System.Type.GetType("System.String");
            DataColumn1.ColumnName = "BUeId";

            DataColumn DataColumn2 = new DataColumn();
            DataColumn2.DataType = System.Type.GetType("System.String");
            DataColumn2.ColumnName = "CRSRP";

            DataColumn DataColumn3 = new DataColumn();
            DataColumn3.DataType = System.Type.GetType("System.String");
            DataColumn3.ColumnName = "BUeContentLen";

            DataColumn DataColumn4 = new DataColumn();
            DataColumn4.DataType = System.Type.GetType("System.String");
            DataColumn4.ColumnName = "BUeContent";

            DataColumn DataColumn5 = new DataColumn();
            DataColumn5.DataType = System.Type.GetType("System.String");
            DataColumn5.ColumnName = "Carrier";

            UEReportDataTab.Columns.Add(DataColumn0);
            UEReportDataTab.Columns.Add(DataColumn1);
            UEReportDataTab.Columns.Add(DataColumn2);
            UEReportDataTab.Columns.Add(DataColumn3);
            UEReportDataTab.Columns.Add(DataColumn4);
            UEReportDataTab.Columns.Add(DataColumn5);
        }

        private void UECallDataTab()
        {
            DataColumn DataColumn0 = new DataColumn();
            DataColumn0.DataType = System.Type.GetType("System.String");
            DataColumn0.ColumnName = "ParentFullPathName";

            DataColumn DataColumn1 = new DataColumn();
            DataColumn1.DataType = System.Type.GetType("System.String");
            DataColumn1.ColumnName = "DeviceName";

            DataColumn DataColumn2 = new DataColumn();
            DataColumn2.DataType = System.Type.GetType("System.String");
            DataColumn2.ColumnName = "BOrmType";

            DataColumn DataColumn3 = new DataColumn();
            DataColumn3.DataType = System.Type.GetType("System.String");
            DataColumn3.ColumnName = "BUeId";

            DataColumn DataColumn4 = new DataColumn();
            DataColumn4.DataType = System.Type.GetType("System.String");
            DataColumn4.ColumnName = "CRSRP";

            DataColumn DataColumn5 = new DataColumn();
            DataColumn5.DataType = System.Type.GetType("System.String");
            DataColumn5.ColumnName = "BUeContentLen";

            DataColumn DataColumn6 = new DataColumn();
            DataColumn6.DataType = System.Type.GetType("System.String");
            DataColumn6.ColumnName = "BUeContent";

            DataColumn DataColumn7 = new DataColumn();
            DataColumn7.DataType = System.Type.GetType("System.String");
            DataColumn7.ColumnName = "Carrier";

            DataColumn DataColumn8 = new DataColumn();
            DataColumn8.DataType = System.Type.GetType("System.String");
            DataColumn8.ColumnName = "DataTime";

            UECallInfoDataTab.Columns.Add(DataColumn0);
            UECallInfoDataTab.Columns.Add(DataColumn1);
            UECallInfoDataTab.Columns.Add(DataColumn2);
            UECallInfoDataTab.Columns.Add(DataColumn3);
            UECallInfoDataTab.Columns.Add(DataColumn4);
            UECallInfoDataTab.Columns.Add(DataColumn5);
            UECallInfoDataTab.Columns.Add(DataColumn6);
            UECallInfoDataTab.Columns.Add(DataColumn7);
            UECallInfoDataTab.Columns.Add(DataColumn8);
        }

        //历史主叫信息
        public void GSMV2UEInfoInput(
                                string BOrmType,
                                string BUeId,
                                string CRSRP,
                                string BUeContentLen,
                                string BUeContent,
                                string Carrier
                                )
        {
            DataRow dr = UEReportDataTab.NewRow();
            dr[0] = BOrmType;
            dr[1] = BUeId;
            dr[2] = CRSRP;
            dr[3] = BUeContentLen;
            dr[4] = BUeContent;
            dr[5] = Carrier;
            UEReportDataTab.Rows.Add(dr);
        }
        //实时上报主叫信息
        public void GSMV2UECallInfoInput(
                                string ParentFullPathName,
                                string DeviceName,
                                string BOrmType,
                                string BUeId,
                                string CRSRP,
                                string BUeContentLen,
                                string BUeContent,
                                string Carrier,
                                string DataTime
                                )
        {
            DataRow dr = UECallInfoDataTab.NewRow();
            dr[0] = ParentFullPathName;
            dr[1] = DeviceName;
            dr[2] = BOrmType;
            dr[3] = BUeId;
            dr[4] = CRSRP;
            dr[5] = BUeContentLen;
            dr[6] = BUeContent;
            dr[7] = Carrier;
            dr[8] = DataTime;
            UECallInfoDataTab.Rows.Add(dr);
        }
    }

    /// <summary>
    /// GSMV2/CDMA GSM 通话记录 短信记录 信息类
    /// </summary>
    public class GSMPhoneNumberSMSRecordInfoClass : GSMV2UEReportInfoClass
    {
        private string id;
        private string deviceFullPathName;               //设备名称
        private string bOrmType;                        //主叫类型。1=呼叫号码, 2=短消息PDU,3=寻呼测量
        private string bUeId;                          //IMSI
        private string cRSRP;                         //接收信号强度。寻呼测量时，-128表示寻呼失败
        private string bUeContentLen;                //XXX Ue主叫内容长度
        private string bUeContent;                  //XXX Ue主叫内容。最大249字节。
        private string desPhoneNumber;             //目标号码
        private string carrier;                   //载波
        private string dataTime;

        private DataTable sMSRecordDataTab = null;
        private DataTable phoneNumberRecordDataTab = null;

        public string ReportID
        {
            get
            {
                return id;
            }

            set
            {
                id = value;
                NotifyPropertyChanged("ID");
            }
        }
        public string Carrier
        {
            get
            {
                return carrier;
            }

            set
            {
                carrier = value;
                NotifyPropertyChanged("Carrier");
            }
        }
        public string BOrmType
        {
            get
            {
                return bOrmType;
            }

            set
            {
                bOrmType = value;
                NotifyPropertyChanged("BOrmType");
            }
        }

        public string BUeId
        {
            get
            {
                return bUeId;
            }

            set
            {
                bUeId = value;
                NotifyPropertyChanged("BUeId");
            }
        }

        public string CRSRP
        {
            get
            {
                return cRSRP;
            }

            set
            {
                cRSRP = value;
                NotifyPropertyChanged("CRSRP");
            }
        }

        public string BUeContentLen
        {
            get
            {
                return bUeContentLen;
            }

            set
            {
                bUeContentLen = value;
                NotifyPropertyChanged("BUeContentLen");
            }
        }

        public string BUeContent
        {
            get
            {
                return bUeContent;
            }

            set
            {
                bUeContent = value;
                NotifyPropertyChanged("BUeContent");
            }
        }
        public string DataTime
        {
            get
            {
                return dataTime;
            }

            set
            {
                dataTime = value;
                NotifyPropertyChanged("DataTime");
            }
        }

        public DataTable SMSRecordDataTab
        {
            get
            {
                return sMSRecordDataTab;
            }

            set
            {
                sMSRecordDataTab = value;
            }
        }

        public DataTable PhoneNumberRecordDataTab
        {
            get
            {
                return phoneNumberRecordDataTab;
            }

            set
            {
                phoneNumberRecordDataTab = value;
            }
        }

        public string DesPhoneNumber
        {
            get
            {
                return desPhoneNumber;
            }

            set
            {
                desPhoneNumber = value;
                NotifyPropertyChanged("DesPhoneNumber");
            }
        }

        public string DeviceFullPathName
        {
            get
            {
                return deviceFullPathName;
            }

            set
            {
                deviceFullPathName = value;
                NotifyPropertyChanged("DeviceFullPathName");
            }
        }

        public GSMPhoneNumberSMSRecordInfoClass()
        {
            if (SMSRecordDataTab == null)
            {
                SMSRecordDataTab = new DataTable("SMSRecord");
                SMSRecordDataTabInit();
            }
            if (PhoneNumberRecordDataTab == null)
            {
                PhoneNumberRecordDataTab = new DataTable("PhoneNumberRecord");
                PhoneNumberRecordDataTabInit();
            }
        }

        //初始化表
        private void SMSRecordDataTabInit()
        {
            DataColumn DataColumn0 = new DataColumn();
            DataColumn0.DataType = System.Type.GetType("System.String");
            DataColumn0.ColumnName = "ID";

            DataColumn DataColumn1 = new DataColumn();
            DataColumn1.DataType = System.Type.GetType("System.String");
            DataColumn1.ColumnName = "DeviceFullPathName";

            DataColumn DataColumn2 = new DataColumn();
            DataColumn2.DataType = System.Type.GetType("System.String");
            DataColumn2.ColumnName = "BOrmType";

            DataColumn DataColumn3 = new DataColumn();
            DataColumn3.DataType = System.Type.GetType("System.String");
            DataColumn3.ColumnName = "BUeId";

            DataColumn DataColumn4 = new DataColumn();
            DataColumn4.DataType = System.Type.GetType("System.String");
            DataColumn4.ColumnName = "CRSRP";

            DataColumn DataColumn5 = new DataColumn();
            DataColumn5.DataType = System.Type.GetType("System.String");
            DataColumn5.ColumnName = "BUeContentLen";

            DataColumn DataColumn6 = new DataColumn();
            DataColumn6.DataType = System.Type.GetType("System.String");
            DataColumn6.ColumnName = "BUeContent";

            DataColumn DataColumn7 = new DataColumn();
            DataColumn7.DataType = System.Type.GetType("System.String");
            DataColumn7.ColumnName = "DesPhoneNumber";

            DataColumn DataColumn8 = new DataColumn();
            DataColumn8.DataType = System.Type.GetType("System.String");
            DataColumn8.ColumnName = "Carrier";

            DataColumn DataColumn9 = new DataColumn();
            DataColumn9.DataType = System.Type.GetType("System.String");
            DataColumn9.ColumnName = "DataTime";

            SMSRecordDataTab.Columns.Add(DataColumn0);
            SMSRecordDataTab.Columns.Add(DataColumn1);
            SMSRecordDataTab.Columns.Add(DataColumn2);
            SMSRecordDataTab.Columns.Add(DataColumn3);
            SMSRecordDataTab.Columns.Add(DataColumn4);
            SMSRecordDataTab.Columns.Add(DataColumn5);
            SMSRecordDataTab.Columns.Add(DataColumn6);
            SMSRecordDataTab.Columns.Add(DataColumn7);
            SMSRecordDataTab.Columns.Add(DataColumn8);
            SMSRecordDataTab.Columns.Add(DataColumn9);
        }

        private void PhoneNumberRecordDataTabInit()
        {
            DataColumn DataColumn0 = new DataColumn();
            DataColumn0.DataType = System.Type.GetType("System.String");
            DataColumn0.ColumnName = "ID";

            DataColumn DataColumn1 = new DataColumn();
            DataColumn1.DataType = System.Type.GetType("System.String");
            DataColumn1.ColumnName = "DeviceFullPathName";

            DataColumn DataColumn2 = new DataColumn();
            DataColumn2.DataType = System.Type.GetType("System.String");
            DataColumn2.ColumnName = "BOrmType";

            DataColumn DataColumn3 = new DataColumn();
            DataColumn3.DataType = System.Type.GetType("System.String");
            DataColumn3.ColumnName = "BUeId";

            DataColumn DataColumn4 = new DataColumn();
            DataColumn4.DataType = System.Type.GetType("System.String");
            DataColumn4.ColumnName = "CRSRP";

            DataColumn DataColumn5 = new DataColumn();
            DataColumn5.DataType = System.Type.GetType("System.String");
            DataColumn5.ColumnName = "BUeContentLen";

            DataColumn DataColumn6 = new DataColumn();
            DataColumn6.DataType = System.Type.GetType("System.String");
            DataColumn6.ColumnName = "BUeContent";

            DataColumn DataColumn7 = new DataColumn();
            DataColumn7.DataType = System.Type.GetType("System.String");
            DataColumn7.ColumnName = "Carrier";

            DataColumn DataColumn8 = new DataColumn();
            DataColumn8.DataType = System.Type.GetType("System.String");
            DataColumn8.ColumnName = "DataTime";

            PhoneNumberRecordDataTab.Columns.Add(DataColumn0);
            PhoneNumberRecordDataTab.Columns.Add(DataColumn1);
            PhoneNumberRecordDataTab.Columns.Add(DataColumn2);
            PhoneNumberRecordDataTab.Columns.Add(DataColumn3);
            PhoneNumberRecordDataTab.Columns.Add(DataColumn4);
            PhoneNumberRecordDataTab.Columns.Add(DataColumn5);
            PhoneNumberRecordDataTab.Columns.Add(DataColumn6);
            PhoneNumberRecordDataTab.Columns.Add(DataColumn7);
            PhoneNumberRecordDataTab.Columns.Add(DataColumn8);
        }

        /// <summary>
        /// 短信记录
        /// </summary>
        /// <param name="DeviceFullPathName"></param>
        /// <param name="BOrmType"></param>
        /// <param name="BUeId"></param>
        /// <param name="CRSRP"></param>
        /// <param name="BUeContentLen"></param>
        /// <param name="BUeContent"></param>
        /// <param name="Carrier"></param>
        /// <param name="DataTime"></param>
        public void SMSRecordInput(
                                    string DeviceFullPathName,
                                    string BOrmType,
                                    string BUeId,
                                    string CRSRP,
                                    string BUeContentLen,
                                    string BUeContent,
                                    string DesPhoneNumber,
                                    string Carrier,
                                    string DataTime
                                  )
        {
            String ID = string.Empty;

            if (SMSRecordDataTab.Rows.Count <= 0)
            {
                DataRow dr = SMSRecordDataTab.NewRow();
                ID = "1";

                dr.BeginEdit();
                dr[0] = ID;
                dr[1] = DeviceFullPathName;
                dr[2] = BOrmType;
                dr[3] = BUeId;
                dr[4] = CRSRP;
                dr[5] = BUeContentLen;
                dr[6] = BUeContent;
                dr[7] = DesPhoneNumber;
                dr[8] = Carrier;
                dr[9] = DataTime;

                SMSRecordDataTab.Rows.Add(dr);
                dr.EndEdit();
            }
            else
            {
                DataRow dr = SMSRecordDataTab.NewRow();
                ID = (Convert.ToInt32(SMSRecordDataTab.Rows[SMSRecordDataTab.Rows.Count - 1][0].ToString()) + 1).ToString();

                dr[0] = ID;
                dr[1] = DeviceFullPathName;
                dr[2] = BOrmType;
                dr[3] = BUeId;
                dr[4] = CRSRP;
                dr[5] = BUeContentLen;
                dr[6] = BUeContent;
                dr[7] = DesPhoneNumber;
                dr[8] = Carrier;
                dr[9] = DataTime;
                SMSRecordDataTab.Rows.Add(dr);
            }
        }

        /// <summary>
        /// 通话记录
        /// </summary>
        /// <param name="DeviceFullPathName"></param>
        /// <param name="BOrmType"></param>
        /// <param name="BUeId"></param>
        /// <param name="CRSRP"></param>
        /// <param name="BUeContentLen"></param>
        /// <param name="BUeContent"></param>
        /// <param name="Carrier"></param>
        /// <param name="DataTime"></param>
        public void PhoneNumberRecordInput(
                                            string DeviceFullPathName,
                                            string BOrmType,
                                            string BUeId,
                                            string CRSRP,
                                            string BUeContentLen,
                                            string BUeContent,
                                            string Carrier,
                                            string DataTime
                                          )
        {
            String ID = string.Empty;
            if (PhoneNumberRecordDataTab.Rows.Count <= 0)
            {
                DataRow dr = PhoneNumberRecordDataTab.NewRow();
                ID = "1";
                dr.BeginEdit();
                dr[0] = ID;
                dr[1] = DeviceFullPathName;
                dr[2] = BOrmType;
                dr[3] = BUeId;
                dr[4] = CRSRP;
                dr[5] = BUeContentLen;
                dr[6] = BUeContent;
                dr[7] = Carrier;
                dr[8] = DataTime;
                PhoneNumberRecordDataTab.Rows.Add(dr);
                dr.EndEdit();
            }
            else
            {
                DataRow dr = PhoneNumberRecordDataTab.NewRow();
                ID = (Convert.ToInt32(PhoneNumberRecordDataTab.Rows[PhoneNumberRecordDataTab.Rows.Count - 1][0].ToString()) + 1).ToString();

                dr[0] = ID;
                dr[1] = DeviceFullPathName;
                dr[2] = BOrmType;
                dr[3] = BUeId;
                dr[4] = CRSRP;
                dr[5] = BUeContentLen;
                dr[6] = BUeContent;
                dr[7] = Carrier;
                dr[8] = DataTime;
                PhoneNumberRecordDataTab.Rows.Add(dr);
            }
        }
    }
    /// <summary>
    /// FAP配置下发短信号码和内容
    /// </summary>
    public class GSMV2ConfigSMSMSGClass : GSMPhoneNumberSMSRecordInfoClass
    {
        private string mSGID;                  //ID
        private string bSMSOriginalNumLen;     //主叫号码长度
        private string bSMSOriginalNum;        //主叫号码
        private string bSMSContentLen;         //短信内容字数
        private string bSMSContent;            //短信内容.unicode编码，每个字符占2字节
        private string sMSI;                   //单个或多少IMSI，逗号隔开
        private string smsctrl;               //上号后是否自动发送短信。0：不自动发送；1：自动发关

        private DataTable gSMV2ConfigSMSMSGDataTab = null;
        private object sMSLock;
        public DataTable GSMV2ConfigSMSMSGDataTab
        {
            get
            {
                return gSMV2ConfigSMSMSGDataTab;
            }

            set
            {
                gSMV2ConfigSMSMSGDataTab = value;
            }
        }

        public string MSGID
        {
            get
            {
                return mSGID;
            }

            set
            {
                mSGID = value;
                NotifyPropertyChanged("MSGID");
            }
        }
        public string BSMSOriginalNumLen
        {
            get
            {
                return bSMSOriginalNumLen;
            }

            set
            {
                bSMSOriginalNumLen = value;
                NotifyPropertyChanged("BSMSOriginalNumLen");
            }
        }

        public string BSMSOriginalNum
        {
            get
            {
                return bSMSOriginalNum;
            }

            set
            {
                bSMSOriginalNum = value;
                NotifyPropertyChanged("BSMSOriginalNum");
            }
        }

        public string BSMSContentLen
        {
            get
            {
                return bSMSContentLen;
            }

            set
            {
                bSMSContentLen = value;
                NotifyPropertyChanged("BSMSContentLen");
            }
        }

        public string BSMSContent
        {
            get
            {
                return bSMSContent;
            }

            set
            {
                bSMSContent = value;
                NotifyPropertyChanged("BSMSContent");
            }
        }

        public string SMSI
        {
            get
            {
                return sMSI;
            }

            set
            {
                sMSI = value;
                NotifyPropertyChanged("SMSI");
            }
        }
        public string SMSctrl
        {
            get
            {
                return smsctrl;
            }

            set
            {
                smsctrl = value;
                NotifyPropertyChanged("SMSctrl");
            }
        }
        public object SMSLock
        {
            get
            {
                return sMSLock;
            }

            set
            {
                sMSLock = value;
            }
        }


        public GSMV2ConfigSMSMSGClass()
        {
            if (GSMV2ConfigSMSMSGDataTab == null)
            {
                GSMV2ConfigSMSMSGDataTab = new DataTable("GSMV2ConfigSMSMSGData");
                InitDataTab();
            }
            if (SMSLock == null)
            {
                SMSLock = new object();
            }
        }

        //初始化表
        private void InitDataTab()
        {
            DataColumn DataColumn0 = new DataColumn();
            DataColumn0.DataType = System.Type.GetType("System.String");
            DataColumn0.ColumnName = "NSGID";

            DataColumn DataColumn1 = new DataColumn();
            DataColumn1.DataType = System.Type.GetType("System.String");
            DataColumn1.ColumnName = "BSMSOriginalNumLen";

            DataColumn DataColumn2 = new DataColumn();
            DataColumn2.DataType = System.Type.GetType("System.String");
            DataColumn2.ColumnName = "BSMSOriginalNum";

            DataColumn DataColumn3 = new DataColumn();
            DataColumn3.DataType = System.Type.GetType("System.String");
            DataColumn3.ColumnName = "BSMSContentLen";

            DataColumn DataColumn4 = new DataColumn();
            DataColumn4.DataType = System.Type.GetType("System.String");
            DataColumn4.ColumnName = "BSMSContent";

            DataColumn DataColumn5 = new DataColumn();
            DataColumn5.DataType = System.Type.GetType("System.String");
            DataColumn5.ColumnName = "CarrierOne";

            DataColumn DataColumn6 = new DataColumn();
            DataColumn6.DataType = System.Type.GetType("System.String");
            DataColumn6.ColumnName = "CarrierTwo";

            DataColumn DataColumn7 = new DataColumn();
            DataColumn7.DataType = System.Type.GetType("System.String");
            DataColumn7.ColumnName = "SMSctrl";

            GSMV2ConfigSMSMSGDataTab.Columns.Add(DataColumn0);
            GSMV2ConfigSMSMSGDataTab.Columns.Add(DataColumn1);
            GSMV2ConfigSMSMSGDataTab.Columns.Add(DataColumn2);
            GSMV2ConfigSMSMSGDataTab.Columns.Add(DataColumn3);
            GSMV2ConfigSMSMSGDataTab.Columns.Add(DataColumn4);
            GSMV2ConfigSMSMSGDataTab.Columns.Add(DataColumn5);
            GSMV2ConfigSMSMSGDataTab.Columns.Add(DataColumn6);
            GSMV2ConfigSMSMSGDataTab.Columns.Add(DataColumn7);
        }

        //数据输入
        public void GSMV2ConfigSMSMSGInput(
                                string MSGID,
                                string BSMSOriginalNumLen,
                                string BSMSOriginalNum,
                                string BSMSContentLen,
                                string BSMSContent,
                                string CarrierOne,
                                string CarrierTwo,
                                string SMSctrl
                                )
        {
            lock (SMSLock)
            {
                DataRow dr = GSMV2ConfigSMSMSGDataTab.NewRow();
                dr[0] = MSGID;
                dr[1] = BSMSOriginalNumLen;
                dr[2] = BSMSOriginalNum;
                dr[3] = BSMSContentLen;
                dr[4] = BSMSContent;
                dr[5] = CarrierOne;
                dr[6] = CarrierTwo;
                dr[7] = SMSctrl;
                GSMV2ConfigSMSMSGDataTab.Rows.Add(dr);
            }
        }
    }

    /// <summary>
    /// CDMA FAP上报UE主叫信息
    /// </summary>
    public class CDMAUEReportInfoClass : GSMV2ConfigSMSMSGClass
    {

    }
    /// <summary>
    /// CDMA 配置下发短信号码和内容
    /// </summary>
    public class CDMAConfigSMSMSGClass : CDMAUEReportInfoClass
    {

    }
    /// <summary>
    /// //GSMV2系统维护
    /// </summary>
    public class GSMV2DeviceSystemMaintenence : CDMAConfigSMSMSGClass
    {

    }
    /// <summary>
    /// GSMV2工程设置
    /// </summary>
    public class GSMV2DeviceObjectSetting : GSMV2DeviceSystemMaintenence
    {

    }
    #endregion

    #region WCDMA
    /// <summary>
    /// 载波
    /// </summary>
    public class WCDMACarrierParameterClass : GSMV2DeviceObjectSetting
    {

    }
    /// <summary>
    /// 设备细信息
    /// </summary>
    public class WCDMADeviceParameterClass : WCDMACarrierParameterClass
    {

    }
    //小区信息
    public class WCDMACellNeighParameterClass : WCDMADeviceParameterClass
    {

    }
    public class WCDMASystemOptionParameterClass : WCDMACellNeighParameterClass
    {

    }
    public class WCDMARadioFrequencyParameterClass : WCDMASystemOptionParameterClass
    {

    }
    public class WCDMARegModeParameterClass : WCDMARadioFrequencyParameterClass
    {

    }
    public class WCDMALibyraryRegAddClass : WCDMARegModeParameterClass
    {

    }
    public class WCDMALibyraryRegQueryClass : WCDMALibyraryRegAddClass
    {

    }
    public class WCDMADeviceAdvanceSettingClass : WCDMALibyraryRegQueryClass
    {

    }
    public class WCDMAUEInformationParameterClass : WCDMADeviceAdvanceSettingClass
    {

    }
    public class WCDMADeviceDetaiInfoClass : WCDMAUEInformationParameterClass
    {

    }
    public class WCDMADeviceSystemMaintenence : WCDMADeviceDetaiInfoClass
    {

    }
    public class WCDMADeviceObjectSetting : WCDMADeviceSystemMaintenence
    {

    }
    public class WCDMASetWorkModeParameterClass : WCDMADeviceObjectSetting
    {

    }

    #endregion

    #region TDS
    /// <summary>
    /// 载波
    /// </summary>
    public class TDSCarrierParameterClass : WCDMASetWorkModeParameterClass
    {

    }
    /// <summary>
    /// 设备细信息
    /// </summary>
    public class TDSDeviceParameterClass : TDSCarrierParameterClass
    {

    }
    //小区信息
    public class TDSCellNeighParameterClass : TDSDeviceParameterClass
    {

    }
    public class TDSSystemOptionParameterClass : TDSCellNeighParameterClass
    {

    }
    public class TDSRadioFrequencyParameterClass : TDSSystemOptionParameterClass
    {

    }
    public class TDSRegModeParameterClass : TDSRadioFrequencyParameterClass
    {

    }
    public class TDSLibyraryRegAddClass : TDSRegModeParameterClass
    {

    }
    public class TDSLibyraryRegQueryClass : TDSLibyraryRegAddClass
    {

    }
    public class TDSDeviceAdvanceSettingClass : TDSLibyraryRegQueryClass
    {

    }
    public class TDSUEInformationParameterClass : TDSDeviceAdvanceSettingClass
    {

    }
    public class TDSDeviceDetaiInfoClass : TDSUEInformationParameterClass
    {

    }
    public class TDSDeviceSystemMaintenence : TDSDeviceDetaiInfoClass
    {

    }
    public class TDSDeviceObjectSetting : TDSDeviceSystemMaintenence
    {

    }
    public class TDSSetWorkModeParameterClass : TDSDeviceObjectSetting
    {

    }

    #endregion

    #region 译号器
    /// <summary>
    /// 设备详细信息
    /// </summary>
    public class GSMV3DeviceParameterClass : TDSSetWorkModeParameterClass
    {

    }
    /// <summary>
    /// 小区信息
    /// </summary>
    public class GSMV3CellNeighParameterClass : GSMV3DeviceParameterClass
    {
        private string device_ip;
        private string device_gateway;
        private string device_netmask;
        private string version;
        private string run_time;
        private string devicetime;
        private string status;
        private string deviceNumber;
        private string ntp;
        private string channel_U;
        private string lac_U;
        private string att_U;
        private string channel_M;
        private string lac_M;
        private string att_M;
        private string redio;
        public string DeviceIP
        {
            get
            {
                return device_ip;
            }
            set
            {
                device_ip = value;
                NotifyPropertyChanged("DeviceIP");
            }
        }
        public string DeviceGateway
        {
            get
            {
                return device_gateway;
            }
            set
            {
                device_gateway = value;
                NotifyPropertyChanged("DeviceGateway");
            }
        }
        public string DeviceNetmask
        {
            get
            {
                return device_netmask;
            }
            set
            {
                device_netmask = value;
                NotifyPropertyChanged("DeviceNetmask");
            }
        }
        public string Version
        {
            get
            {
                return version;
            }
            set
            {
                version = value;
                NotifyPropertyChanged("Version");
            }
        }
        public string RunTime
        {
            get
            {
                return run_time;
            }
            set
            {
                run_time = value;
                NotifyPropertyChanged("RunTime");
            }
        }
        public string Devicetime
        {
            get
            {
                return devicetime;
            }
            set
            {
                devicetime = value;
                NotifyPropertyChanged("Devicetime");
            }
        }
        public string Status
        {
            get
            {
                return status;
            }
            set
            {
                status = value;
                NotifyPropertyChanged("Status");
            }
        }
        public string DeviceNumber
        {
            get
            {
                return deviceNumber;
            }
            set
            {
                deviceNumber = value;
                NotifyPropertyChanged("DeviceNumber");
            }
        }
        public string NTP
        {
            get
            {
                return ntp;
            }
            set
            {
                ntp = value;
                NotifyPropertyChanged("NTP");
            }
        }
        public string ChannelU
        {
            get
            {
                return channel_U;
            }
            set
            {
                channel_U = value;
                NotifyPropertyChanged("ChannelU");
            }
        }
        public string LacU
        {
            get
            {
                return lac_U;
            }
            set
            {
                lac_U = value;
                NotifyPropertyChanged("LacU");
            }
        }
        public string AttU
        {
            get
            {
                return att_U;
            }
            set
            {
                att_U = value;
                NotifyPropertyChanged("AttU");
            }
        }
        public string ChannelM
        {
            get
            {
                return channel_M;
            }
            set
            {
                channel_M = value;
                NotifyPropertyChanged("ChannelM");
            }
        }
        public string LacM
        {
            get
            {
                return lac_M;
            }
            set
            {
                lac_M = value;
                NotifyPropertyChanged("LacM");
            }
        }
        public string AttM
        {
            get
            {
                return att_M;
            }
            set
            {
                att_M = value;
                NotifyPropertyChanged("AttM");
            }
        }
        public string Redio
        {
            get
            {
                return redio;
            }
            set
            {
                redio = value;
                NotifyPropertyChanged("Redio");
            }
        }
    }
    /// <summary>
    /// 高级设置
    /// </summary>
    public class GSMV3DeviceAdvanceSettingClass : GSMV3CellNeighParameterClass
    {

    }
    /// <summary>
    /// 工程设置
    /// </summary>
    public class GSMV3DeviceObjectSettingParameterClass : GSMV3DeviceAdvanceSettingClass
    {

    }
    #endregion

    #region 通话、短信记录
    /// <summary>
    /// GSM、GSMV2、CDM 通话，短信息记录
    /// </summary>
    public class DeviceSMSPhoneNumberRecordClass : WCDMADeviceObjectSetting
    {
        private DataTable _devicePhoneRecordTab = null;
        private DataTable _deviceSMSRecordTab = null;

        private object _devicePhoneRecordeLock = null;
        private object _deviceSMSRecordLock = null;

        public DataTable DevicePhoneRecordTab
        {
            get
            {
                return _devicePhoneRecordTab;
            }

            set
            {
                _devicePhoneRecordTab = value;
            }
        }

        public DataTable DeviceSMSRecordTab
        {
            get
            {
                return _deviceSMSRecordTab;
            }

            set
            {
                _deviceSMSRecordTab = value;
            }
        }

        public object DevicePhoneRecordeLock
        {
            get
            {
                return _devicePhoneRecordeLock;
            }

            set
            {
                _devicePhoneRecordeLock = value;
            }
        }

        public object DeviceSMSRecordLock
        {
            get
            {
                return _deviceSMSRecordLock;
            }

            set
            {
                _deviceSMSRecordLock = value;
            }
        }

        public DeviceSMSPhoneNumberRecordClass()
        {
            if (DevicePhoneRecordTab == null)
            {
                DevicePhoneRecordTab = new DataTable("DevicePhoneRecord");

                DataColumn DataColumn0 = new DataColumn();
                DataColumn0.DataType = System.Type.GetType("System.String");
                DataColumn0.ColumnName = "IMSI"; //bUeId

                DataColumn DataColumn1 = new DataColumn();
                DataColumn1.DataType = System.Type.GetType("System.String");
                DataColumn1.ColumnName = "PhoneNumber"; //bUeContent

                DataColumn DataColumn2 = new DataColumn();
                DataColumn2.DataType = System.Type.GetType("System.String");
                DataColumn2.ColumnName = "CRSRP";

                DataColumn DataColumn3 = new DataColumn();
                DataColumn3.DataType = System.Type.GetType("System.String");
                DataColumn3.ColumnName = "BUeContentLen";

                DataColumn DataColumn4 = new DataColumn();
                DataColumn4.DataType = System.Type.GetType("System.String");
                DataColumn4.ColumnName = "BOrmType";

                DevicePhoneRecordTab.Columns.Add(DataColumn0);
                DevicePhoneRecordTab.Columns.Add(DataColumn1);
                DevicePhoneRecordTab.Columns.Add(DataColumn2);
                DevicePhoneRecordTab.Columns.Add(DataColumn3);
                DevicePhoneRecordTab.Columns.Add(DataColumn4);
            }

            if (DeviceSMSRecordTab == null)
            {
                DeviceSMSRecordTab = new DataTable("DeviceSMSRecord");

                DataColumn DataColumn0 = new DataColumn();
                DataColumn0.DataType = System.Type.GetType("System.String");
                DataColumn0.ColumnName = "IMSI";

                DataColumn DataColumn1 = new DataColumn();
                DataColumn1.DataType = System.Type.GetType("System.String");
                DataColumn1.ColumnName = "PhoneNumber";

                DataColumn DataColumn2 = new DataColumn();
                DataColumn2.DataType = System.Type.GetType("System.String");
                DataColumn2.ColumnName = "CodeType";

                DataColumn DataColumn3 = new DataColumn();
                DataColumn3.DataType = System.Type.GetType("System.String");
                DataColumn3.ColumnName = "SMSData";

                DataColumn DataColumn4 = new DataColumn();
                DataColumn4.DataType = System.Type.GetType("System.String");
                DataColumn4.ColumnName = "CRSRP";

                DataColumn DataColumn5 = new DataColumn();
                DataColumn5.DataType = System.Type.GetType("System.String");
                DataColumn5.ColumnName = "BUeContentLen";

                DataColumn DataColumn6 = new DataColumn();
                DataColumn6.DataType = System.Type.GetType("System.String");
                DataColumn6.ColumnName = "BOrmType";

                DeviceSMSRecordTab.Columns.Add(DataColumn0);
                DeviceSMSRecordTab.Columns.Add(DataColumn1);
                DeviceSMSRecordTab.Columns.Add(DataColumn2);
                DeviceSMSRecordTab.Columns.Add(DataColumn3);
                DeviceSMSRecordTab.Columns.Add(DataColumn4);
                DeviceSMSRecordTab.Columns.Add(DataColumn5);
                DeviceSMSRecordTab.Columns.Add(DataColumn6);
            }

            if (PhoneRecordeLock == null)
            {
                PhoneRecordeLock = new object();
            }
            if (SMSRecordLock == null)
            {
                SMSRecordLock = new object();
            }
        }

        public void DevicePhoneRecordInput(string IMSI, string PhoneNumber, string CRSRP, string BUeContentLen, string stringBOrmType)
        {
            DataRow dr = DevicePhoneRecordTab.NewRow();
            dr["IMSI"] = IMSI;
            dr["PhoneNumber"] = PhoneNumber;
            dr["CRSRP"] = CRSRP;
            dr["BUeContentLen"] = BUeContentLen;
            dr["stringBOrmType"] = stringBOrmType;
            DevicePhoneRecordTab.Rows.Add(dr);
        }

        public void DeviceSMSRecordInput(string IMSI, string PhoneNumber, string CodeType, string SMSData, string CRSRP, string BUeContentLen, string stringBOrmType)
        {
            DataRow dr = DeviceSMSRecordTab.NewRow();
            dr["IMSI"] = IMSI;
            dr["PhoneNumber"] = PhoneNumber;
            dr["CodeType"] = CodeType;
            dr["SMSData"] = SMSData;
            dr["CRSRP"] = CRSRP;
            dr["BUeContentLen"] = BUeContentLen;
            dr["stringBOrmType"] = stringBOrmType;
            DeviceSMSRecordTab.Rows.Add(dr);
        }
    }
    #endregion

    /// <summary>
    /// 设设备信息
    /// </summary>
    /// /// <summary>
    /// AP属性
    /// </summary>
    public class APATTributes : DeviceSMSPhoneNumberRecordClass
    {
        private object _aPATTributesLock = null;

        public APATTributes()
        {
            if (APATTributesLock == null)
            {
                APATTributesLock = new object();
            }
        }

        public object APATTributesLock
        {
            get
            {
                return _aPATTributesLock;
            }

            set
            {
                _aPATTributesLock = value;
            }
        }
    }

    /// <summary>
    /// 未知设备类
    /// </summary>
    public class UnKnownDeviceListsParameterClass : INotifyPropertyChanged
    {
        private string _iD;
        private string _deviceName;
        private string _nodeIcon;
        private string _nodeIconTips;
        private string _sN;
        private string _carrier;
        private string _ipAddr;
        private string _port;
        private string _netmask;
        private string _mode;
        private string _online;
        private string _lastOnline;
        private string _isActive;
        private string _innerType;
        private string _aPVersion;
        private string _toStation = "未指定将未知设备添加到哪个站点";
        private int _count;
        private bool _isSelected;
        private bool _isSelectedAll;
        private string _stationStatuIcon;
        private string _stationID;
        private string _actionStatu;

        private DataTable _unKnownDeviceTab = null;
        private object _lockObject;

        public DataTable UnKnownDeviceTab
        {
            get
            {
                return _unKnownDeviceTab;
            }

            set
            {
                _unKnownDeviceTab = value;
                NotifyPropertyChanged("UnKnownDeviceTab");
            }
        }

        public string ID
        {
            get
            {
                return _iD;
            }

            set
            {
                _iD = value;
                NotifyPropertyChanged("ID");
            }
        }

        public object LockObject
        {
            get
            {
                return _lockObject;
            }

            set
            {
                _lockObject = value;
                NotifyPropertyChanged("LockObject");
            }
        }

        public string DeviceName
        {
            get
            {
                return _deviceName;
            }

            set
            {
                _deviceName = value;
                NotifyPropertyChanged("DeviceName");
            }
        }

        public string SN
        {
            get
            {
                return _sN;
            }

            set
            {
                _sN = value;
                NotifyPropertyChanged("SN");
            }
        }

        public string Carrier
        {
            get
            {
                return _carrier;
            }

            set
            {
                _carrier = value;
                NotifyPropertyChanged("Carrier");
            }
        }

        public string IpAddr
        {
            get
            {
                return _ipAddr;
            }

            set
            {
                _ipAddr = value;
                NotifyPropertyChanged("IpAddr");
            }
        }

        public string Port
        {
            get
            {
                return _port;
            }

            set
            {
                _port = value;
                NotifyPropertyChanged("Port");
            }
        }

        public string Netmask
        {
            get
            {
                return _netmask;
            }

            set
            {
                _netmask = value;
                NotifyPropertyChanged("Netmask");
            }
        }

        public string Mode
        {
            get
            {
                return _mode;
            }

            set
            {
                _mode = value;
                NotifyPropertyChanged("Mode");
            }
        }

        public string Online
        {
            get
            {
                return _online;
            }

            set
            {
                _online = value;
                NotifyPropertyChanged("Online");
            }
        }

        public string LastOnline
        {
            get
            {
                return _lastOnline;
            }

            set
            {
                _lastOnline = value;
                NotifyPropertyChanged("LastOnline");
            }
        }

        public string IsActive
        {
            get
            {
                return _isActive;
            }

            set
            {
                _isActive = value;
                NotifyPropertyChanged("IsActive");
            }
        }

        public string InnerType
        {
            get
            {
                return _innerType;
            }

            set
            {
                _innerType = value;
                NotifyPropertyChanged("InnerType");
            }
        }

        public int Count
        {
            get
            {
                return _count;
            }

            set
            {
                _count = value;
                NotifyPropertyChanged("Count");
            }
        }

        public string APVersion
        {
            get
            {
                return _aPVersion;
            }

            set
            {
                _aPVersion = value;
                NotifyPropertyChanged("APVersion");
            }
        }

        public string ToStation
        {
            get
            {
                return _toStation;
            }

            set
            {
                _toStation = value;
                NotifyPropertyChanged("ToStation");
            }
        }

        public bool IsSelected
        {
            get
            {
                return _isSelected;
            }

            set
            {
                _isSelected = value;
                NotifyPropertyChanged("IsSelected");
            }
        }

        public bool IsSelectedAll
        {
            get
            {
                return _isSelectedAll;
            }

            set
            {
                _isSelectedAll = value;
                NotifyPropertyChanged("IsSelectedAll");
            }
        }

        public string StationStatuIcon
        {
            get
            {
                return _stationStatuIcon;
            }

            set
            {
                _stationStatuIcon = value;
                NotifyPropertyChanged("StationStatuIcon");
            }
        }

        public string StationID
        {
            get
            {
                return _stationID;
            }

            set
            {
                _stationID = value;
                NotifyPropertyChanged("StationID");
            }
        }

        public string ActionStatu
        {
            get
            {
                return _actionStatu;
            }

            set
            {
                _actionStatu = value;
                NotifyPropertyChanged("ActionStatu");
            }
        }

        public string NodeIcon
        {
            get
            {
                return _nodeIcon;
            }

            set
            {
                _nodeIcon = value;
                NotifyPropertyChanged("NodeIcon");
            }
        }

        public string NodeIconTips
        {
            get
            {
                return _nodeIconTips;
            }

            set
            {
                _nodeIconTips = value;
                NotifyPropertyChanged("NodeIconTips");
            }
        }

        public UnKnownDeviceListsParameterClass()
        {
            if (UnKnownDeviceTab == null)
            {
                UnKnownDeviceTab = new DataTable("UnknownDeviceList");
                InitDataTable();
            }

            if (LockObject == null)
            {
                LockObject = new object();
            }
        }

        private void InitDataTable()
        {

            DataColumn DataColumn0 = new DataColumn();
            DataColumn0.DataType = Type.GetType("System.String");
            DataColumn0.ColumnName = "ID";

            DataColumn DataColumn1 = new DataColumn();
            DataColumn1.DataType = Type.GetType("System.String");
            DataColumn1.ColumnName = "DeviceName";

            DataColumn DataColumn2 = new DataColumn();
            DataColumn2.DataType = Type.GetType("System.String");
            DataColumn2.ColumnName = "SN";

            DataColumn DataColumn3 = new DataColumn();
            DataColumn3.DataType = Type.GetType("System.String");
            DataColumn3.ColumnName = "Carrier";

            DataColumn DataColumn4 = new DataColumn();
            DataColumn4.DataType = Type.GetType("System.String");
            DataColumn4.ColumnName = "IpAddr";

            DataColumn DataColumn5 = new DataColumn();
            DataColumn5.DataType = Type.GetType("System.String");
            DataColumn5.ColumnName = "Port";

            DataColumn DataColumn6 = new DataColumn();
            DataColumn6.DataType = Type.GetType("System.String");
            DataColumn6.ColumnName = "Netmask";

            DataColumn DataColumn7 = new DataColumn();
            DataColumn7.DataType = Type.GetType("System.String");
            DataColumn7.ColumnName = "Mode";

            DataColumn DataColumn8 = new DataColumn();
            DataColumn8.DataType = Type.GetType("System.String");
            DataColumn8.ColumnName = "Online";

            DataColumn DataColumn9 = new DataColumn();
            DataColumn9.DataType = Type.GetType("System.String");
            DataColumn9.ColumnName = "LastOnline";

            DataColumn DataColumn10 = new DataColumn();
            DataColumn10.DataType = Type.GetType("System.String");
            DataColumn10.ColumnName = "IsActive";

            DataColumn DataColumn11 = new DataColumn();
            DataColumn11.DataType = Type.GetType("System.String");
            DataColumn11.ColumnName = "InnerType";

            DataColumn DataColumn12 = new DataColumn();
            DataColumn12.DataType = Type.GetType("System.String");
            DataColumn12.ColumnName = "ApVersion";

            UnKnownDeviceTab.Columns.Add(DataColumn0);
            UnKnownDeviceTab.Columns.Add(DataColumn1);
            UnKnownDeviceTab.Columns.Add(DataColumn2);
            UnKnownDeviceTab.Columns.Add(DataColumn3);
            UnKnownDeviceTab.Columns.Add(DataColumn4);
            UnKnownDeviceTab.Columns.Add(DataColumn5);
            UnKnownDeviceTab.Columns.Add(DataColumn6);
            UnKnownDeviceTab.Columns.Add(DataColumn7);
            UnKnownDeviceTab.Columns.Add(DataColumn8);
            UnKnownDeviceTab.Columns.Add(DataColumn9);
            UnKnownDeviceTab.Columns.Add(DataColumn10);
            UnKnownDeviceTab.Columns.Add(DataColumn11);
            UnKnownDeviceTab.Columns.Add(DataColumn12);
        }

        public void Input(
                            string _deviceName,
                            string _sN,
                            string _carrier,
                            string _ipAddr,
                            string _port,
                            string _netmask,
                            string _mode,
                            string _online,
                            string _lastOnline,
                            string _isActive,
                            string _innerType,
                            string _apVersion
                        )
        {

            try
            {
                lock (LockObject)
                {
                    string ID = string.Empty;
                    bool UnDumpData = false;
                    if (UnKnownDeviceTab.Rows.Count <= 0)
                    {
                        ID = "1";
                    }
                    else
                    {
                        ID = (Convert.ToInt32(UnKnownDeviceTab.Rows[UnKnownDeviceTab.Rows.Count - 1][0].ToString()) + 1).ToString();
                    }

                    //检测重复
                    if (UnKnownDeviceTab.Rows.Count > 0)
                    {
                        for (int i = 0; i < UnKnownDeviceTab.Rows.Count; i++)
                        {
                            if (_deviceName == UnKnownDeviceTab.Rows[i][1].ToString()
                                && _sN == UnKnownDeviceTab.Rows[i][2].ToString()
                                && _ipAddr == UnKnownDeviceTab.Rows[i][4].ToString()
                                && _port == UnKnownDeviceTab.Rows[i][5].ToString()
                                && _netmask == UnKnownDeviceTab.Rows[i][6].ToString()
                                && _mode == UnKnownDeviceTab.Rows[i][7].ToString()
                                && _online == UnKnownDeviceTab.Rows[i][8].ToString()
                                && _lastOnline == UnKnownDeviceTab.Rows[i][9].ToString()
                                && _isActive == UnKnownDeviceTab.Rows[i][10].ToString()
                                && _innerType == UnKnownDeviceTab.Rows[i][11].ToString()
                                && _apVersion == UnKnownDeviceTab.Rows[i][12].ToString())
                            {
                                UnDumpData = false;
                                break;
                            }
                            else
                            {
                                UnDumpData = true;
                            }
                        }
                    }
                    else
                    {
                        UnDumpData = true;
                    }

                    //不重复
                    if (UnDumpData)
                    {
                        DataRow dr = UnKnownDeviceTab.NewRow();
                        dr[0] = ID;
                        dr[1] = _deviceName;
                        dr[2] = _sN;
                        dr[3] = _carrier;
                        dr[4] = _ipAddr;
                        dr[5] = _port;
                        dr[6] = _netmask;
                        dr[7] = _mode;
                        dr[8] = _online;
                        dr[9] = _lastOnline;
                        dr[10] = _isActive;
                        dr[11] = _innerType;
                        dr[12] = _apVersion;
                        UnKnownDeviceTab.Rows.Add(dr);
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("接收未知设备", ex.Message, ex.StackTrace);
                JsonInterFace.IODataHelper.SaveLogs(DateTime.Now.ToString(), "接收未知设备", ex.Message, ex.StackTrace);
            }
        }


        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    /// <summary>
    /// 非XML设置
    /// </summary>
    public class DeviceNoXMLUploadClass : INotifyPropertyChanged
    {
        private string _enable;
        private string _type;
        private string _messageFormat;
        private string _period;
        private string _nameFormat;
        private string _dataFormat;
        private string _uRLorIP;
        private string _addInfo;
        private string _commEnable;
        private string _commIp;
        private string _commPort;
        private string _encryptType;
        private string _cacheMax;
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }

        public string Enable
        {
            get
            {
                return _enable;
            }
            set
            {
                _enable = value;
                NotifyPropertyChanged("Enable");

            }
        }
        public string Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
                NotifyPropertyChanged("Type");

            }
        }
        public string MessageFormat
        {
            get
            {
                return _messageFormat;
            }
            set
            {
                _messageFormat = value;
                NotifyPropertyChanged("MessageFormat");

            }
        }
        public string Period
        {
            get
            {
                return _period;
            }
            set
            {
                _period = value;
                NotifyPropertyChanged("Period");

            }
        }
        public string NameFormat
        {
            get
            {
                return _nameFormat;
            }
            set
            {
                _nameFormat = value;
                NotifyPropertyChanged("NameFormat");

            }
        }
        public string DataFormat
        {
            get
            {
                return _dataFormat;
            }
            set
            {
                _dataFormat = value;
                NotifyPropertyChanged("DataFormat");

            }
        }
        public string URLorIP
        {
            get
            {
                return _uRLorIP;
            }
            set
            {
                _uRLorIP = value;
                NotifyPropertyChanged("URLorIP");

            }
        }
        public string AddInfo
        {
            get
            {
                return _addInfo;
            }
            set
            {
                _addInfo = value;
                NotifyPropertyChanged("AddInfo");

            }
        }
        public string CommEnable
        {
            get
            {
                return _commEnable;
            }
            set
            {
                _commEnable = value;
                NotifyPropertyChanged("CommEnable");

            }
        }
        public string CommIp
        {
            get
            {
                return _commIp;
            }
            set
            {
                _commIp = value;
                NotifyPropertyChanged("CommIp");

            }
        }
        public string CommPort
        {
            get
            {
                return _commPort;
            }
            set
            {
                _commPort = value;
                NotifyPropertyChanged("CommPort");

            }
        }
        public string EncryptType
        {
            get
            {
                return _encryptType;
            }
            set
            {
                _encryptType = value;
                NotifyPropertyChanged("EncryptType");

            }
        }
        public string CacheMax
        {
            get
            {
                return _cacheMax;
            }
            set
            {
                _cacheMax = value;
                NotifyPropertyChanged("CacheMax");

            }
        }
    }

    /// <summary>
    /// 同步状态信息
    /// </summary>
    public class SYNCInfoClass : INotifyPropertyChanged
    {
        private string _status;
        private string _source;
        private string _euarfcn;
        private string _pci;
        public string Status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
                NotifyPropertyChanged("Status");
            }
        }
        public string Source
        {
            get
            {
                return _source;
            }
            set
            {
                _source = value;
                NotifyPropertyChanged("Source");
            }
        }
        public string Euarfcn
        {
            get
            {
                return _euarfcn;
            }
            set
            {
                _euarfcn = value;
                NotifyPropertyChanged("Euarfcn");
            }
        }
        public string PCI
        {
            get
            {
                return _pci;
            }
            set
            {
                _pci = value;
                NotifyPropertyChanged("PCI");
            }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }
    #endregion

    #region LTE设备重启激活

    //属性->重启
    public class LTE_RestartRequestMsg : INotifyPropertyChanged
    {
        private byte reboot;

        public byte Reboot
        {
            get
            {
                return reboot;
            }

            set
            {
                reboot = value;
                NotifyPropertyChanged("reboot");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->激活
    public class LTE_ActiveRequestMsg : INotifyPropertyChanged
    {
        private uint active_mode;
        private uint mode;

        public uint Active_mode
        {
            get
            {
                return active_mode;
            }

            set
            {
                active_mode = value;
                NotifyPropertyChanged("active_mode");
            }
        }

        public uint Mode
        {
            get
            {
                return mode;
            }

            set
            {
                mode = value;
                NotifyPropertyChanged("mode");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->设备管理->设备信息->IP设置
    public class LTE_NetWorkModeSettingMsg : INotifyPropertyChanged
    {
        private byte mode;
        private string staticIP;
        private uint staticPort;

        public byte Mode
        {
            get
            {
                return mode;
            }

            set
            {
                mode = value;
                NotifyPropertyChanged("mode");
            }
        }

        public string StaticIP
        {
            get
            {
                return staticIP;
            }

            set
            {
                staticIP = value;
                NotifyPropertyChanged("staticIP");
            }
        }

        public uint StaticPort
        {
            get
            {
                return staticPort;
            }

            set
            {
                staticPort = value;
                NotifyPropertyChanged("staticPort");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->设备管理->设备信息
    public class LTE_DeviceInfoRequestMsg : INotifyPropertyChanged
    {
        private string domainName;
        private string site;
        private string divceName;
        private uint mode;
        private LTE_NetWorkModeSettingMsg ipSetting;
        private string sn;
        private byte deviceIdentification;

        public string DomainName
        {
            get
            {
                return domainName;
            }

            set
            {
                domainName = value;
                NotifyPropertyChanged("domainName");
            }
        }

        public string Site
        {
            get
            {
                return site;
            }

            set
            {
                site = value;
                NotifyPropertyChanged("site");
            }
        }

        public string DivceName
        {
            get
            {
                return divceName;
            }

            set
            {
                divceName = value;
                NotifyPropertyChanged("divceName");
            }
        }

        public uint Mode
        {
            get
            {
                return mode;
            }

            set
            {
                mode = value;
                NotifyPropertyChanged("mode");
            }
        }

        public LTE_NetWorkModeSettingMsg IpSetting
        {
            get
            {
                return ipSetting;
            }

            set
            {
                ipSetting = value;
                NotifyPropertyChanged("ipSetting");
            }
        }

        public string Sn
        {
            get
            {
                return sn;
            }

            set
            {
                sn = value;
                NotifyPropertyChanged("sn");
            }
        }

        public byte DeviceIdentification
        {
            get
            {
                return deviceIdentification;
            }

            set
            {
                deviceIdentification = value;
                NotifyPropertyChanged("deviceIdentification");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->设备管理->小区信息
    public class LTE_CellinfoRequestMsg : INotifyPropertyChanged
    {
        private int pLMN;
        private int frequency;
        private int bandwidth;
        private short txPower;
        private byte manualFreq;
        private string operators;
        private int scrambledCode;
        private int tACLAC;
        private int periodTac;
        private byte activate_Mode;

        public int PLMN
        {
            get
            {
                return pLMN;
            }

            set
            {
                pLMN = value;
                NotifyPropertyChanged("pLMN");
            }
        }

        public int Frequency
        {
            get
            {
                return frequency;
            }

            set
            {
                frequency = value;
                NotifyPropertyChanged("frequency");
            }
        }

        public int Bandwidth
        {
            get
            {
                return bandwidth;
            }

            set
            {
                bandwidth = value;
                NotifyPropertyChanged("bandwidth");
            }
        }

        public short TxPower
        {
            get
            {
                return txPower;
            }

            set
            {
                txPower = value;
                NotifyPropertyChanged("txPower");
            }
        }

        public byte ManualFreq
        {
            get
            {
                return manualFreq;
            }

            set
            {
                manualFreq = value;
                NotifyPropertyChanged("manualFreq");
            }
        }

        public string Operators
        {
            get
            {
                return operators;
            }

            set
            {
                operators = value;
                NotifyPropertyChanged("operators");
            }
        }

        public int ScrambledCode
        {
            get
            {
                return scrambledCode;
            }

            set
            {
                scrambledCode = value;
                NotifyPropertyChanged("scrambledCode");
            }
        }

        public int TACLAC
        {
            get
            {
                return tACLAC;
            }

            set
            {
                tACLAC = value;
                NotifyPropertyChanged("tACLAC");
            }
        }

        public int PeriodTac
        {
            get
            {
                return periodTac;
            }

            set
            {
                periodTac = value;
                NotifyPropertyChanged("periodTac");
            }
        }

        public byte Activate_Mode
        {
            get
            {
                return activate_Mode;
            }

            set
            {
                activate_Mode = value;
                NotifyPropertyChanged("activate_Mode");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->设备管理->高级设置->扫频频点
    public class LTE_SetEarfcnRequestMsg : INotifyPropertyChanged
    {
        private string earfcn;

        public string Earfcn
        {
            get
            {
                return earfcn;
            }

            set
            {
                earfcn = value;
                NotifyPropertyChanged("earfcn");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->设备管理->高级设置->频偏/GPS ON/OFF
    public class LTE_GPSSettingRequestMsg : INotifyPropertyChanged
    {
        private byte enable;
        private string frequencyOffset;

        public byte Enable
        {
            get
            {
                return enable;
            }

            set
            {
                enable = value;
                NotifyPropertyChanged("enable");
            }
        }

        public string FrequencyOffset
        {
            get
            {
                return frequencyOffset;
            }

            set
            {
                frequencyOffset = value;
                NotifyPropertyChanged("frequencyOffset");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->设备管理->高级设置->NTP设置
    public class LTE_NTPSettingRequestMsg : INotifyPropertyChanged
    {
        private string ip;
        private int level;

        public string Ip
        {
            get
            {
                return ip;
            }

            set
            {
                ip = value;
                NotifyPropertyChanged("ip");
            }
        }

        public int Level
        {
            get
            {
                return level;
            }

            set
            {
                level = value;
                NotifyPropertyChanged("level");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->设备管理->高级设置->同步源/指定小区
    public class LTE_SyncInfoSetRequestMsg : INotifyPropertyChanged
    {
        private byte cNMSyncpriority;
        private byte cell;
        private string cellList;

        public byte CNMSyncpriority
        {
            get
            {
                return cNMSyncpriority;
            }

            set
            {
                cNMSyncpriority = value;
                NotifyPropertyChanged("cNMSyncpriority");
            }
        }

        public byte Cell
        {
            get
            {
                return cell;
            }

            set
            {
                cell = value;
                NotifyPropertyChanged("cell");
            }
        }

        public string CellList
        {
            get
            {
                return cellList;
            }

            set
            {
                cellList = value;
                NotifyPropertyChanged("cellList");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->设备管理->高级设置->生效时间
    public class LTE_TimeSettingRequestMsg : INotifyPropertyChanged
    {
        private string timeStart;
        private string timeEnd;

        public string TimeStart
        {
            get
            {
                return timeStart;
            }

            set
            {
                timeStart = value;
                NotifyPropertyChanged("timeStart");
            }
        }

        public string TimeEnd
        {
            get
            {
                return timeEnd;
            }

            set
            {
                timeEnd = value;
                NotifyPropertyChanged("timeEnd");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->设备管理->统统维护->系统升级
    public class LTE_SystemUpgradeRequestMsg : INotifyPropertyChanged
    {
        private string filename;

        public string Filename
        {
            get
            {
                return filename;
            }

            set
            {
                filename = value;
                NotifyPropertyChanged("filename");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->设备管理->统统维护->Log文件下载
    public class LTE_LogFileDownLoadRequestMsg : INotifyPropertyChanged
    {
        private string logfilename;

        public string Logfilename
        {
            get
            {
                return logfilename;
            }

            set
            {
                logfilename = value;
                NotifyPropertyChanged("logfilename");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->设备管理->工程设置
    public class LTE_ProjectSettingRequestMsg : INotifyPropertyChanged
    {
        private string paraName;
        private string paraValue;
        private string command;

        public string ParaName
        {
            get
            {
                return paraName;
            }

            set
            {
                paraName = value;
                NotifyPropertyChanged("paraName");
            }
        }

        public string Value
        {
            get
            {
                return paraValue;
            }

            set
            {
                paraValue = value;
                NotifyPropertyChanged("paraValue");
            }
        }

        public string Command
        {
            get
            {
                return command;
            }

            set
            {
                command = value;
                NotifyPropertyChanged("command");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //属性->扫频结果
    public class LTE_ScannerInformation : INotifyPropertyChanged
    {
        private string cellID;
        private string PLMN;
        private string frequency;
        private string scramblingCode;
        private string tAC_LAC;
        private string intensity;
        private string cellNeighInfo;
        private string cellNeighLevel;
        private string level;
        private DataTable scannerInforTable = null;
        private object scannernock = null;
        public LTE_ScannerInformation()
        {
            if (ScannerInforTable == null)
            {
                ScannerInforTable = new DataTable();

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "CellID";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "PLMN";

                DataColumn Column2 = new DataColumn();
                Column2.DataType = System.Type.GetType("System.String");
                Column2.ColumnName = "Frequency";

                DataColumn Column3 = new DataColumn();
                Column3.DataType = System.Type.GetType("System.String");
                Column3.ColumnName = "ScramblingCode";

                DataColumn Column4 = new DataColumn();
                Column4.DataType = System.Type.GetType("System.String");
                Column4.ColumnName = "tAC_LAC";

                DataColumn Column5 = new DataColumn();
                Column5.DataType = System.Type.GetType("System.String");
                Column5.ColumnName = "Intensity";

                DataColumn Column6 = new DataColumn();
                Column6.DataType = System.Type.GetType("System.String");
                Column6.ColumnName = "CellNeighInfo";

                DataColumn Column7 = new DataColumn();
                Column7.DataType = System.Type.GetType("System.String");
                Column7.ColumnName = "CellNeighLevel";

                DataColumn Column8 = new DataColumn();
                Column8.DataType = System.Type.GetType("System.String");
                Column8.ColumnName = "Level";

                DataColumn Column9 = new DataColumn();
                Column9.DataType = System.Type.GetType("System.String");
                Column9.ColumnName = "FullName";

                ScannerInforTable.Columns.Add(Column0);
                ScannerInforTable.Columns.Add(Column1);
                ScannerInforTable.Columns.Add(Column2);
                ScannerInforTable.Columns.Add(Column3);
                ScannerInforTable.Columns.Add(Column4);
                ScannerInforTable.Columns.Add(Column5);
                ScannerInforTable.Columns.Add(Column6);
                ScannerInforTable.Columns.Add(Column7);
                ScannerInforTable.Columns.Add(Column8);
                ScannerInforTable.Columns.Add(Column9);
            }
            if (Scannernock == null)
            {
                Scannernock = new object();
            }
        }
        public void ScannerInput(string CellID, string PLMN, string Frequency, string ScramblingCode, string LAC, string Intensity, string CellNeighInfo, string CellNeighLevel, string Level, string FullName)
        {
            lock (Scannernock)
            {
                DataRow dr = ScannerInforTable.NewRow();
                dr[0] = CellID;
                dr[1] = PLMN;
                dr[2] = Frequency;
                dr[3] = ScramblingCode;
                dr[4] = LAC;
                dr[5] = Intensity;
                dr[6] = CellNeighInfo;
                dr[7] = CellNeighLevel;
                dr[8] = Level;
                dr[9] = FullName;
                ScannerInforTable.Rows.Add(dr);
            }
        }
        public DataTable ScannerInforTable
        {
            get
            {
                return scannerInforTable;
            }

            set
            {
                scannerInforTable = value;
                NotifyPropertyChanged("scannerInforTable");
            }
        }
        public string CellID
        {
            get
            {
                return cellID;
            }

            set
            {
                cellID = value;
            }
        }

        public string PLMN1
        {
            get
            {
                return PLMN;
            }

            set
            {
                PLMN = value;
            }
        }

        public string Frequency
        {
            get
            {
                return frequency;
            }

            set
            {
                frequency = value;
            }
        }

        public string ScramblingCode
        {
            get
            {
                return scramblingCode;
            }

            set
            {
                scramblingCode = value;
            }
        }

        public string TAC_LAC
        {
            get
            {
                return tAC_LAC;
            }

            set
            {
                tAC_LAC = value;
            }
        }

        public string Intensity
        {
            get
            {
                return intensity;
            }

            set
            {
                intensity = value;
            }
        }

        public string CellNeighInfo
        {
            get
            {
                return cellNeighInfo;
            }

            set
            {
                cellNeighInfo = value;
            }
        }
        public string CellNeighLevel
        {
            get
            {
                return cellNeighLevel;
            }

            set
            {
                cellNeighLevel = value;
            }
        }

        public string Level
        {
            get
            {
                return level;
            }

            set
            {
                level = value;
            }
        }

        public object Scannernock
        {
            get
            {
                return scannernock;
            }
            set
            {
                scannernock = value;
            }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    //TDS属性->扫频结果
    public class TDS_ScannerInformation : INotifyPropertyChanged
    {
        private string cellID;
        private string uARFCN;
        private string rSCP;
        private string rSSI;
        private string lAC;
        private string cI;
        private DataTable scannerInforTable = null;
        private object scannernock = null;
        public TDS_ScannerInformation()
        {
            if (ScannerInforTable == null)
            {
                ScannerInforTable = new DataTable();

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "CellID";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "UARFCN";

                DataColumn Column2 = new DataColumn();
                Column2.DataType = System.Type.GetType("System.String");
                Column2.ColumnName = "RSCP";

                DataColumn Column3 = new DataColumn();
                Column3.DataType = System.Type.GetType("System.String");
                Column3.ColumnName = "RSSI";

                DataColumn Column4 = new DataColumn();
                Column4.DataType = System.Type.GetType("System.String");
                Column4.ColumnName = "LAC";

                DataColumn Column5 = new DataColumn();
                Column5.DataType = System.Type.GetType("System.String");
                Column5.ColumnName = "CI";

                DataColumn Column6 = new DataColumn();
                Column6.DataType = System.Type.GetType("System.String");
                Column6.ColumnName = "FullName";

                ScannerInforTable.Columns.Add(Column0);
                ScannerInforTable.Columns.Add(Column1);
                ScannerInforTable.Columns.Add(Column2);
                ScannerInforTable.Columns.Add(Column3);
                ScannerInforTable.Columns.Add(Column4);
                ScannerInforTable.Columns.Add(Column5);
                ScannerInforTable.Columns.Add(Column6);
            }
            if (Scannernock == null)
            {
                Scannernock = new object();
            }
        }
        public void ScannerInput(string CellID, string UARFCN, string RSCP, string RSSI, string LAC, string CI, string FullName)
        {
            lock (Scannernock)
            {
                DataRow dr = ScannerInforTable.NewRow();
                dr[0] = CellID;
                dr[1] = UARFCN;
                dr[2] = RSCP;
                dr[3] = RSSI;
                dr[4] = LAC;
                dr[5] = CI;
                dr[6] = FullName;
                ScannerInforTable.Rows.Add(dr);
            }
        }
        public DataTable ScannerInforTable
        {
            get
            {
                return scannerInforTable;
            }

            set
            {
                scannerInforTable = value;
                NotifyPropertyChanged("scannerInforTable");
            }
        }
        public string CellID
        {
            get
            {
                return cellID;
            }

            set
            {
                cellID = value;
                NotifyPropertyChanged("CellID");
            }
        }

        public string UARFCN
        {
            get
            {
                return uARFCN;
            }

            set
            {
                uARFCN = value;
                NotifyPropertyChanged("UARFCN");
            }
        }

        public string RSCP
        {
            get
            {
                return rSCP;
            }

            set
            {
                rSCP = value;
                NotifyPropertyChanged("RSCP");
            }
        }

        public string RSSI
        {
            get
            {
                return rSSI;
            }

            set
            {
                rSSI = value;
                NotifyPropertyChanged("RSSI");
            }
        }

        public string LAC
        {
            get
            {
                return lAC;
            }

            set
            {
                lAC = value;
                NotifyPropertyChanged("LAC");
            }
        }

        public string CI
        {
            get
            {
                return cI;
            }

            set
            {
                cI = value;
                NotifyPropertyChanged("CI");
            }
        }

        public object Scannernock
        {
            get
            {
                return scannernock;
            }
            set
            {
                scannernock = value;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    #endregion

    #region 属性->设备详细信息
    /// <summary>
    ///  LTE(电信，移动)
    /// </summary>
    public class LTEDeviceDetailClass : INotifyPropertyChanged
    {
        private string deviceNameInfo;
        private string pLMNInfo;
        private string freqPCIInfo;
        private string cellStatusInfo;
        private string scannerStatusInfo;
        private string gPSStatusInfo;
        private string gPSDetailInfo;
        private string syncStatusInfo;
        private string syncSourceInfo;
        private string command;
        private string licenseStatusInfo;
        private string versionInfo;
        private string source;
        private string apReadySt;
        private string alignStatusInfo;

        public string DeviceNameInfo
        {
            get
            {
                return deviceNameInfo;
            }

            set
            {
                deviceNameInfo = value;
                NotifyPropertyChanged("deviceNameInfo");
            }
        }

        public string PLMNInfo
        {
            get
            {
                return pLMNInfo;
            }

            set
            {
                pLMNInfo = value;
                NotifyPropertyChanged("pLMNInfo");
            }
        }

        public string FreqPCIInfo
        {
            get
            {
                return freqPCIInfo;
            }

            set
            {
                freqPCIInfo = value;
                NotifyPropertyChanged("freqPCIInfo");
            }
        }

        public string CellStatusInfo
        {
            get
            {
                return cellStatusInfo;
            }

            set
            {
                cellStatusInfo = value;
                NotifyPropertyChanged("cellStatusInfo");
            }
        }

        public string ScannerStatusInfo
        {
            get
            {
                return scannerStatusInfo;
            }

            set
            {
                scannerStatusInfo = value;
                NotifyPropertyChanged("scannerStatusInfo");
            }
        }

        public string GPSStatusInfo
        {
            get
            {
                return gPSStatusInfo;
            }

            set
            {
                gPSStatusInfo = value;
                NotifyPropertyChanged("gPSStatusInfo");
            }
        }

        public string GPSDetailInfo
        {
            get
            {
                return gPSDetailInfo;
            }

            set
            {
                gPSDetailInfo = value;
                NotifyPropertyChanged("gPSDetailInfo");
            }
        }

        public string SyncStatusInfo
        {
            get
            {
                return syncStatusInfo;
            }

            set
            {
                syncStatusInfo = value;
                NotifyPropertyChanged("syncStatusInfo");
            }
        }

        public string SyncSourceInfo
        {
            get
            {
                return syncSourceInfo;
            }

            set
            {
                syncSourceInfo = value;
                NotifyPropertyChanged("syncSourceInfo");
            }
        }

        public string LicenseStatusInfo
        {
            get
            {
                return licenseStatusInfo;
            }

            set
            {
                licenseStatusInfo = value;
                NotifyPropertyChanged("licenseStatusInfo");
            }
        }

        public string VersionInfo
        {
            get
            {
                return versionInfo;
            }

            set
            {
                versionInfo = value;
                NotifyPropertyChanged("VersionInfo");
            }
        }

        public string Command
        {
            get
            {
                return command;
            }

            set
            {
                command = value;
                NotifyPropertyChanged("Command");
            }
        }

        public string Source
        {
            get
            {
                return source;
            }

            set
            {
                source = value;
                NotifyPropertyChanged("Source");
            }
        }

        public string ApReadySt
        {
            get
            {
                return apReadySt;
            }

            set
            {
                apReadySt = value;
                NotifyPropertyChanged("ApReadySt");
            }
        }

        public string AlignStatusInfo
        {
            get
            {
                return alignStatusInfo;
            }

            set
            {
                alignStatusInfo = value;
                NotifyPropertyChanged("AlignStatusInfo");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    /// <summary>
    /// WCDMA(联通)
    /// </summary>
    public class WCDMADeviceDetailClass : LTEDeviceDetailClass
    {

    }

    /// <summary>
    ///  CDMA设备详细信息
    /// </summary>
    public class CDMADeviceDetailClass : WCDMADeviceDetailClass
    {

    }

    /// <summary>
    /// TDS(移动)
    /// </summary>
    public class TDSDeviceDetailClass : CDMADeviceDetailClass
    {

    }

    /// <summary>
    /// GSMV2(移动)
    /// </summary>
    public class GSMADeviceDetailClass : TDSDeviceDetailClass
    {

    }
    /// <summary>
    /// GSMV2设备详细信息
    /// </summary>
    public class GSMV2DeviceDetailClass : GSMADeviceDetailClass
    {

    }
    #endregion

    #region 登录请求信息
    public class LoginRequestMsg
    {
        private string userName;
        private string passWord;

        public string UserName
        {
            get
            {
                return userName;
            }

            set
            {
                userName = value;
            }
        }

        public string PassWord
        {
            get
            {
                return passWord;
            }

            set
            {
                passWord = value;
            }
        }
    }
    #endregion

    #region 用户登录系统成功返回信息 
    public class LoginedInfo
    {
        private string loginUser;
        private string workGroup;
        private string loginTime;
        private string loginHost;
        private string loginPort;

        private string loginAccess;
        private string information;
        private string[] domainLists;
        private string[] funLists;

        public string LoginUser
        {
            get
            {
                return loginUser;
            }

            set
            {
                loginUser = value;
            }
        }

        public string WorkGroup
        {
            get
            {
                return workGroup;
            }

            set
            {
                workGroup = value;
            }
        }

        public string LoginTime
        {
            get
            {
                return loginTime;
            }

            set
            {
                loginTime = value;
            }
        }

        public string LoginHost
        {
            get
            {
                return loginHost;
            }

            set
            {
                loginHost = value;
            }
        }

        public string LoginPort
        {
            get
            {
                return loginPort;
            }

            set
            {
                loginPort = value;
            }
        }

        public string LoginAccess
        {
            get
            {
                return loginAccess;
            }

            set
            {
                loginAccess = value;
            }
        }

        public string Information
        {
            get
            {
                return information;
            }

            set
            {
                information = value;
            }
        }

        public string[] DomainLists
        {
            get
            {
                return domainLists;
            }

            set
            {
                domainLists = value;
            }
        }

        public string[] FunLists
        {
            get
            {
                return funLists;
            }

            set
            {
                funLists = value;
            }
        }
    }
    #endregion

    #region 正常设备列表
    public enum NodeType
    {
        RootNode,       //根节点
        LeafNode,       //叶子节点
        StructureNode,  //结构节点，仅起到组织配置文件结构的作用，不参与修改
        StationNode     //站点节点
    }

    /// <summary>
    /// 设备树图标
    /// </summary>
    public class NodeIcon : INotifyPropertyChanged
    {
        private string _rootNodeCloseIcon = @"..\Icon\mycomputer.png";
        private string _structureCloseNodeIcon = @"..\Icon\dmdskres_00012.ico";
        private string _structureOpenNodeIcon = @"..\Icon\dmdskres_00013.ico";
        private string _stationNodeIcon = @"..\Icon\wifi.png";
        private string _leafAllReadyNodeIcon = @"..\Icon\ActionCenterCPL_00002.ico";
        private string _leafNoActiveNodeIcon = @"..\Icon\ActionCenterCPL_00003.ico";
        private string _leafNoConnectNodeIcon = @"..\Icon\ActionCenterCPL_00004.ico";
        private string _carrier_One_ActiveIcon = @"..\Icon\Carrier1.ico";
        private string _carrier_Two_ActiveIcon = @"..\Icon\Carrier2.ico";
        private string _errorNodeIcon = @"..\Icon\no.png";
        //未对齐
        private string _alignAlertIcon = @"..\Icon\alert.png";
        //高温告警
        private string _tmpAlertIcon = @"..\Icon\HeightTmp.png";

        public string RootNodeCloseIcon
        {
            get
            {
                return _rootNodeCloseIcon;
            }

            set
            {
                _rootNodeCloseIcon = value;
                NotifyPropertyChanged("RootNodeCloseIcon");
            }
        }

        public string StructureCloseNodeIcon
        {
            get
            {
                return _structureCloseNodeIcon;
            }

            set
            {
                _structureCloseNodeIcon = value;
                NotifyPropertyChanged("StructureCloseNodeIcon");
            }
        }

        public string StructureOpenNodeIcon
        {
            get
            {
                return _structureOpenNodeIcon;
            }

            set
            {
                _structureOpenNodeIcon = value;
                NotifyPropertyChanged("StructureOpenNodeIcon");
            }
        }

        public string StationNodeIcon
        {
            get
            {
                return _stationNodeIcon;
            }

            set
            {
                _stationNodeIcon = value;
                NotifyPropertyChanged("StationNodeIcon");
            }
        }

        public string LeafAllReadyNodeIcon
        {
            get
            {
                return _leafAllReadyNodeIcon;
            }

            set
            {
                _leafAllReadyNodeIcon = value;
                NotifyPropertyChanged("LeafAllReadyNodeIcon");
            }
        }

        public string LeafNoActiveNodeIcon
        {
            get
            {
                return _leafNoActiveNodeIcon;
            }

            set
            {
                _leafNoActiveNodeIcon = value;
                NotifyPropertyChanged("LeafNoActiveNodeIcon");
            }
        }

        public string LeafNoConnectNodeIcon
        {
            get
            {
                return _leafNoConnectNodeIcon;
            }

            set
            {
                _leafNoConnectNodeIcon = value;
                NotifyPropertyChanged("LeafNoConnectNodeIcon");
            }
        }

        public string Carrier_One_ActiveIcon
        {
            get
            {
                return _carrier_One_ActiveIcon;
            }

            set
            {
                _carrier_One_ActiveIcon = value;
                NotifyPropertyChanged("Carrier_One_ActiveIcon");
            }
        }

        public string Carrier_Two_ActiveIcon
        {
            get
            {
                return _carrier_Two_ActiveIcon;
            }

            set
            {
                _carrier_Two_ActiveIcon = value;
                NotifyPropertyChanged("Carrier_Two_ActiveIcon");
            }
        }

        public string AlignAlertIcon
        {
            get
            {
                return _alignAlertIcon;
            }

            set
            {
                _alignAlertIcon = value;
                NotifyPropertyChanged("AlignAlertIcon");
            }
        }

        public string TmpAlertIcon
        {
            get
            {
                return _tmpAlertIcon;
            }

            set
            {
                _tmpAlertIcon = value;
                NotifyPropertyChanged("TmpAlertIcon");
            }
        }

        public string ErrorNodeIcon
        {
            get
            {
                return _errorNodeIcon;
            }

            set
            {
                _errorNodeIcon = value;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    public class Node : INotifyPropertyChanged
    {
        private int selfID;
        private int parentID;
        private string nodeName;
        private string nodeContent;
        private bool isDeleted;
        private bool online;
        private bool permission;
        private string workStatus;
        private NodeType nodeType;
        private string nodeIcon;
        private string des;
        private List<Node> nodes;

        /// <summary>
        /// 节点ID
        /// </summary>
        public int SelfID
        {
            get
            {
                return selfID;
            }

            set
            {
                selfID = value;
            }
        }

        /// <summary>
        /// 父节点
        /// </summary>
        public int ParentID
        {
            get
            {
                return parentID;
            }

            set
            {
                parentID = value;
            }
        }

        /// <summary>
        ///  节点名称
        /// </summary>
        public string NodeName
        {
            get
            {
                return nodeName;
            }

            set
            {
                nodeName = value;
                NotifyPropertyChanged("nodeName");
            }
        }

        /// <summary>
        /// 节点携带的内容
        /// </summary>
        public string NodeContent
        {
            get
            {
                return nodeContent;
            }

            set
            {
                nodeContent = value;
                NotifyPropertyChanged("nodeContent");
            }
        }

        /// <summary>
        /// 被删除
        /// </summary>
        public bool IsDeleted
        {
            get
            {
                return isDeleted;
            }

            set
            {
                isDeleted = value;
                NotifyPropertyChanged("isDeleted");
            }
        }

        /// <summary>
        /// 节点类型
        /// </summary>
        public NodeType NodeType
        {
            get
            {
                return nodeType;
            }

            set
            {
                nodeType = value;
                NotifyPropertyChanged("nodeType");
            }
        }

        /// <summary>
        /// 节点图标
        /// </summary>
        public string NodeIcon
        {
            get
            {
                return nodeIcon;
            }

            set
            {
                nodeIcon = value;
                NotifyPropertyChanged("nodeIcon");
            }
        }

        /// <summary>
        /// 子节点集合
        /// </summary>
        public List<Node> Nodes
        {
            get
            {
                return nodes;
            }

            set
            {
                nodes = value;
                NotifyPropertyChanged("nodes");
            }
        }

        //设备是否在线
        public bool Online
        {
            get
            {
                return online;
            }

            set
            {
                online = value;
                NotifyPropertyChanged("online");
            }
        }

        /// <summary>
        /// 用户权限
        /// </summary>
        public bool Permission
        {
            get
            {
                return permission;
            }

            set
            {
                permission = value;
                NotifyPropertyChanged("permission");
            }
        }

        /// <summary>
        /// 工作状态
        /// </summary>
        public string WorkStatus
        {
            get
            {
                return workStatus;
            }

            set
            {
                workStatus = value;
                NotifyPropertyChanged("workStatus");
            }
        }

        public string Des
        {
            get
            {
                return des;
            }

            set
            {
                des = value;
                NotifyPropertyChanged("Des");
            }
        }

        public Node()
        {
            this.IsDeleted = false;
            this.Nodes = new List<Node>();
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    public class DeviceNodeListsClass : INotifyPropertyChanged
    {
        private List<Node> deviceTreeView;
        public DeviceNodeListsClass()
        {
            deviceTreeView = new List<Node>();
        }

        public List<Node> DeviceTreeView
        {
            get
            {
                return deviceTreeView;
            }

            set
            {
                deviceTreeView = value;
                NotifyPropertyChanged("deviceTreeView");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    /// <summary>
    /// 邦定设备树类
    /// </summary>
    public class BindTreeView : INotifyPropertyChanged
    {
        private string returnCode;
        private string returnStr;
        private string nodeCount;
        private DataTable deviceTreeTable = null;
        private TreeView deviceTreeView = null;
        private object devicesTableLock = null;

        /// <summary>
        /// 构造
        /// </summary>
        public BindTreeView()
        {
            if (DeviceTreeTable == null)
            {
                DeviceTreeTable = new DataTable("DevicesTreeView");

                DataView DV = new DataView(DeviceTreeTable);

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "PathName";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.Int32");
                Column1.ColumnName = "SelfID";

                DataColumn Column2 = new DataColumn();
                Column2.DataType = System.Type.GetType("System.String");
                Column2.ColumnName = "SelfName";

                DataColumn Column3 = new DataColumn();
                Column3.DataType = System.Type.GetType("System.Int32");
                Column3.ColumnName = "ParentID";

                DataColumn Column4 = new DataColumn();
                Column4.DataType = System.Type.GetType("System.Int32");
                Column4.ColumnName = "IsStation";

                DataColumn Column5 = new DataColumn();
                Column5.DataType = System.Type.GetType("System.String");
                Column5.ColumnName = "NodeContent";

                DataColumn Column6 = new DataColumn();
                Column6.DataType = System.Type.GetType("System.Boolean");
                Column6.ColumnName = "IsDeleted";

                DataColumn Column7 = new DataColumn();
                Column7.DataType = System.Type.GetType("System.String");
                Column7.ColumnName = "Permission";

                DataColumn Column8 = new DataColumn();
                Column8.DataType = System.Type.GetType("System.String");
                Column8.ColumnName = "NodeType";

                DataColumn Column9 = new DataColumn();
                Column9.DataType = System.Type.GetType("System.String");
                Column9.ColumnName = "NodeIcon";

                DataColumn Column10 = new DataColumn();
                Column10.DataType = System.Type.GetType("System.String");
                Column10.ColumnName = "CarrierStatus";

                DataColumn Column11 = new DataColumn();
                Column11.DataType = System.Type.GetType("System.String");
                Column11.ColumnName = "des";

                DeviceTreeTable.Columns.Add(Column0);
                DeviceTreeTable.Columns.Add(Column1);
                DeviceTreeTable.Columns.Add(Column2);
                DeviceTreeTable.Columns.Add(Column3);
                DeviceTreeTable.Columns.Add(Column4);
                DeviceTreeTable.Columns.Add(Column5);
                DeviceTreeTable.Columns.Add(Column6);
                DeviceTreeTable.Columns.Add(Column7);
                DeviceTreeTable.Columns.Add(Column8);
                DeviceTreeTable.Columns.Add(Column9);
                DeviceTreeTable.Columns.Add(Column10);
                DeviceTreeTable.Columns.Add(Column11);

                //属性在APAtributes类中
            }

            if (DeviceTreeView == null)
            {
                DeviceTreeView = new TreeView();
            }

            if (DevicesTableLock == null)
            {
                DevicesTableLock = new object();
            }
        }

        public void InitializationParameter()
        {

        }
        public DataTable DeviceTreeTable
        {
            get
            {
                return deviceTreeTable;
            }

            set
            {
                deviceTreeTable = value;
                NotifyPropertyChanged("deviceTreeTable");
            }
        }

        public TreeView DeviceTreeView
        {
            get
            {
                return deviceTreeView;
            }

            set
            {
                deviceTreeView = value;
                NotifyPropertyChanged("deviceTreeView");
            }
        }

        public string ReturnCode
        {
            get
            {
                return returnCode;
            }

            set
            {
                returnCode = value;
                NotifyPropertyChanged("returnCode");
            }
        }

        public string ReturnStr
        {
            get
            {
                return returnStr;
            }

            set
            {
                returnStr = value;
                NotifyPropertyChanged("returnStr");
            }
        }

        public string NodeCount
        {
            get
            {
                return nodeCount;
            }

            set
            {
                nodeCount = value;
                NotifyPropertyChanged("nodeCount");
            }
        }

        public object DevicesTableLock
        {
            get
            {
                return devicesTableLock;
            }

            set
            {
                devicesTableLock = value;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }

        public void TreeViewBind(System.Windows.Controls.TreeView ATreeView)
        {
            if (ATreeView == null)
            {
                return;
            }
            ATreeView.Items.Clear();//先清理一下节点

            if (DeviceTreeTable != null || DeviceTreeTable.Rows.Count > 0)   //判断一线有没有数据
            {
                //首先遍历父节点
                TreeViewItem item;                                            //wpf不再是节点了  改成item 其实是一样的
                DataRow[] dr = DeviceTreeTable.Select("ParentID='-1'");       //判断（父节点的值）这个是定义好的要根据
                                                                              // 这个读父节点的 
                if (dr.Length != 0)
                {
                    foreach (DataRow drTemp in dr)
                    {
                        item = new TreeViewItem();
                        item.Tag = drTemp["SelfID"].ToString();              //一般绑定ID
                        item.Header = drTemp["SelfName"].ToString();         //名称  
                        ATreeView.Items.Add(item);
                        item.IsExpanded = true;
                        BindNode(item);
                    }
                }
            }
        }

        public void TreeViewBind(ref System.Windows.Controls.TreeView ATreeView)
        {
            if (ATreeView == null)
            {
                return;
            }

            ATreeView.Items.Clear();//先清理一下节点

            if (DeviceTreeTable != null || DeviceTreeTable.Rows.Count > 0)   //判断一线有没有数据
            {
                //首先遍历父节点
                TreeViewItem item;                                           //wpf不再是节点了  改成item 其实是一样的
                DataRow[] dr = DeviceTreeTable.Select("ParentID='-1'");       //判断（父节点的值）这个是定义好的要根据
                                                                              // 这个读父节点的 
                if (dr.Length != 0)
                {
                    foreach (DataRow drTemp in dr)
                    {
                        item = new TreeViewItem();
                        item.Tag = drTemp["SelfID"].ToString();              //一般绑定ID
                        item.Header = drTemp["SelfName"].ToString();         //名称  
                        ATreeView.Items.Add(item);
                        item.IsExpanded = true;
                        BindNode(item);
                    }
                }
            }
        }

        /// <summary>
        /// 遍历所有的子节点
        /// </summary>
        /// <param name="item">父节点的item</param>
        private void BindNode(TreeViewItem item)
        {
            DataRow[] dr = DeviceTreeTable.Select("ParentID = '" + item.Tag + "'"); //查询子节点条件
            if (dr.Length > 0)
            {
                foreach (DataRow drTemp in dr)
                {
                    TreeViewItem childItem = new TreeViewItem();
                    childItem.Header = drTemp["SelfName"].ToString();
                    childItem.Tag = drTemp["SelfID"].ToString();
                    item.Items.Add(childItem);
                    item.IsExpanded = true;
                    BindNode(childItem);
                }
            }
        }
    }
    #endregion

    #region 数据缓存
    public class DataCaching
    {
        private MsgStruct.InterModuleMsgStruct resultJsonData;
        private string remoteHost;
        private int remotePort;
        private object lockObject = null;

        public DataCaching()
        {
            if (LockObject == null)
            {
                LockObject = new object();
            }
        }

        public MsgStruct.InterModuleMsgStruct ResultJsonData
        {
            get
            {
                return resultJsonData;
            }

            set
            {
                resultJsonData = value;
            }
        }

        public string RemoteHost
        {
            get
            {
                return remoteHost;
            }

            set
            {
                remoteHost = value;
            }
        }

        public int RemotePort
        {
            get
            {
                return remotePort;
            }

            set
            {
                remotePort = value;
            }
        }

        public object LockObject
        {
            get
            {
                return lockObject;
            }

            set
            {
                lockObject = value;
            }
        }
    }
    #endregion

    #region 用户管理
    public class RoleManage
    {
        private string name;
        private string roleType;
        private string timeStart;
        private string timeEnd;
        private string des;
        private string isRead;
        private string isWrite;
        private string aliasName;
        public string Name
        {
            get { return name; }
            set
            {
                name = value;
            }
        }
        public string RoleType
        {
            get { return roleType; }
            set { roleType = value; }
        }
        public string TimeStart
        {
            get { return timeStart; }
            set { timeStart = value; }
        }
        public string TimeEnd
        {
            get { return timeEnd; }
            set { timeEnd = value; }
        }
        public string Des
        {
            get { return des; }
            set { des = value; }
        }
        public string IsRead
        {
            get { return isRead; }
            set { isRead = value; }
        }
        public string IsWrite
        {
            get { return isWrite; }
            set { isWrite = value; }
        }
        public string AliasName
        {
            get { return aliasName; }
            set { aliasName = value; }
        }

    } //用户组
    public class UserManage : INotifyPropertyChanged
    {
        private string name;
        private string roleType;
        private string password;
        private string des;
        private string buildName;
        private string domainIdSet;

        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }
        public string RoleType
        {
            get { return roleType; }
            set { roleType = value; }
        }
        public string Password
        {
            get { return password; }
            set { password = value; }
        }
        public string Des
        {
            get { return des; }
            set { des = value; }
        }
        public string BuildName
        {
            get { return buildName; }
            set { buildName = value; }
        }
        public string DomainIdSet
        {
            get { return domainIdSet; }
            set { domainIdSet = value; }
        }

    }  //用户
    public class RoletypeManage : INotifyPropertyChanged
    {
        private string returnCode;
        private string returnStr;
        private string typeCount;
        private List<string> roleType;
        private List<string> des;

        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
        public string ReturnCode
        {
            get { return returnCode; }
            set { returnCode = value; }
        }
        public string ReturnStr
        {
            get { return returnStr; }
            set { returnStr = value; }
        }
        public string TypeCount
        {
            get { return typeCount; }
            set { typeCount = value; }
        }
        public List<string> RoleType
        {
            get { return roleType; }
            set { roleType = value; }
        }
        public List<string> Des
        {
            get { return des; }
            set { des = value; }
        }
    }  //用户类型
    public class UsergroupManage : INotifyPropertyChanged
    {
        private string userName;
        private string roleName;
        private string des;
        private string manufacturer;
        private DataTable usergroupTable = null;

        public UsergroupManage()
        {
            if (UsergroupTable == null)
            {
                UsergroupTable = new DataTable("UsergroupTable");

                DataColumn dc1 = new DataColumn("user_UserName");
                DataColumn dc2 = new DataColumn("user_UserGroup");
                DataColumn dc3 = new DataColumn("user_Password");
                DataColumn dc4 = new DataColumn("user_Alias");
                DataColumn dc5 = new DataColumn("user_Manufacturer");

                UsergroupTable.Columns.Add(dc1);
                UsergroupTable.Columns.Add(dc2);
                UsergroupTable.Columns.Add(dc3);
                UsergroupTable.Columns.Add(dc4);
                UsergroupTable.Columns.Add(dc5);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
        public DataTable UsergroupTable
        {
            get
            {
                return usergroupTable;
            }

            set
            {
                usergroupTable = value;
                NotifyPropertyChanged("usergroupTable");
            }
        }
        public string UserName
        {
            get { return userName; }
            set { userName = value; }
        }
        public string RoleName
        {
            get { return roleName; }
            set { roleName = value; }
        }
        public string Des
        {
            get { return des; }
            set { des = value; }
        }
        public string Manufacturer
        {
            get { return manufacturer; }
            set { manufacturer = value; }
        }

    }  //用户-用户组
    public class GroupprivilegeManage
    {
        private string groupName;
        private string priIdSet;
        private string des;
        public string GroupName
        {
            get { return groupName; }
            set { groupName = value; }
        }
        public string PriIdSet
        {
            get { return priIdSet; }
            set { priIdSet = value; }
        }
        public string Des
        {
            get { return des; }
            set { des = value; }
        }
    }  //用户组-权限
    public class PrivilegeManage : INotifyPropertyChanged
    {
        private string priId;
        private string funName;
        private string aliasName;
        private string des;
        private DataTable privilegeTable = null;
        private TreeView treeItemsView = null;
        public PrivilegeManage()
        {
            if (PrivilegeTable == null)
            {
                PrivilegeTable = new DataTable("treeItemsView");
                DataColumn dc1 = new DataColumn("priId");
                DataColumn dc2 = new DataColumn("funName");
                DataColumn dc3 = new DataColumn("aliasName");
                DataColumn dc4 = new DataColumn("des");

                PrivilegeTable.Columns.Add(dc1);
                PrivilegeTable.Columns.Add(dc2);
                PrivilegeTable.Columns.Add(dc3);
                PrivilegeTable.Columns.Add(dc4);
            }
            if (TreeItemsView == null)
            {
                TreeItemsView = new TreeView();
            }
        }
        public TreeView TreeItemsView
        {
            get { return treeItemsView; }
            set
            {
                treeItemsView = value;
                NotifyPropertyChanged("treeItemsView");
            }
        }
        public DataTable PrivilegeTable
        {
            get { return privilegeTable; }
            set
            {
                privilegeTable = value;
                NotifyPropertyChanged("privilegeTable");
            }
        }

        public string PriId
        {
            get { return priId; }
            set { priId = value; }
        }
        public string FunName
        {
            get { return funName; }
            set { funName = value; }
        }
        public string AliasName
        {
            get { return aliasName; }
            set { aliasName = value; }
        }
        public string Des
        {
            get { return des; }
            set { des = value; }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }  //权限
    public class UsrdomainManage : INotifyPropertyChanged
    {
        private DataTable usrDomainTable = null;
        private TreeView usrDomainView = null;
        public UsrdomainManage()
        {
            if (UsrDomainTable == null)
            {
                UsrDomainTable = new DataTable("usrDomainView");
                DataColumn dc1 = new DataColumn("name");
                DataColumn dc2 = new DataColumn("domainIdSet");
                DataColumn dc3 = new DataColumn("des");

                UsrDomainTable.Columns.Add(dc1);
                UsrDomainTable.Columns.Add(dc2);
                UsrDomainTable.Columns.Add(dc3);
            }
            if (usrDomainView == null)
            {
                usrDomainView = new TreeView();
            }
        }
        public DataTable UsrDomainTable
        {
            get { return usrDomainTable; }
            set
            {
                usrDomainTable = value;
                NotifyPropertyChanged("usrDomainTable");
            }
        }
        public TreeView UsrDomainView
        {
            get { return usrDomainView; }
            set
            {
                usrDomainView = value;
                NotifyPropertyChanged("usrDomainView");
            }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }  //用户-域
    public class ReturnResult : INotifyPropertyChanged
    {
        private string returnCode;
        private string returnStr;
        public string ReturnCode
        {
            get { return returnCode; }
            set { returnCode = value; }
        }
        public string ReturnStr
        {
            get { return returnStr; }
            set { returnStr = value; }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }//返回结果
    #endregion

    #region FTP服务器信息用于上传下载文件
    public class FTPServerInfo
    {
        private string fTPUserName;
        private string fTPPassWord;
        private string fTPAddr;
        private string fTPPort;
        private string fTPRootDir;
        private string uploadFileStatus;
        private string upgradeSystemStatus;

        public string FTPUserName
        {
            get
            {
                return fTPUserName;
            }

            set
            {
                fTPUserName = value;
            }
        }

        public string FTPPassWord
        {
            get
            {
                return fTPPassWord;
            }

            set
            {
                fTPPassWord = value;
            }
        }

        public string FTPAddr
        {
            get
            {
                return fTPAddr;
            }

            set
            {
                fTPAddr = value;
            }
        }

        public string FTPPort
        {
            get
            {
                return fTPPort;
            }

            set
            {
                fTPPort = value;
            }
        }

        public string FTPRootDir
        {
            get
            {
                return fTPRootDir;
            }

            set
            {
                fTPRootDir = value;
            }
        }

        public string UploadFileStatus
        {
            get
            {
                return uploadFileStatus;
            }

            set
            {
                uploadFileStatus = value;
            }
        }

        public string UpgradeSystemStatus
        {
            get
            {
                return upgradeSystemStatus;
            }

            set
            {
                upgradeSystemStatus = value;
            }
        }
    }

    /// <summary>
    /// 进度条参数
    /// </summary>
    public class ProgressBarInfoClass : INotifyPropertyChanged
    {
        private int maxValue = 100;
        private int minValue = 0;
        private int stepValue = 0;
        private bool runProgressBar = true;
        private string resoultMessage = string.Empty;
        private int allredyUpgradeCount = 0;
        private Visibility progressBarShow = Visibility.Collapsed;
        private bool _updateStart = true;
        private string _upgradeTimed = "00:00:00";
        private string tips = ConfigurationManager.AppSettings["UpgradeTips"];

        private System.Timers.Timer _UpgradeTimer = null;
        private int hour;
        private int minute;
        private int seconde;

        public ProgressBarInfoClass()
        {
            if (UpgradeTimer == null)
            {
                UpgradeTimer = new System.Timers.Timer();
                UpgradeTimer.Interval = 1000;
                UpgradeTimer.AutoReset = true;
                UpgradeTimer.Elapsed += UpgradeTimer_Elapsed;
            }
        }

        private void UpgradeTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            try
            {
                seconde++;
                if (seconde > 59)
                {
                    minute++;
                    seconde = 0;
                    if (minute > 59)
                    {
                        hour++;
                        minute = 0;
                        if (hour > 23)
                        {
                            hour = 0;
                        }
                    }
                }

                UpgradeTimed = string.Format("{0:D2}:{1:D2}:{2:D2}", hour, minute, seconde);
            }
            catch (Exception Ex)
            {
                Parameters.PrintfLogsExtended("定时器内部故障", Ex.Message, Ex.StackTrace);
            }
        }

        public int MaxValue
        {
            get
            {
                return maxValue;
            }

            set
            {
                maxValue = value;
                NotifyPropertyChanged("maxValue");
            }
        }

        public int MinValue
        {
            get
            {
                return minValue;
            }

            set
            {
                minValue = value;
                NotifyPropertyChanged("minValue");
            }
        }

        public int StepValue
        {
            get
            {
                return stepValue;
            }

            set
            {
                stepValue = value;
                NotifyPropertyChanged("stepValue");
            }
        }

        public bool RunProgressBar
        {
            get
            {
                return runProgressBar;
            }

            set
            {
                runProgressBar = value;
                NotifyPropertyChanged("runProgressBar");
            }
        }

        public string ResoultMessage
        {
            get
            {
                return resoultMessage;
            }

            set
            {
                resoultMessage = value;
                NotifyPropertyChanged("resoultMessage");
            }
        }

        public int AllredyUpgradeCount
        {
            get
            {
                return allredyUpgradeCount;
            }

            set
            {
                allredyUpgradeCount = value;
                NotifyPropertyChanged("allredyUpgradeCount");
            }
        }

        public Visibility ProgressBarShow
        {
            get
            {
                return progressBarShow;
            }

            set
            {
                progressBarShow = value;
                NotifyPropertyChanged("ProgressBarShow");
            }
        }

        public bool UpdateStart
        {
            get
            {
                return _updateStart;
            }

            set
            {
                _updateStart = value;
                NotifyPropertyChanged("UpdateStart");
            }
        }

        public string UpgradeTimed
        {
            get
            {
                return _upgradeTimed;
            }

            set
            {
                _upgradeTimed = value;
                NotifyPropertyChanged("UpgradeTimed");
            }
        }

        public System.Timers.Timer UpgradeTimer
        {
            get
            {
                return _UpgradeTimer;
            }

            set
            {
                _UpgradeTimer = value;
                NotifyPropertyChanged("UpgradeTimer");
            }
        }

        public string Tips
        {
            get
            {
                return tips;
            }

            set
            {
                tips = value;
                NotifyPropertyChanged("Tips");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    #endregion

    #region 特殊名单管理相关定义

    /// <summary>
    /// 黑名单
    /// </summary>
    public class BlackListClass : INotifyPropertyChanged
    {
        private string id;
        private string iMSI;
        private string iMEI;
        private string aliasName;
        private string resourcese;
        private string station;
        private string totalRecords = "0";
        private string curPageIndex;
        private string curPageFirstIndexCaption = "0";
        private string curPageIndexCaption = "/0页";
        private string pageSize = "200";
        private blackListOrderParaClass blackListOrderPara = null;
        private List<blackListOrderParaClass> parameterList = null;
        private DataTable blackListTable = null;
        private string tabControlItemName;
        private int deleteTotal;
        private string type;
        private int count;
        private int nextIndex;
        private int deviceCount;
        private int stationCount;
        private int successCount;
        private List<string> _iMSIPara = null;
        private List<string> _iMEIPara = null;
        private List<Dictionary<string, string>> _bWListParaList = null;
        private object _blackListAddingLock = null;
        private object _bDataLock;

        //过滤条件
        private string _iMSIFilter;
        private string _aliaseNameFilter;
        private string _deviceNameFilter;

        public class blackListOrderParaClass
        {
            private string nodeType;
            private string deviceFullPathName;
            private string domainFullPathName;
            private string model;
            private string deviceName;
            private string ipAddr;
            private string port;
            private string innerType;
            private string sn;

            public string NodeType
            {
                get
                {
                    return nodeType;
                }

                set
                {
                    nodeType = value;
                }
            }

            public string DeviceFullPathName
            {
                get
                {
                    return deviceFullPathName;
                }

                set
                {
                    deviceFullPathName = value;
                }
            }

            public string DomainFullPathName
            {
                get
                {
                    return domainFullPathName;
                }

                set
                {
                    domainFullPathName = value;
                }
            }
            public string Model
            {
                get
                {
                    return model;
                }

                set
                {
                    model = value;
                }
            }
            public string DeviceName
            {
                get
                {
                    return deviceName;
                }

                set
                {
                    deviceName = value;
                }
            }
            public string IpAddr
            {
                get
                {
                    return ipAddr;
                }

                set
                {
                    ipAddr = value;
                }
            }
            public string Port
            {
                get
                {
                    return port;
                }

                set
                {
                    port = value;
                }
            }
            public string InnerType
            {
                get
                {
                    return innerType;
                }

                set
                {
                    innerType = value;
                }
            }
            public string SN
            {
                get
                {
                    return sn;
                }

                set
                {
                    sn = value;
                }
            }
        }

        public BlackListClass()
        {
            if (BlackListTable == null)
            {
                BlackListTable = new DataTable("BlackList");

                DataView BDV = new DataView(BlackListTable);

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "ID";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "IMSI";

                DataColumn Column2 = new DataColumn();
                Column2.DataType = System.Type.GetType("System.String");
                Column2.ColumnName = "IMEI";

                DataColumn Column3 = new DataColumn();
                Column3.DataType = System.Type.GetType("System.String");
                Column3.ColumnName = "AliasName";

                DataColumn Column4 = new DataColumn();
                Column4.DataType = System.Type.GetType("System.String");
                Column4.ColumnName = "Resourcese";

                DataColumn Column5 = new DataColumn();
                Column5.DataType = System.Type.GetType("System.String");
                Column5.ColumnName = "Station";

                BlackListTable.Columns.Add(Column0);
                BlackListTable.Columns.Add(Column1);
                BlackListTable.Columns.Add(Column2);
                BlackListTable.Columns.Add(Column3);
                BlackListTable.Columns.Add(Column4);
                BlackListTable.Columns.Add(Column5);
            }

            if (BlackListOrderPara == null)
            {
                BlackListOrderPara = new blackListOrderParaClass();
            }

            if (ParameterList == null)
            {
                ParameterList = new List<blackListOrderParaClass>();
            }

            if (IMSIPara == null)
            {
                IMSIPara = new List<string>();
            }
            if (IMEIPara == null)
            {
                IMEIPara = new List<string>();
            }

            if (BWListParaList == null)
            {
                BWListParaList = new List<Dictionary<string, string>>();
            }

            if (BLackListAddingLock == null)
            {
                BLackListAddingLock = new object();
            }

            if (BDataLock == null)
            {
                BDataLock = new object();
            }
        }

        public string ID
        {
            get
            {
                return id;
            }

            set
            {
                id = value;
                NotifyPropertyChanged("ID");
            }
        }
        public string IMSI
        {
            get
            {
                return iMSI;
            }

            set
            {
                iMSI = value;
                NotifyPropertyChanged("IMSI");
            }
        }

        public string IMEI
        {
            get
            {
                return iMEI;
            }

            set
            {
                iMEI = value;
                NotifyPropertyChanged("IMEI");
            }
        }

        public string AliasName
        {
            get
            {
                return aliasName;
            }

            set
            {
                aliasName = value;
                NotifyPropertyChanged("AliasName");
            }
        }

        public string Resourcese
        {
            get
            {
                return resourcese;
            }

            set
            {
                resourcese = value;
                NotifyPropertyChanged("Resourcese");
            }
        }

        public string Station
        {
            get
            {
                return station;
            }

            set
            {
                station = value;
                NotifyPropertyChanged("Station");
            }
        }

        public DataTable BlackListTable
        {
            get
            {
                return blackListTable;
            }

            set
            {
                blackListTable = value;
                NotifyPropertyChanged("BlackListTable");
            }
        }

        public string TotalRecords
        {
            get
            {
                return totalRecords;
            }

            set
            {
                totalRecords = value;
                NotifyPropertyChanged("TotalRecords");
            }
        }

        public string CurPageIndex
        {
            get
            {
                return curPageIndex;
            }

            set
            {
                curPageIndex = value;
                NotifyPropertyChanged("CurPageIndex");
            }
        }

        public string PageSize
        {
            get
            {
                return pageSize;
            }

            set
            {
                pageSize = value;
                NotifyPropertyChanged("PageSize");
            }
        }

        public List<blackListOrderParaClass> ParameterList
        {
            get
            {
                return parameterList;
            }

            set
            {
                parameterList = value;
                NotifyPropertyChanged("ParameterList");
            }
        }

        public string CurPageIndexCaption
        {
            get
            {
                return curPageIndexCaption;
            }

            set
            {
                curPageIndexCaption = value;
                NotifyPropertyChanged("CurPageIndexCaption");
            }
        }

        public string TabControlItemName
        {
            get
            {
                return tabControlItemName;
            }

            set
            {
                tabControlItemName = value;
            }
        }

        public int DeleteTotal
        {
            get
            {
                return deleteTotal;
            }

            set
            {
                deleteTotal = value;
            }
        }

        public string Type
        {
            get
            {
                return type;
            }

            set
            {
                type = value;
            }
        }

        public int NextIndex
        {
            get
            {
                return nextIndex;
            }

            set
            {
                nextIndex = value;
            }
        }

        public int Count
        {
            get
            {
                return count;
            }

            set
            {
                count = value;
            }
        }

        public int DeviceCount
        {
            get
            {
                return deviceCount;
            }

            set
            {
                deviceCount = value;
            }
        }

        public int SuccessCount
        {
            get
            {
                return successCount;
            }

            set
            {
                successCount = value;
            }
        }

        public List<string> IMSIPara
        {
            get
            {
                return _iMSIPara;
            }

            set
            {
                _iMSIPara = value;
            }
        }

        public List<string> IMEIPara
        {
            get
            {
                return _iMEIPara;
            }

            set
            {
                _iMEIPara = value;
            }
        }

        public List<Dictionary<string, string>> BWListParaList
        {
            get
            {
                return _bWListParaList;
            }

            set
            {
                _bWListParaList = value;
            }
        }

        public object BLackListAddingLock
        {
            get
            {
                return _blackListAddingLock;
            }

            set
            {
                _blackListAddingLock = value;
            }
        }

        public object BDataLock
        {
            get
            {
                return _bDataLock;
            }

            set
            {
                _bDataLock = value;
            }
        }

        public string CurPageFirstIndexCaption
        {
            get
            {
                return curPageFirstIndexCaption;
            }

            set
            {
                curPageFirstIndexCaption = value;
                NotifyPropertyChanged("CurPageFirstIndexCaption");
            }
        }

        public int StationCount
        {
            get
            {
                return stationCount;
            }

            set
            {
                stationCount = value;
                NotifyPropertyChanged("StationCount");
            }
        }

        public blackListOrderParaClass BlackListOrderPara
        {
            get
            {
                return blackListOrderPara;
            }

            set
            {
                blackListOrderPara = value;
            }
        }

        public string IMSIFilter
        {
            get
            {
                return _iMSIFilter;
            }

            set
            {
                _iMSIFilter = value;
                NotifyPropertyChanged("IMSIFilter");
            }
        }

        public string AliaseNameFilter
        {
            get
            {
                return _aliaseNameFilter;
            }

            set
            {
                _aliaseNameFilter = value;
                NotifyPropertyChanged("AliaseNameFilter");
            }
        }

        public string DeviceNameFilter
        {
            get
            {
                return _deviceNameFilter;
            }

            set
            {
                _deviceNameFilter = value;
                NotifyPropertyChanged("DeviceNameFilter");
            }
        }

        public void BlackListInput(string _IMSI, string _IMEI, string _AliasName, string _Resourcese, string _Station)
        {
            try
            {
                long _ID = 1;
                lock (BDataLock)
                {
                    if (BlackListTable.Rows.Count > 0)
                    {
                        _ID = Convert.ToInt64(BlackListTable.Rows[BlackListTable.Rows.Count - 1]["ID"]) + 1;
                    }

                    DataRow dr = BlackListTable.NewRow();
                    dr.BeginEdit();
                    dr[0] = _ID.ToString();
                    dr[1] = _IMSI;
                    dr[2] = _IMEI;
                    dr[3] = _AliasName;
                    dr[4] = _Resourcese;
                    dr[5] = _Station;
                    BlackListTable.Rows.Add(dr);
                    dr.EndEdit();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    /// <summary>
    /// 白名单
    /// </summary>
    public class WhiteListClass : BlackListClass
    {
        private DataTable whiteListTable = null;
        private object _tableLock;

        public WhiteListClass()
        {
            if (WhiteListTable == null)
            {
                WhiteListTable = new DataTable("WhiteList");

                DataView WDV = new DataView(WhiteListTable);

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "ID";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "IMSI";

                DataColumn Column2 = new DataColumn();
                Column2.DataType = System.Type.GetType("System.String");
                Column2.ColumnName = "IMEI";

                DataColumn Column3 = new DataColumn();
                Column3.DataType = System.Type.GetType("System.String");
                Column3.ColumnName = "AliasName";

                DataColumn Column4 = new DataColumn();
                Column4.DataType = System.Type.GetType("System.String");
                Column4.ColumnName = "Station";

                WhiteListTable.Columns.Add(Column0);
                WhiteListTable.Columns.Add(Column1);
                WhiteListTable.Columns.Add(Column2);
                WhiteListTable.Columns.Add(Column3);
                WhiteListTable.Columns.Add(Column4);
            }

            if (TableLock == null)
            {
                TableLock = new object();
            }
        }

        public object TableLock
        {
            get
            {
                return _tableLock;
            }

            set
            {
                _tableLock = value;
            }
        }

        public DataTable WhiteListTable
        {
            get
            {
                return whiteListTable;
            }

            set
            {
                whiteListTable = value;
                NotifyPropertyChanged("WhiteListTable");
            }
        }

        public void WhiteListInput(string _IMSI, string _IMEI, string _AliasName, string _Station)
        {
            try
            {
                long _ID = 1;
                lock (TableLock)
                {
                    if (WhiteListTable.Rows.Count > 0)
                    {

                        _ID = Convert.ToInt64(WhiteListTable.Rows[WhiteListTable.Rows.Count - 1]["ID"]) + 1;
                    }

                    DataRow dr = WhiteListTable.NewRow();
                    dr.BeginEdit();
                    dr[0] = _ID.ToString();
                    dr[1] = _IMSI;
                    dr[2] = _IMEI;
                    dr[3] = _AliasName;
                    dr[4] = _Station;
                    WhiteListTable.Rows.Add(dr);
                    dr.EndEdit();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
    }

    /// <summary>
    /// 自定义名单
    /// </summary>
    public class CustomListClass : BlackListClass
    {
        private object _cDataLock = null;
        private DataTable customListTable = null;
        public class CustomListOrderParaClass
        {
            private string nodeType;
            private string deviceFullPathName;
            private string domainFullPathName;

            public string NodeType
            {
                get
                {
                    return nodeType;
                }

                set
                {
                    nodeType = value;
                }
            }

            public string DeviceFullPathName
            {
                get
                {
                    return deviceFullPathName;
                }

                set
                {
                    deviceFullPathName = value;
                }
            }

            public string DomainFullPathName
            {
                get
                {
                    return domainFullPathName;
                }

                set
                {
                    domainFullPathName = value;
                }
            }
        }

        //构造
        public CustomListClass()
        {
            if (CustomListTable == null)
            {
                CustomListTable = new DataTable("OtherList");

                DataView BDV = new DataView(CustomListTable);

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "ID";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "IMSI";

                DataColumn Column2 = new DataColumn();
                Column2.DataType = System.Type.GetType("System.String");
                Column2.ColumnName = "IMEI";

                DataColumn Column3 = new DataColumn();
                Column3.DataType = System.Type.GetType("System.String");
                Column3.ColumnName = "AliasName";

                DataColumn Column4 = new DataColumn();
                Column4.DataType = System.Type.GetType("System.String");
                Column4.ColumnName = "Resourcese";

                DataColumn Column5 = new DataColumn();
                Column5.DataType = System.Type.GetType("System.String");
                Column5.ColumnName = "Station";

                CustomListTable.Columns.Add(Column0);
                CustomListTable.Columns.Add(Column1);
                CustomListTable.Columns.Add(Column2);
                CustomListTable.Columns.Add(Column3);
                CustomListTable.Columns.Add(Column4);
                CustomListTable.Columns.Add(Column5);
            }

            if (CDataLock == null)
            {
                CDataLock = new object();
            }
        }

        public DataTable CustomListTable
        {
            get
            {
                return customListTable;
            }

            set
            {
                customListTable = value;
                NotifyPropertyChanged("CustomListTable");
            }
        }

        public object CDataLock
        {
            get
            {
                return _cDataLock;
            }

            set
            {
                _cDataLock = value;
                NotifyPropertyChanged("CDataLock");
            }
        }

        public void CustomListInput(string _IMSI, string _IMEI, string _AliasName, string _Resourcese, string _Station)
        {
            try
            {
                long _ID = 1;
                lock (CDataLock)
                {
                    if (CustomListTable.Rows.Count > 0)
                    {
                        _ID = Convert.ToInt64(CustomListTable.Rows[CustomListTable.Rows.Count - 1]["ID"]) + 1;
                    }

                    DataRow dr = CustomListTable.NewRow();
                    dr.BeginEdit();
                    dr[0] = _ID.ToString();
                    dr[1] = _IMSI;
                    dr[2] = _IMEI;
                    dr[3] = _AliasName;
                    dr[4] = _Resourcese;
                    dr[5] = _Station;
                    CustomListTable.Rows.Add(dr);
                    dr.EndEdit();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
    }

    /// <summary>
    /// 重定向
    /// </summary>
    public class ReDirectionClass : INotifyPropertyChanged
    {
        private string parentFullPathName;
        private string name;

        private string userType;
        private string redirection;
        private string optimization;
        private string priority;
        private string rejectMethod;
        private string frequency;
        private string addtionFrequency;
        private string operation;
        private string tabControlItemName;
        private string fullName;

        private string geranRedirect;
        private string arfcn;
        private string utranRedirect;
        private string uarfcn;
        private string eutranRedirect;
        private string earfcn;

        private DataTable redirectionTable = null;

        public ReDirectionClass()
        {
            if (RedirectionTable == null)
            {
                RedirectionTable = new DataTable("Redirection");

                DataView WDV = new DataView(RedirectionTable);

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "UserType";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "Optimization";

                DataColumn Column2 = new DataColumn();
                Column2.DataType = System.Type.GetType("System.String");
                Column2.ColumnName = "Priority";

                DataColumn Column3 = new DataColumn();
                Column3.DataType = System.Type.GetType("System.String");
                Column3.ColumnName = "RejectMethod";

                DataColumn Column4 = new DataColumn();
                Column4.DataType = System.Type.GetType("System.String");
                Column4.ColumnName = "Frequency";

                DataColumn Column5 = new DataColumn();
                Column5.DataType = System.Type.GetType("System.String");
                Column5.ColumnName = "AddtionFrequency";

                DataColumn Column6 = new DataColumn();
                Column6.DataType = System.Type.GetType("System.String");
                Column6.ColumnName = "Operation";

                RedirectionTable.Columns.Add(Column0);
                RedirectionTable.Columns.Add(Column1);
                RedirectionTable.Columns.Add(Column2);
                RedirectionTable.Columns.Add(Column3);
                RedirectionTable.Columns.Add(Column4);
                RedirectionTable.Columns.Add(Column5);
                RedirectionTable.Columns.Add(Column6);
            }
        }
        public string ParentFullPathName
        {
            get
            {
                return parentFullPathName;
            }

            set
            {
                parentFullPathName = value;
                NotifyPropertyChanged("parentFullPathName");
            }
        }
        public string Name
        {
            get
            {
                return name;
            }

            set
            {
                name = value;
                NotifyPropertyChanged("name");
            }
        }
        public string UserType
        {
            get
            {
                return userType;
            }

            set
            {
                userType = value;
                NotifyPropertyChanged("UserType");
            }
        }
        public string Priority
        {
            get
            {
                return priority;
            }

            set
            {
                priority = value;
                NotifyPropertyChanged("priority");
            }
        }
        public string Optimization
        {
            get
            {
                return optimization;
            }

            set
            {
                optimization = value;
                NotifyPropertyChanged("Optimization");
            }
        }
        public string RejectMethod
        {
            get
            {
                return rejectMethod;
            }

            set
            {
                rejectMethod = value;
                NotifyPropertyChanged("rejectMethod");
            }
        }
        public string Frequency
        {
            get
            {
                return frequency;
            }

            set
            {
                frequency = value;
                NotifyPropertyChanged("Frequency");
            }
        }
        public string AddtionFrequency
        {
            get
            {
                return addtionFrequency;
            }

            set
            {
                addtionFrequency = value;
                NotifyPropertyChanged("AddtionFrequency");
            }
        }
        public string Operation
        {
            get
            {
                return operation;
            }

            set
            {
                operation = value;
                NotifyPropertyChanged("Operation");
            }
        }
        public string TabControlItemName
        {
            get
            {
                return tabControlItemName;
            }

            set
            {
                tabControlItemName = value;
                NotifyPropertyChanged("TabControlItemName");
            }
        }
        public string FullName
        {
            get
            {
                return fullName;
            }

            set
            {
                fullName = value;
                NotifyPropertyChanged("FullName");
            }
        }
        public string GeranRedirect
        {
            get
            {
                return geranRedirect;
            }

            set
            {
                geranRedirect = value;
                NotifyPropertyChanged("geranRedirect");
            }
        }
        public string Arfcn
        {
            get
            {
                return arfcn;
            }

            set
            {
                arfcn = value;
                NotifyPropertyChanged("arfcn");
            }
        }
        public string UtranRedirect
        {
            get
            {
                return utranRedirect;
            }

            set
            {
                utranRedirect = value;
                NotifyPropertyChanged("utranRedirect");
            }
        }
        public string Uarfcn
        {
            get
            {
                return uarfcn;
            }

            set
            {
                uarfcn = value;
                NotifyPropertyChanged("uarfcn");
            }
        }
        public string EutranRedirect
        {
            get
            {
                return eutranRedirect;
            }

            set
            {
                eutranRedirect = value;
                NotifyPropertyChanged("eutranRedirect");
            }
        }
        public string Earfcn
        {
            get
            {
                return earfcn;
            }

            set
            {
                earfcn = value;
                NotifyPropertyChanged("earfcn");
            }
        }
        public DataTable RedirectionTable
        {
            get
            {
                return redirectionTable;
            }

            set
            {
                redirectionTable = value;
                NotifyPropertyChanged("RedirectionTable");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    #endregion

    #region 历史数据查询
    public class HistoryDataClass : INotifyPropertyChanged
    {
        private string returnCode;
        private string returnStr;
        private string totalRecords;
        private string curPageIndex;
        private string pageSize;
        private string curPageIndexCaption;
        private string pageIndex;
        private string id;
        private string iMSI;
        private string time;
        private string userType;
        private string tMSI;
        private string operators;
        private string domain;
        private string device;
        private string bwFlag;
        private string sn;
        private string des;
        private DataTable historyDataTable = null;
        public HistoryDataClass()
        {
            if (historyDataTable == null)
            {
                historyDataTable = new DataTable("historyData");

                DataView BDV = new DataView(historyDataTable);

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "Id";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "IMSI";

                DataColumn Column2 = new DataColumn();
                Column2.DataType = System.Type.GetType("System.String");
                Column2.ColumnName = "Time";

                DataColumn Column3 = new DataColumn();
                Column3.DataType = System.Type.GetType("System.String");
                Column3.ColumnName = "UserType";

                DataColumn Column4 = new DataColumn();
                Column4.DataType = System.Type.GetType("System.String");
                Column4.ColumnName = "TMSI";

                DataColumn Column5 = new DataColumn();
                Column5.DataType = System.Type.GetType("System.String");
                Column5.ColumnName = "Operators";

                DataColumn Column6 = new DataColumn();
                Column6.DataType = System.Type.GetType("System.String");
                Column6.ColumnName = "Domain";

                DataColumn Column7 = new DataColumn();
                Column7.DataType = System.Type.GetType("System.String");
                Column7.ColumnName = "Device";

                DataColumn Column8 = new DataColumn();
                Column8.DataType = System.Type.GetType("System.String");
                Column8.ColumnName = "Des";

                HistoryDataTable.Columns.Add(Column0);
                HistoryDataTable.Columns.Add(Column1);
                HistoryDataTable.Columns.Add(Column2);
                HistoryDataTable.Columns.Add(Column3);
                HistoryDataTable.Columns.Add(Column4);
                HistoryDataTable.Columns.Add(Column5);
                HistoryDataTable.Columns.Add(Column6);
                HistoryDataTable.Columns.Add(Column7);
                HistoryDataTable.Columns.Add(Column8);
            }
        }
        public string ReturnCode
        {
            get
            {
                return returnCode;
            }

            set
            {
                returnCode = value;
                NotifyPropertyChanged("returnCode");
            }
        }
        public string ReturnStr
        {
            get
            {
                return returnStr;
            }

            set
            {
                returnStr = value;
                NotifyPropertyChanged("returnStr");
            }
        }
        public string TotalRecords
        {
            get
            {
                return totalRecords;
            }

            set
            {
                totalRecords = value;
                NotifyPropertyChanged("totalRecords");
            }
        }
        public string PageIndex
        {
            get
            {
                return pageIndex;
            }

            set
            {
                pageIndex = value;
                NotifyPropertyChanged("pageIndex");
            }
        }
        public string CurPageIndex
        {
            get
            {
                return curPageIndex;
            }

            set
            {
                curPageIndex = value;
                NotifyPropertyChanged("curPageIndex");
            }
        }
        public string PageSize
        {
            get
            {
                return pageSize;
            }

            set
            {
                pageSize = value;
                NotifyPropertyChanged("pageSize");
            }
        }
        public string ID
        {
            get
            {
                return id;
            }

            set
            {
                id = value;
                NotifyPropertyChanged("id");
            }
        }
        public string IMSI
        {
            get
            {
                return iMSI;
            }

            set
            {
                iMSI = value;
                NotifyPropertyChanged("iMSI");
            }
        }
        public string Time
        {
            get
            {
                return time;
            }

            set
            {
                time = value;
                NotifyPropertyChanged("time");
            }
        }
        public string UserType
        {
            get
            {
                return userType;
            }

            set
            {
                userType = value;
                NotifyPropertyChanged("userType");
            }
        }
        public string TMSI
        {
            get
            {
                return tMSI;
            }

            set
            {
                tMSI = value;
                NotifyPropertyChanged("tMSI");
            }
        }
        public string Operators
        {
            get
            {
                return operators;
            }

            set
            {
                operators = value;
                NotifyPropertyChanged("operators");
            }
        }
        public string Domain
        {
            get
            {
                return domain;
            }

            set
            {
                domain = value;
                NotifyPropertyChanged("domain");
            }
        }
        public string Device
        {
            get
            {
                return device;
            }

            set
            {
                device = value;
                NotifyPropertyChanged("device");
            }
        }
        public string Des
        {
            get
            {
                return des;
            }
            set
            {
                des = value;
                NotifyPropertyChanged("des");
            }
        }

        public string BwFlag
        {
            get
            {
                return bwFlag;
            }

            set
            {
                bwFlag = value;
                NotifyPropertyChanged("bwFlag");
            }
        }

        public string SN
        {
            get
            {
                return sn;
            }

            set
            {
                sn = value;
                NotifyPropertyChanged("sn");
            }
        }

        public string CurPageIndexCaption
        {
            get
            {
                return curPageIndexCaption;
            }

            set
            {
                curPageIndexCaption = value;
                NotifyPropertyChanged("curPageIndexCaption");
            }
        }

        public DataTable HistoryDataTable
        {
            get
            {
                return historyDataTable;
            }

            set
            {
                historyDataTable = value;
                NotifyPropertyChanged("historyDataTable");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }
    public class HistoryDataToCSVClass : INotifyPropertyChanged
    {
        private string ftpUsrName;
        private string ftpPwd;
        private string ftpRootDir;
        private string ftpServerIp;
        private string ftpPort;
        private string fileName;

        public string FtpUsrName
        {
            get
            {
                return ftpUsrName;
            }

            set
            {
                ftpUsrName = value;
                NotifyPropertyChanged("totalRecords");
            }
        }
        public string FtpPwd
        {
            get
            {
                return ftpPwd;
            }

            set
            {
                ftpPwd = value;
                NotifyPropertyChanged("ftpPwd");
            }
        }
        public string FtpRootDir
        {
            get
            {
                return ftpRootDir;
            }

            set
            {
                ftpRootDir = value;
                NotifyPropertyChanged("ftpRootDir");
            }
        }
        public string FtpServerIp
        {
            get
            {
                return ftpServerIp;
            }

            set
            {
                ftpServerIp = value;
                NotifyPropertyChanged("ftpServerIp");
            }
        }
        public string FtpPort
        {
            get
            {
                return ftpPort;
            }

            set
            {
                ftpPort = value;
                NotifyPropertyChanged("ftpPort");
            }
        }
        public string FileName
        {
            get
            {
                return fileName;
            }

            set
            {
                fileName = value;
                NotifyPropertyChanged("fileName");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }
    /// <summary>
    /// 通话记录
    /// </summary>
    public class PhoneHistoryDataClass : HistoryDataClass
    {
        private string _phoneNumber;

        private DataTable _phoneHistoryDataTable = null;
        public PhoneHistoryDataClass()
        {
            if (_phoneHistoryDataTable == null)
            {
                _phoneHistoryDataTable = new DataTable("PhoneHistoryData");

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "Id";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "IMSI";

                DataColumn Column2 = new DataColumn();
                Column2.DataType = System.Type.GetType("System.String");
                Column2.ColumnName = "PhoneNumber";

                DataColumn Column3 = new DataColumn();
                Column3.DataType = System.Type.GetType("System.String");
                Column3.ColumnName = "Time";

                DataColumn Column4 = new DataColumn();
                Column4.DataType = System.Type.GetType("System.String");
                Column4.ColumnName = "Device";

                PhoneHistoryDataTable.Columns.Add(Column0);
                PhoneHistoryDataTable.Columns.Add(Column1);
                PhoneHistoryDataTable.Columns.Add(Column2);
                PhoneHistoryDataTable.Columns.Add(Column3);
                PhoneHistoryDataTable.Columns.Add(Column4);
            }
        }
        public DataTable PhoneHistoryDataTable
        {
            get { return _phoneHistoryDataTable; }
            set { _phoneHistoryDataTable = value; }
        }
        public string PhoneNumber
        {
            get { return _phoneNumber; }
            set { _phoneNumber = value; }
        }
        public void PhoneHistoryItmeInput(string ID, string IMSI, string PhoneNumber, string Time, string Device)
        {
            DataRow dr = PhoneHistoryDataTable.NewRow();
            dr[0] = ID;
            dr[1] = IMSI;
            dr[2] = PhoneNumber;
            dr[3] = Time;
            dr[4] = Device;
            PhoneHistoryDataTable.Rows.Add(dr);
        }
    }
    public class PhoneHistoryDataToCSVClass : HistoryDataToCSVClass
    {

    }
    /// <summary>
    /// 短信记录
    /// </summary>
    public class SMSHistoryDataClass : PhoneHistoryDataClass
    {
        private string _codetype;          // 编码类型
        private string _smsdataInfo;       // 短信内容
        private DataTable _smsHistoryDataTable = null;
        public SMSHistoryDataClass()
        {
            if (_smsHistoryDataTable == null)
            {
                _smsHistoryDataTable = new DataTable("PhoneHistoryData");

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "Id";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "IMSI";

                DataColumn Column2 = new DataColumn();
                Column2.DataType = System.Type.GetType("System.String");
                Column2.ColumnName = "PhoneNumber";

                DataColumn Column3 = new DataColumn();
                Column3.DataType = System.Type.GetType("System.String");
                Column3.ColumnName = "Codetype";

                DataColumn Column4 = new DataColumn();
                Column4.DataType = System.Type.GetType("System.String");
                Column4.ColumnName = "SMSdataInfo";

                DataColumn Column5 = new DataColumn();
                Column5.DataType = System.Type.GetType("System.String");
                Column5.ColumnName = "Time";

                DataColumn Column6 = new DataColumn();
                Column6.DataType = System.Type.GetType("System.String");
                Column6.ColumnName = "Device";

                SMSHistoryDataTable.Columns.Add(Column0);
                SMSHistoryDataTable.Columns.Add(Column1);
                SMSHistoryDataTable.Columns.Add(Column2);
                SMSHistoryDataTable.Columns.Add(Column3);
                SMSHistoryDataTable.Columns.Add(Column4);
                SMSHistoryDataTable.Columns.Add(Column5);
                SMSHistoryDataTable.Columns.Add(Column6);
            }
        }
        public DataTable SMSHistoryDataTable
        {
            get { return _smsHistoryDataTable; }
            set { _smsHistoryDataTable = value; }
        }
        public string Codetype
        {
            get { return _codetype; }
            set { _codetype = value; }
        }
        public string SMSdataInfo
        {
            get { return _smsdataInfo; }
            set { _smsdataInfo = value; }
        }
        public void SMSHistoryItmeInput(string ID, string IMSI, string PhoneNumber, string Codetype, string SMSdataInfo, string Time, string Device)
        {
            DataRow dr = SMSHistoryDataTable.NewRow();
            dr[0] = ID;
            dr[1] = IMSI;
            dr[2] = PhoneNumber;
            dr[3] = Codetype;
            dr[4] = SMSdataInfo;
            dr[5] = Time;
            dr[6] = Device;
            SMSHistoryDataTable.Rows.Add(dr);
        }
    }
    public class SMSHistoryDataToCSVClass : PhoneHistoryDataToCSVClass
    {

    }
    #endregion

    #region 系统运行状态类-粘包
    public class SystemRuningStickPackageStatusClass : INotifyPropertyChanged
    {
        private int _cachingDataTotal;
        private string _cachingStatu;
        private long _cachingPoolTotal;
        private int _cachingTotal;
        private int _cachingActionStep;

        private int _analysisDataTotal;
        private string _analysisStatu;
        private int _analysisTotal;
        private int _analysisActionStep;

        private string _netWorkConnected;
        private string _netWorkStatuIMG;

        private Thread GettingStatuThread = null;

        public SystemRuningStickPackageStatusClass()
        {
            if (GettingStatuThread == null)
            {
                GettingStatuThread = new Thread(new ThreadStart(GettingStatu));
                GettingStatuThread.Priority = ThreadPriority.Lowest;
                GettingStatuThread.Start();
            }
        }

        private void GettingStatu()
        {
            while (true)
            {
                //网络状态
                if (JsonInterFace.Connected)
                {
                    NetWorkConnected = "正常";
                    NetWorkStatuIMG = new NodeIcon().LeafAllReadyNodeIcon;
                }
                else
                {
                    NetWorkConnected = "断开";
                    NetWorkStatuIMG = new NodeIcon().LeafNoConnectNodeIcon;
                }
                Thread.Sleep(1000);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }

        public int CachingDataTotal
        {
            get
            {
                return _cachingDataTotal;
            }

            set
            {
                _cachingDataTotal = value;
                NotifyPropertyChanged("CachingDataTotal");
            }
        }

        public string CachingStatu
        {
            get
            {
                return _cachingStatu;
            }

            set
            {
                _cachingStatu = value;
                NotifyPropertyChanged("CachingStatu");
            }
        }

        public int CachingTotal
        {
            get
            {
                return _cachingTotal;
            }

            set
            {
                _cachingTotal = value;
                NotifyPropertyChanged("CachingTotal");
            }
        }

        public int CachingActionStep
        {
            get
            {
                return _cachingActionStep;
            }

            set
            {
                _cachingActionStep = value;
                NotifyPropertyChanged("CachingActionStep");
            }
        }

        public int AnalysisDataTotal
        {
            get
            {
                return _analysisDataTotal;
            }

            set
            {
                _analysisDataTotal = value;
                NotifyPropertyChanged("AnalysisDataTotal");
            }
        }

        public string AnalysisStatu
        {
            get
            {
                return _analysisStatu;
            }

            set
            {
                _analysisStatu = value;
                NotifyPropertyChanged("AnalysisStatu");
            }
        }

        public int AnalysisTotal
        {
            get
            {
                return _analysisTotal;
            }

            set
            {
                _analysisTotal = value;
                NotifyPropertyChanged("AnalysisTotal");
            }
        }

        public int AnalysisActionStep
        {
            get
            {
                return _analysisActionStep;
            }

            set
            {
                _analysisActionStep = value;
                NotifyPropertyChanged("AnalysisActionStep");
            }
        }

        public string NetWorkConnected
        {
            get
            {
                return _netWorkConnected;
            }

            set
            {
                _netWorkConnected = value;
                NotifyPropertyChanged("NetWorkConnected");
            }
        }

        public string NetWorkStatuIMG
        {
            get
            {
                return _netWorkStatuIMG;
            }

            set
            {
                _netWorkStatuIMG = value;
                NotifyPropertyChanged("NetWorkStatuIMG");
            }
        }

        public long CachingPoolTotal
        {
            get
            {
                return _cachingPoolTotal;
            }

            set
            {
                _cachingPoolTotal = value;
                NotifyPropertyChanged("CachingPoolTotal");
            }
        }
    }
    #endregion

    #region 系统运行状态类-解析
    public class SystemRuningAnalysisStatusClass : INotifyPropertyChanged
    {
        private int _cachingDataTotal;
        private string _cachingStatu;
        private long _cachingPoolTotal;
        private int _cachingTotal;
        private int _cachingActionStep;

        private int _analysisDataTotal;
        private string _analysisStatu;
        private int _analysisTotal;
        private int _analysisActionStep;

        private string _netWorkConnected;
        private string _netWorkStatuIMG;

        private Thread GettingStatuThread = null;

        public SystemRuningAnalysisStatusClass()
        {
            if (GettingStatuThread == null)
            {
                GettingStatuThread = new Thread(new ThreadStart(GettingStatu));
                GettingStatuThread.Priority = ThreadPriority.Lowest;
                GettingStatuThread.Start();
            }
        }

        private void GettingStatu()
        {
            while (true)
            {
                //网络状态
                if (JsonInterFace.Connected)
                {
                    NetWorkConnected = "正常";
                    NetWorkStatuIMG = new NodeIcon().LeafAllReadyNodeIcon;
                }
                else
                {
                    NetWorkConnected = "断开";
                    NetWorkStatuIMG = new NodeIcon().LeafNoConnectNodeIcon;
                }
                Thread.Sleep(1000);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }

        public int CachingDataTotal
        {
            get
            {
                return _cachingDataTotal;
            }

            set
            {
                _cachingDataTotal = value;
                NotifyPropertyChanged("CachingDataTotal");
            }
        }

        public string CachingStatu
        {
            get
            {
                return _cachingStatu;
            }

            set
            {
                _cachingStatu = value;
                NotifyPropertyChanged("CachingStatu");
            }
        }

        public int CachingTotal
        {
            get
            {
                return _cachingTotal;
            }

            set
            {
                _cachingTotal = value;
                NotifyPropertyChanged("CachingTotal");
            }
        }

        public int CachingActionStep
        {
            get
            {
                return _cachingActionStep;
            }

            set
            {
                _cachingActionStep = value;
                NotifyPropertyChanged("CachingActionStep");
            }
        }

        public int AnalysisDataTotal
        {
            get
            {
                return _analysisDataTotal;
            }

            set
            {
                _analysisDataTotal = value;
                NotifyPropertyChanged("AnalysisDataTotal");
            }
        }

        public string AnalysisStatu
        {
            get
            {
                return _analysisStatu;
            }

            set
            {
                _analysisStatu = value;
                NotifyPropertyChanged("AnalysisStatu");
            }
        }

        public int AnalysisTotal
        {
            get
            {
                return _analysisTotal;
            }

            set
            {
                _analysisTotal = value;
                NotifyPropertyChanged("AnalysisTotal");
            }
        }

        public int AnalysisActionStep
        {
            get
            {
                return _analysisActionStep;
            }

            set
            {
                _analysisActionStep = value;
                NotifyPropertyChanged("AnalysisActionStep");
            }
        }

        public string NetWorkConnected
        {
            get
            {
                return _netWorkConnected;
            }

            set
            {
                _netWorkConnected = value;
                NotifyPropertyChanged("NetWorkConnected");
            }
        }

        public string NetWorkStatuIMG
        {
            get
            {
                return _netWorkStatuIMG;
            }

            set
            {
                _netWorkStatuIMG = value;
                NotifyPropertyChanged("NetWorkStatuIMG");
            }
        }

        public long CachingPoolTotal
        {
            get
            {
                return _cachingPoolTotal;
            }

            set
            {
                _cachingPoolTotal = value;
                NotifyPropertyChanged("CachingPoolTotal");
            }
        }
    }
    #endregion

    #region 系统运行状态类-模块状态
    public class SystemThreadsStatusParametersClass : INotifyPropertyChanged
    {
        //心跳模块
        private bool _AppHeartThreadStatus = true;
        //数据处理模块
        private bool _StickDataPackageThreadStatus = true;
        //数据解析模块
        private bool _AnalysisDataThreadStatus = true;
        //信息统计模块
        private bool _InfoStatisticThreadStatus = true;
        //加载未知设备模块
        private bool _GettingUnknownDeviceListThreadStatus = true;
        //网络重连模块
        private bool _RemoteReconnectTheadStatus = true;
        //未知设备监控模块
        private bool _SetUnknownTipsWindowThreadStatus = true;
        //网络检测模块
        private bool _CheckNetWorkInterfaceTheadStatus = true;
        //多媒体播报模块
        private bool _ScannerWarningSoundTheadStatus = true;
        //实时上报模块
        private bool _ScannerReportRealTimeThreadStatus = true;
        //黑名单追踪模块
        private bool _MeasReportBlackListThreadStatus = true;
        //通话记录模块
        private bool _GSMPhoneNumberRecordInfoThreadStatus = true;
        //短信记录模块
        private bool _GSMSMSRecordInfoThreadStatus = true;

        public struct SymbolNameTypeStruct
        {
            //心跳模块
            public string AppHeartThreadName;
            //数据处理模块
            public string StickDataPackageThreadName;
            //数据解析模块
            public string AnalysisDataThreadName;
            //信息统计模块
            public string InfoStatisticThreadName;
            //加载未知设备模块
            public string GettingUnknownDeviceListThreadName;
            //网络重连模块
            public string RemoteReconnectTheadName;
            //未知设备监控模块
            public string SetUnknownTipsWindowThreadName;
            //网络检测模块
            public string CheckNetWorkInterfaceTheadName;
            //多媒体播报模块
            public string ScannerWarningSoundTheadName;
            //实时上报模块
            public string ScannerReportRealTimeThreadName;
            //黑名单追踪模块
            public string MeasReportBlackListThreadName;
            //通话记录模块
            public string GSMPhoneNumberRecordInfoThreadName;
            //短信记录模块
            public string GSMSMSRecordInfoThreadName;
        };

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
        public SymbolNameTypeStruct SymbolType = new SymbolNameTypeStruct();

        //构造
        public SystemThreadsStatusParametersClass()
        {
            //心跳模块
            SymbolType.AppHeartThreadName = "心跳模块";
            //数据处理模块
            SymbolType.StickDataPackageThreadName = "数据处理模块";
            //数据解析模块
            SymbolType.AnalysisDataThreadName = "数据解析模块";
            //信息统计模块
            SymbolType.InfoStatisticThreadName = "信息统计模块";
            //加载未知设备模块
            SymbolType.GettingUnknownDeviceListThreadName = "加载未知设备模块";
            //网络重连模块
            SymbolType.RemoteReconnectTheadName = "网络重连模块";
            //未知设备监控模块
            SymbolType.SetUnknownTipsWindowThreadName = "未知设备监控模块";
            //网络检测模块
            SymbolType.CheckNetWorkInterfaceTheadName = "网络检测模块";
            //多媒体播报模块
            SymbolType.ScannerWarningSoundTheadName = "多媒体播报模块";
            //实时上报模块
            SymbolType.ScannerReportRealTimeThreadName = "实时上报模块";
            //黑名单追踪模块
            SymbolType.MeasReportBlackListThreadName = "黑名单追踪模块";
            //通话记录模块
            SymbolType.GSMPhoneNumberRecordInfoThreadName = "通话记录模块";
            //短信记录模块
            SymbolType.GSMSMSRecordInfoThreadName = "短信记录模块";
        }

        [Description("心跳模块")]
        public bool AppHeartThreadStatus
        {
            get
            {
                return _AppHeartThreadStatus;
            }

            set
            {
                _AppHeartThreadStatus = value;
                NotifyPropertyChanged("AppHeartThreadStatus");
            }
        }

        [Description("数据处理模块")]
        public bool StickDataPackageThreadStatus
        {
            get
            {
                return _StickDataPackageThreadStatus;
            }

            set
            {
                _StickDataPackageThreadStatus = value;
                NotifyPropertyChanged("StickDataPackageThreadStatus");
            }
        }

        [Description("数据解析模块")]
        public bool AnalysisDataThreadStatus
        {
            get
            {
                return _AnalysisDataThreadStatus;
            }

            set
            {
                _AnalysisDataThreadStatus = value;
                NotifyPropertyChanged("AnalysisDataThreadStatus");
            }
        }

        [Description("信息统计模块")]
        public bool InfoStatisticThreadStatus
        {
            get
            {
                return _InfoStatisticThreadStatus;
            }

            set
            {
                _InfoStatisticThreadStatus = value;
                NotifyPropertyChanged("InfoStatisticThreadStatus");
            }
        }

        [Description("加载未知设备模块")]
        public bool GettingUnknownDeviceListThreadStatus
        {
            get
            {
                return _GettingUnknownDeviceListThreadStatus;
            }

            set
            {
                _GettingUnknownDeviceListThreadStatus = value;
                NotifyPropertyChanged("GettingUnknownDeviceListThreadStatus");
            }
        }

        [Description("网络重连模块")]
        public bool RemoteReconnectTheadStatus
        {
            get
            {
                return _RemoteReconnectTheadStatus;
            }

            set
            {
                _RemoteReconnectTheadStatus = value;
                NotifyPropertyChanged("RemoteReconnectTheadStatus");
            }
        }

        [Description("未知设备监控模块")]
        public bool SetUnknownTipsWindowThreadStatus
        {
            get
            {
                return _SetUnknownTipsWindowThreadStatus;
            }

            set
            {
                _SetUnknownTipsWindowThreadStatus = value;
                NotifyPropertyChanged("SetUnknownTipsWindowThreadStatus");
            }
        }

        [Description("网络检测模块")]
        public bool CheckNetWorkInterfaceTheadStatus
        {
            get
            {
                return _CheckNetWorkInterfaceTheadStatus;
            }

            set
            {
                _CheckNetWorkInterfaceTheadStatus = value;
                NotifyPropertyChanged("CheckNetWorkInterfaceTheadStatus");
            }
        }

        [Description("多媒体播报模块")]
        public bool ScannerWarningSoundTheadStatus
        {
            get
            {
                return _ScannerWarningSoundTheadStatus;
            }

            set
            {
                _ScannerWarningSoundTheadStatus = value;
                NotifyPropertyChanged("ScannerWarningSoundTheadStatus");
            }
        }

        [Description("实时上报模块")]
        public bool ScannerReportRealTimeThreadStatus
        {
            get
            {
                return _ScannerReportRealTimeThreadStatus;
            }

            set
            {
                _ScannerReportRealTimeThreadStatus = value;
                NotifyPropertyChanged("ScannerReportRealTimeThreadStatus");
            }
        }

        [Description("黑名单追踪模块")]
        public bool MeasReportBlackListThreadStatus
        {
            get
            {
                return _MeasReportBlackListThreadStatus;
            }

            set
            {
                _MeasReportBlackListThreadStatus = value;
                NotifyPropertyChanged("MeasReportBlackListThreadStatus");
            }
        }

        [Description("通话记录模块")]
        public bool GSMPhoneNumberRecordInfoThreadStatus
        {
            get
            {
                return _GSMPhoneNumberRecordInfoThreadStatus;
            }

            set
            {
                _GSMPhoneNumberRecordInfoThreadStatus = value;
                NotifyPropertyChanged("GSMPhoneNumberRecordInfoThreadStatus");
            }
        }

        [Description("短信记录模块")]
        public bool GSMSMSRecordInfoThreadStatus
        {
            get
            {
                return _GSMSMSRecordInfoThreadStatus;
            }

            set
            {
                _GSMSMSRecordInfoThreadStatus = value;
                NotifyPropertyChanged("GSMSMSRecordInfoThreadStatus");
            }
        }
    }
    #endregion

    #region 网络数据缓存类
    public class SourceDataCachingClass
    {
        private string data;
        private string remoteHost;
        private int remotePort;
        private object lockObject;
        private object lockJsonCaching;
        private Queue<SourceDataCachingClass> gCaptureInfoDb = null;
        private Queue<byte> gCaptureInfoDbWithByte = null;
        private List<byte> gCaptureInfoDbList = null;

        //粘包缓存
        private byte[] gCaptureInfoDbCaching;

        //正确JSON串缓存
        private string[] gCaptureInfoJsonCaching;

        public string Data
        {
            get
            {
                return data;
            }

            set
            {
                data = value;
            }
        }

        public string RemoteHost
        {
            get
            {
                return remoteHost;
            }

            set
            {
                remoteHost = value;
            }
        }

        public int RemotePort
        {
            get
            {
                return remotePort;
            }

            set
            {
                remotePort = value;
            }
        }

        public Queue<SourceDataCachingClass> GCaptureInfoDb
        {
            get
            {
                return gCaptureInfoDb;
            }

            set
            {
                gCaptureInfoDb = value;
            }
        }

        public object LockObject
        {
            get
            {
                return lockObject;
            }

            set
            {
                lockObject = value;
            }
        }

        public object LockJsonCaching
        {
            get
            {
                return lockJsonCaching;
            }

            set
            {
                lockJsonCaching = value;
            }
        }

        public Queue<byte> GCaptureInfoDbWithByte
        {
            get
            {
                return gCaptureInfoDbWithByte;
            }

            set
            {
                gCaptureInfoDbWithByte = value;
            }
        }

        public List<byte> GCaptureInfoDbList
        {
            get
            {
                return gCaptureInfoDbList;
            }

            set
            {
                gCaptureInfoDbList = value;
            }
        }

        public byte[] GCaptureInfoDbCaching
        {
            get
            {
                return gCaptureInfoDbCaching;
            }

            set
            {
                gCaptureInfoDbCaching = value;
            }
        }

        public string[] GCaptureInfoJsonCaching
        {
            get
            {
                return gCaptureInfoJsonCaching;
            }

            set
            {
                gCaptureInfoJsonCaching = value;
            }
        }

        /// <summary>
        /// 构造
        /// </summary>
        public SourceDataCachingClass()
        {
            if (GCaptureInfoDb == null)
            {
                GCaptureInfoDb = new Queue<SourceDataCachingClass>();
            }

            if (GCaptureInfoDbWithByte == null)
            {
                GCaptureInfoDbWithByte = new Queue<byte>();
            }

            if (GCaptureInfoDbList == null)
            {
                GCaptureInfoDbList = new List<byte>();
            }

            if (LockObject == null)
            {
                LockObject = new object();
            }

            if (LockJsonCaching == null)
            {
                LockJsonCaching = new object();
            }

            GCaptureInfoDbCaching = new byte[] { };

            GCaptureInfoJsonCaching = new string[] { };
        }

        /// <summary>
        /// 清理粘包数据
        /// </summary>
        /// <param name="buff"></param>
        /// <param name="startIndex"></param>
        /// <param name="endIndex"></param>
        public void Delete(int startIndex, int endIndex)
        {
            try
            {
                //数据清理调用前已对其加锁，此处不再加锁
                byte[] Data = new byte[GCaptureInfoDbCaching.Length - endIndex];
                Buffer.BlockCopy(GCaptureInfoDbCaching, endIndex, Data, startIndex, Data.Length);
                GCaptureInfoDbCaching = Data;
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("粘包数据清理异常", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 清理JSON串数据
        /// </summary>
        /// <param name="buff"></param>
        /// <param name="startIndex"></param>
        /// <param name="endIndex"></param>
        public void Delete(int Index)
        {
            try
            {
                if (GCaptureInfoJsonCaching.Length > 0)
                {
                    string[] Data = new string[GCaptureInfoJsonCaching.Length - 1];
                    for (int i = Index; i < Data.Length; i++)
                    {
                        Data[i] = GCaptureInfoJsonCaching[i + 1];
                    }
                    GCaptureInfoJsonCaching = Data;
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("Json数据清理故障", ex.Message, ex.StackTrace);
            }
        }
    }
    #endregion

    #region LTE捕号上报信息表
    public class ScannerDataClass : INotifyPropertyChanged
    {
        private string iD;
        private string iMSI;
        private string dTime;
        private string userType;
        private string tMSI;
        private string iMEI;
        private string intensity;
        private string operators;
        private string domainName;
        private string deviceName;
        private string des;
        private double reportTotal;

        public class ScannerDataCaptureClass : INotifyPropertyChanged
        {
            private string sN;            //SN号
            private string fullName;      //域全名
            private string iP;            //IP地址
            private string port;          //端口号
            private string type;          //内部设备类型
            private string iD;            //序号
            private string userType;      //黑白名单，普通用户
            private string timestamp;     //捕号时间

            private string imsi;          //IMSI号
            private string imei;          //IMEI号
            private string isdn;          //手机号码号段
            private string bsPwr;         //手机上报的基站功率
            private string tmsi;          //手机TMSI号
            private string rsrp;          //RSRP of dedicate
            private string time;          //感知时间
            private string des;           //别名

            public string SN
            {
                get
                {
                    return sN;
                }

                set
                {
                    sN = value;
                    NotifyPropertyChanged("sN");
                }
            }

            public string FullName
            {
                get
                {
                    return fullName;
                }

                set
                {
                    fullName = value;
                    NotifyPropertyChanged("fullName");
                }
            }

            public string IP
            {
                get
                {
                    return iP;
                }

                set
                {
                    iP = value;
                    NotifyPropertyChanged("iP");
                }
            }

            public string Port
            {
                get
                {
                    return port;
                }

                set
                {
                    port = value;
                    NotifyPropertyChanged("port");
                }
            }

            public string Type
            {
                get
                {
                    return type;
                }

                set
                {
                    type = value;
                    NotifyPropertyChanged("type");
                }
            }

            public string ID
            {
                get
                {
                    return iD;
                }

                set
                {
                    iD = value;
                    NotifyPropertyChanged("iD");
                }
            }

            public string UserType
            {
                get
                {
                    return userType;
                }

                set
                {
                    userType = value;
                    NotifyPropertyChanged("userType");
                }
            }

            public string Timestamp
            {
                get
                {
                    return timestamp;
                }

                set
                {
                    timestamp = value;
                    NotifyPropertyChanged("timestamp");
                }
            }

            public string Imsi
            {
                get
                {
                    return imsi;
                }

                set
                {
                    imsi = value;
                    NotifyPropertyChanged("imsi");
                }
            }

            public string Imei
            {
                get
                {
                    return imei;
                }

                set
                {
                    imei = value;
                    NotifyPropertyChanged("imei");
                }
            }

            public string Isdn
            {
                get
                {
                    return isdn;
                }

                set
                {
                    isdn = value;
                    NotifyPropertyChanged("isdn");
                }
            }

            public string BsPwr
            {
                get
                {
                    return bsPwr;
                }

                set
                {
                    bsPwr = value;
                    NotifyPropertyChanged("bsPwr");
                }
            }

            public string Tmsi
            {
                get
                {
                    return tmsi;
                }

                set
                {
                    tmsi = value;
                    NotifyPropertyChanged("tmsi");
                }
            }

            public string Rsrp
            {
                get
                {
                    return rsrp;
                }

                set
                {
                    rsrp = value;
                    NotifyPropertyChanged("rsrp");
                }
            }

            public string Time
            {
                get
                {
                    return time;
                }

                set
                {
                    time = value;
                    NotifyPropertyChanged("time");
                }
            }

            public string Des
            {
                get
                {
                    return des;
                }

                set
                {
                    des = value;
                    NotifyPropertyChanged("Des");
                }
            }

            public event PropertyChangedEventHandler PropertyChanged;

            private void NotifyPropertyChanged(string value)
            {
                if (PropertyChanged != null)
                {
                    PropertyChanged(this, new PropertyChangedEventArgs(value));
                }
            }
        }

        private DataTable scannerDataTable = null;

        private ScannerDataCaptureClass scannerDataCapture = null;

        /// <summary>
        /// 用于数据库处理得互斥
        /// </summary>
        private Object mutex_DbHelper = null;

        /// <summary>
        /// 所有捕到的号都先放入该队列,用于数据库
        /// </summary>
        private Queue<ScannerDataCaptureClass> gCaptureInfoDb = null;

        public DataTable ScannerDataTable
        {
            get
            {
                return scannerDataTable;
            }

            set
            {
                scannerDataTable = value;
            }
        }

        public string ID
        {
            get
            {
                return iD;
            }

            set
            {
                iD = value;
                NotifyPropertyChanged("ID");
            }
        }

        public string IMSI
        {
            get
            {
                return iMSI;
            }

            set
            {
                iMSI = value;
                NotifyPropertyChanged("IMSI");
            }
        }

        public string DTime
        {
            get
            {
                return dTime;
            }

            set
            {
                dTime = value;
                NotifyPropertyChanged("DTime");
            }
        }

        public string UserType
        {
            get
            {
                return userType;
            }

            set
            {
                userType = value;
                NotifyPropertyChanged("UserType");
            }
        }

        public string TMSI
        {
            get
            {
                return tMSI;
            }

            set
            {
                tMSI = value;
                NotifyPropertyChanged("TMSI");
            }
        }

        public string IMEI
        {
            get
            {
                return iMEI;
            }

            set
            {
                iMEI = value;
                NotifyPropertyChanged("IMEI");
            }
        }

        public string Intensity
        {
            get
            {
                return intensity;
            }

            set
            {
                intensity = value;
                NotifyPropertyChanged("Intensity");
            }
        }

        public string Operators
        {
            get
            {
                return operators;
            }

            set
            {
                operators = value;
                NotifyPropertyChanged("Operators");
            }
        }

        public string DomainName
        {
            get
            {
                return domainName;
            }

            set
            {
                domainName = value;
                NotifyPropertyChanged("DomainName");
            }
        }

        public string DeviceName
        {
            get
            {
                return deviceName;
            }

            set
            {
                deviceName = value;
                NotifyPropertyChanged("DeviceName");
            }
        }

        public ScannerDataCaptureClass ScannerDataCapture
        {
            get
            {
                return scannerDataCapture;
            }

            set
            {
                scannerDataCapture = value;
                NotifyPropertyChanged("scannerDataCapture");
            }
        }

        public object Mutex_DbHelper
        {
            get
            {
                return mutex_DbHelper;
            }

            set
            {
                mutex_DbHelper = value;
            }
        }

        public Queue<ScannerDataCaptureClass> GCaptureInfoDb
        {
            get
            {
                return gCaptureInfoDb;
            }

            set
            {
                gCaptureInfoDb = value;
            }
        }

        public string Des
        {
            get
            {
                return des;
            }

            set
            {
                des = value;
                NotifyPropertyChanged("Des");
            }
        }

        public double ReportTotal
        {
            get
            {
                return reportTotal;
            }

            set
            {
                reportTotal = value;
                NotifyPropertyChanged("ReportTotal");
            }
        }

        public ScannerDataClass()
        {
            if (ScannerDataTable == null)
            {
                ScannerDataTable = new DataTable("ScannerData");
                InitialScannerDataTable();
            }

            if (ScannerDataCapture == null)
            {
                ScannerDataCapture = new ScannerDataCaptureClass();
            }

            if (Mutex_DbHelper == null)
            {
                mutex_DbHelper = new object();
            }

            if (GCaptureInfoDb == null)
            {
                GCaptureInfoDb = new Queue<ScannerDataCaptureClass>();
            }
        }

        private void InitialScannerDataTable()
        {
            DataColumn Column0 = new DataColumn();
            Column0.DataType = System.Type.GetType("System.String");
            Column0.ColumnName = "ID";

            DataColumn Column1 = new DataColumn();
            Column1.DataType = System.Type.GetType("System.String");
            Column1.ColumnName = "IMSI";

            DataColumn Column2 = new DataColumn();
            Column2.DataType = System.Type.GetType("System.String");
            Column2.ColumnName = "DTime";

            DataColumn Column3 = new DataColumn();
            Column3.DataType = System.Type.GetType("System.String");
            Column3.ColumnName = "UserType";

            DataColumn Column4 = new DataColumn();
            Column4.DataType = System.Type.GetType("System.String");
            Column4.ColumnName = "TMSI";

            DataColumn Column5 = new DataColumn();
            Column5.DataType = System.Type.GetType("System.String");
            Column5.ColumnName = "IMEI";

            DataColumn Column6 = new DataColumn();
            Column6.DataType = System.Type.GetType("System.String");
            Column6.ColumnName = "Intensity";

            DataColumn Column7 = new DataColumn();
            Column7.DataType = System.Type.GetType("System.String");
            Column7.ColumnName = "Operators";

            DataColumn Column8 = new DataColumn();
            Column8.DataType = System.Type.GetType("System.String");
            Column8.ColumnName = "DomainName";

            DataColumn Column9 = new DataColumn();
            Column9.DataType = System.Type.GetType("System.String");
            Column9.ColumnName = "DeviceName";

            DataColumn Column10 = new DataColumn();
            Column10.DataType = System.Type.GetType("System.String");
            Column10.ColumnName = "Des";

            ScannerDataTable.Columns.Add(Column0);
            ScannerDataTable.Columns.Add(Column1);
            ScannerDataTable.Columns.Add(Column2);
            ScannerDataTable.Columns.Add(Column3);
            ScannerDataTable.Columns.Add(Column4);
            ScannerDataTable.Columns.Add(Column5);
            ScannerDataTable.Columns.Add(Column6);
            ScannerDataTable.Columns.Add(Column7);
            ScannerDataTable.Columns.Add(Column8);
            ScannerDataTable.Columns.Add(Column9);
            ScannerDataTable.Columns.Add(Column10);
        }

        public void Input(
                            string ID,
                            string IMSI,
                            string DTime,
                            string UserType,
                            string TMSI,
                            string IMEI,
                            string Intensity,
                            string Operators,
                            string DomainName,
                            string DeviceName,
                            string Des
                         )
        {
            lock (Mutex_DbHelper)
            {
                DataRow ScannerRw = ScannerDataTable.NewRow();
                ScannerRw.BeginEdit();
                ScannerRw[0] = ID;
                ScannerRw[1] = IMSI;
                ScannerRw[2] = DTime;
                ScannerRw[3] = UserType;
                ScannerRw[4] = TMSI;
                ScannerRw[5] = IMEI;
                ScannerRw[6] = Intensity;
                ScannerRw[7] = Operators;
                ScannerRw[8] = DomainName;
                ScannerRw[9] = DeviceName;
                ScannerRw[10] = Des;
                if (ScannerDataTable.Rows.Count < Parameters.ScannerDataControlParameter.Tatol)
                {
                    ScannerDataTable.Rows.Add(ScannerRw);
                }
                else if (ScannerDataTable.Rows.Count == Parameters.ScannerDataControlParameter.Tatol)
                {
                    ScannerDataTable.Rows.RemoveAt(0);
                    ScannerDataTable.Rows.Add(ScannerRw);
                }
                else if (ScannerDataTable.Rows.Count > Parameters.ScannerDataControlParameter.Tatol)
                {
                    for (int i = ScannerDataTable.Rows.Count - 1; i >= Parameters.ScannerDataControlParameter.Tatol; i--)
                    {
                        ScannerDataTable.Rows.RemoveAt(i);
                    }
                    ScannerDataTable.Rows.Add(ScannerRw);
                }
                ScannerRw.EndEdit();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }

    #endregion

    #region 测量报告黑名单信息表
    public class MeasReportBlackListClass : ScannerDataClass
    {
        private string direction;
        private DataTable measReportDataTable = null;

        public string Direction
        {
            get
            {
                return direction;
            }

            set
            {
                direction = value;
                NotifyPropertyChanged("direction");
            }
        }

        public DataTable MeasReportDataTable
        {
            get
            {
                return measReportDataTable;
            }

            set
            {
                measReportDataTable = value;
                NotifyPropertyChanged("measReportDataTable");
            }
        }

        public MeasReportBlackListClass()
        {
            if (MeasReportDataTable == null)
            {
                MeasReportDataTable = new DataTable();
                InitialMeasReportBlackListDataTable();
            }
        }

        private void InitialMeasReportBlackListDataTable()
        {
            DataColumn Column0 = new DataColumn();
            Column0.DataType = System.Type.GetType("System.String");
            Column0.ColumnName = "IMSI";

            DataColumn Column1 = new DataColumn();
            Column1.DataType = System.Type.GetType("System.String");
            Column1.ColumnName = "DTime";

            DataColumn Column2 = new DataColumn();
            Column2.DataType = System.Type.GetType("System.String");
            Column2.ColumnName = "TMSI";

            DataColumn Column3 = new DataColumn();
            Column3.DataType = System.Type.GetType("System.String");
            Column3.ColumnName = "IMEI";

            DataColumn Column4 = new DataColumn();
            Column4.DataType = System.Type.GetType("System.String");
            Column4.ColumnName = "Intensity";

            DataColumn Column5 = new DataColumn();
            Column5.DataType = System.Type.GetType("System.String");
            Column5.ColumnName = "Operators";

            DataColumn Column6 = new DataColumn();
            Column6.DataType = System.Type.GetType("System.String");
            Column6.ColumnName = "DomainName";

            DataColumn Column7 = new DataColumn();
            Column7.DataType = System.Type.GetType("System.String");
            Column7.ColumnName = "DeviceName";

            MeasReportDataTable.Columns.Add(Column0);
            MeasReportDataTable.Columns.Add(Column1);
            MeasReportDataTable.Columns.Add(Column2);
            MeasReportDataTable.Columns.Add(Column3);
            MeasReportDataTable.Columns.Add(Column4);
            MeasReportDataTable.Columns.Add(Column5);
            MeasReportDataTable.Columns.Add(Column6);
            MeasReportDataTable.Columns.Add(Column7);
        }

        public void Input(
                            string IMSI,
                            string DTime,
                            string TMSI,
                            string IMEI,
                            string Intensity,
                            string DeviceName
                         )
        {
            //获取号码归属地
            JsonInterFace.PhoneAreaConvertion.Get(IMSI);
            bool Flag = true;
            int Item = 0;

            lock (this.Mutex_DbHelper)
            {
                for (int i = 0; i < MeasReportDataTable.Rows.Count; i++)
                {
                    string _imsi = MeasReportDataTable.Rows[i]["IMSI"].ToString();
                    string _imei = MeasReportDataTable.Rows[i]["IMEI"].ToString();
                    if (IMSI == _imsi && (IMEI == _imei || IMEI == null))
                    {
                        Flag = false;
                        Item = i;
                        break;
                    }
                }

                //添加
                if (Flag)
                {
                    DataRow MeasReportBlackListRw = MeasReportDataTable.NewRow();
                    //IMSI
                    MeasReportBlackListRw[0] = IMSI;
                    //DTime
                    MeasReportBlackListRw[1] = DTime;
                    //TMSI
                    MeasReportBlackListRw[2] = TMSI;
                    //IMEI
                    MeasReportBlackListRw[3] = IMEI;
                    //Intensity
                    MeasReportBlackListRw[4] = Intensity;
                    //Operators (运营商)
                    MeasReportBlackListRw[5] = JsonInterFace.PhoneAreaConvertion.Country + JsonInterFace.PhoneAreaConvertion.Operators;
                    //DomainName(号码归属地)
                    MeasReportBlackListRw[6] = JsonInterFace.PhoneAreaConvertion.Country + JsonInterFace.PhoneAreaConvertion.Location;
                    //DeviceName
                    MeasReportBlackListRw[7] = DeviceName.Split(new char[] { '.' })[DeviceName.Split(new char[] { '.' }).Length - 2] +
                                               "." + DeviceName.Split(new char[] { '.' })[DeviceName.Split(new char[] { '.' }).Length - 1];

                    if (MeasReportDataTable.Rows.Count < Parameters.MeasureReportTotal)
                    {
                        MeasReportDataTable.Rows.Add(MeasReportBlackListRw);
                    }
                    else
                    {
                        MeasReportDataTable.Rows.RemoveAt(0);
                        MeasReportDataTable.Rows.Add(MeasReportBlackListRw);
                    }
                }
                //更新
                else
                {
                    MeasReportDataTable.Rows[Item]["IMSI"] = IMSI;
                    MeasReportDataTable.Rows[Item]["DTime"] = DTime;
                    MeasReportDataTable.Rows[Item]["TMSI"] = TMSI;
                    MeasReportDataTable.Rows[Item]["IMEI"] = IMEI;
                    MeasReportDataTable.Rows[Item]["Intensity"] = Intensity;
                    MeasReportDataTable.Rows[Item]["Operators"] = JsonInterFace.PhoneAreaConvertion.Country + JsonInterFace.PhoneAreaConvertion.Operators;
                    MeasReportDataTable.Rows[Item]["DomainName"] = JsonInterFace.PhoneAreaConvertion.Country + JsonInterFace.PhoneAreaConvertion.Location;
                    MeasReportDataTable.Rows[Item]["DeviceName"] = DeviceName.Split(new char[] { '.' })[DeviceName.Split(new char[] { '.' }).Length - 2] +
                                                                    "." + DeviceName.Split(new char[] { '.' })[DeviceName.Split(new char[] { '.' }).Length - 1];
                }
            }
        }
    }
    #endregion

    #region 系统日志信息
    public class SystemLogsInformation : INotifyPropertyChanged
    {
        private string _dTime;
        private string _object;
        private string _action;
        private string _other;
        private string[] LastLogsCaching = new string[4];

        //系统日志表
        private DataTable sysDataInformation = null;

        public DataTable SysDataInformation
        {
            get
            {
                return sysDataInformation;
            }

            set
            {
                sysDataInformation = value;
                NotifyPropertyChanged("sysDataInformation");
            }
        }

        public string DTime
        {
            get
            {
                return _dTime;
            }

            set
            {
                _dTime = value;
                NotifyPropertyChanged("DTime");
            }
        }

        public string Object
        {
            get
            {
                return _object;
            }

            set
            {
                _object = value;
                NotifyPropertyChanged("Object");
            }
        }

        public string Action
        {
            get
            {
                return _action;
            }

            set
            {
                _action = value;
                NotifyPropertyChanged("Action");
            }
        }

        public string Other
        {
            get
            {
                return _other;
            }

            set
            {
                _other = value;
                NotifyPropertyChanged("Other");
            }
        }

        //构造
        public SystemLogsInformation()
        {
            if (SysDataInformation == null)
            {
                SysDataInformation = new DataTable("SystemLogs");
                initialSysDataInformationSource();
            }
        }

        private void initialSysDataInformationSource()
        {
            DataColumn Column0 = new DataColumn();
            Column0.DataType = System.Type.GetType("System.String");
            Column0.ColumnName = "DTime";

            DataColumn Column1 = new DataColumn();
            Column1.DataType = System.Type.GetType("System.String");
            Column1.ColumnName = "Object";

            DataColumn Column2 = new DataColumn();
            Column2.DataType = System.Type.GetType("System.String");
            Column2.ColumnName = "Action";

            DataColumn Column3 = new DataColumn();
            Column3.DataType = System.Type.GetType("System.String");
            Column3.ColumnName = "Other";

            DataColumn Column4 = new DataColumn();
            Column4.DataType = System.Type.GetType("System.String");
            Column4.ColumnName = "ID";

            SysDataInformation.Columns.Add(Column0);
            SysDataInformation.Columns.Add(Column1);
            SysDataInformation.Columns.Add(Column2);
            SysDataInformation.Columns.Add(Column3);
            SysDataInformation.Columns.Add(Column4);
        }

        public void Input(string logDatetime, string logObject, string logAction, string logOther)
        {
            try
            {
                //发送日志
                string JosnStr = JsonInterFace.GenericSysLogsStruct(logDatetime, logObject, logAction, logOther);
                if (JosnStr != "" && JosnStr != null)
                {
                    if (UDPClientClass.Connected)
                    {
                        JsonInterFace.UDPClient.Send(JosnStr);
                    }
                    else
                    {
                        Parameters.PrintfLogsExtended("UDP Client 失去连接(发送日志显示模块)");
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("发送日志显示模块", ex.Message, ex.StackTrace);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
    }
    #endregion

    #region 手机号码归属地转换获取
    public class PhoneAreaConvertionClass
    {
        private string location;
        private string country;
        private string operators;
        private string isdn;
        private int initResoult;
        private int convertResoult;
        private object _dataLocked;

        public string Location
        {
            get
            {
                return location;
            }

            set
            {
                location = value;
            }
        }

        public string Country
        {
            get
            {
                return country;
            }

            set
            {
                country = value;
            }
        }

        public string Operators
        {
            get
            {
                return operators;
            }

            set
            {
                operators = value;
            }
        }

        public string Isdn
        {
            get
            {
                return isdn;
            }

            set
            {
                isdn = value;
            }
        }

        public int InitResoult
        {
            get
            {
                return initResoult;
            }

            set
            {
                initResoult = value;
            }
        }

        public int ConvertResoult
        {
            get
            {
                return convertResoult;
            }

            set
            {
                convertResoult = value;
            }
        }

        public object DataLocked
        {
            get
            {
                return _dataLocked;
            }

            set
            {
                _dataLocked = value;
            }
        }

        public PhoneAreaConvertionClass()
        {
            //初始化
            InitResoult = JsonInterFace.InitGLFunc();
        }

        public bool Get(string imsi)
        {
            byte[] _location = new byte[128];
            byte[] _country = new byte[128];
            byte[] _operators = new byte[128];
            byte[] _isdn = new byte[64];
            ConvertResoult = 0xFFFF;

            //获取
            lock (Parameters.UseObject)
            {
                ConvertResoult = JsonInterFace.GetLocationAndOprator(imsi, ref _location[0], ref _country[0], ref _operators[0], ref _isdn[0]);
            }

            while (ConvertResoult == 0xFFFF)
            {
                Thread.Sleep(5);
            }

            if (ConvertResoult != 0)
            {
                Location = Encoding.UTF8.GetString(_location, 0, _location.Length).Replace('\0', ' ').Trim();
                if (Location.Equals("")) { Location = "Unknown"; }
                Country = Encoding.UTF8.GetString(_country, 0, _country.Length).Replace('\0', ' ').Trim();
                if (Country.Equals("")) { Country = ""; }
                Operators = Encoding.UTF8.GetString(_operators, 0, _operators.Length).Replace('\0', ' ').Trim();
                if (Operators.Equals("")) { Operators = "Unknown"; }
                Isdn = Encoding.UTF8.GetString(_isdn, 0, _isdn.Length).Replace('\0', ' ').Trim();
                if (Isdn.Equals("")) { Isdn = "Unknown"; }
            }
            else
            {
                Location = "Unknown";
                Country = string.Empty;
                Operators = "Unknown";
                Isdn = "Unknown";
            }
            return true;
        }
    }

    #endregion

    #region JSON粘包处理类
    /// <summary>
    /// JSON粘包处理类
    /// </summary>
    public class StickJsonPackageClass
    {
        private const string HeadData = "{\"AppInfo\":";
        private const byte jsonStartFlag = (int)'{';
        private const byte jsonEndFlag = (int)'}';
        List<string> JsonStr = new List<string>();

        /// <summary>
        /// 粘包获完整JSON串信息
        /// </summary>
        /// <param name="buff"></param>
        /// <returns></returns>
        public string GetJsonDataWithByteArray(byte[] buff)
        {
            int startIndex = -1;
            int endIndex = -1;
            string msgStr = null;

            if (!GetFlagByteArray(buff, ref startIndex, ref endIndex)) { return string.Empty; }

            if (endIndex != -1)
            {
                if (startIndex == -1)
                {
                    Parameters.PrintfLogsExtended("未找到JSON消息起始标志！");
                    JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "未找到JSON消息起始标志！", "数据包处理", "数据包格式异常");
                    JsonInterFace.SourceDataCaching.Delete(0, endIndex);
                    return string.Empty;
                }

                if (startIndex >= endIndex)
                {
                    Parameters.PrintfLogsExtended("JSON消息起始标志错误！");
                    JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "JSON消息起始标志错误！", "数据包处理", "数据包格式异常");
                    JsonInterFace.SourceDataCaching.Delete(0, startIndex);
                    return string.Empty;
                }

                if (endIndex > buff.Length)
                {
                    Parameters.PrintfLogsExtended("JSON消息结束标志错误！");
                    JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "JSON消息结束标志错误！", "数据包处理", "数据包格式异常");
                    return string.Empty;
                }

                try
                {
                    //获取JSON串字节
                    byte[] Data = new byte[endIndex - startIndex];
                    Buffer.BlockCopy(buff, startIndex, Data, 0, endIndex - startIndex);

                    //转为字符串
                    if (Parameters.CharactorCode == Convert.ToByte(CharactorCodeType.UTF8))
                    {
                        msgStr = Encoding.UTF8.GetString(Data);
                    }
                    else
                    {
                        msgStr = Encoding.Default.GetString(Data);
                    }
                    //清理
                    JsonInterFace.SourceDataCaching.Delete(0, endIndex);

                    //返回
                    return msgStr;
                }
                catch (Exception ex)
                {
                    msgStr = "";
                    JsonInterFace.SourceDataCaching.Delete(0, endIndex);
                    Parameters.PrintfLogsExtended(
                                                    "[JSON消息处理失败]" + buff.Length.ToString()
                                                    + "[Buff Length]=" + buff.Length.ToString() + Environment.NewLine
                                                    + "[Start Index]=" + startIndex.ToString() + Environment.NewLine
                                                    + "[End Index]=" + endIndex.ToString() + Environment.NewLine
                                                    , ex.Message
                                                    , ex.StackTrace
                                                 );
                }
            }

            return string.Empty;
        }

        /// <summary>
        /// 从消息中找到一条完整的Json消息。返回Json起始、结束索引号
        /// </summary>
        /// <param name="buff">消息</param>
        /// <param name="startIndex">起始索引</param>
        /// <param name="endIndex">结束索引</param>
        /// <returns>是否有完整Json消息</returns>
        private bool GetFlagByteArray(byte[] buff, ref int startIndex, ref int endIndex)
        {
            startIndex = -1;
            endIndex = -1;
            int i = 0;
            int j = 0;
            //起始标志数
            int sFlagNum = 0;

            try
            {
                for (i = 0; i < buff.Length; i++)
                {
                    if (buff[i] == jsonStartFlag)
                    {
                        j = i;
                        for (j = i + 1; j < buff.Length; j++)
                        {
                            if (buff[j] != '\n' && buff[j] != '\r' && buff[j] != '\t' && buff[j] != ' ')
                            {
                                break;
                            }
                        }

                        if (buff[j] == '"'
                            && (buff[j + 1] == 'A' || buff[j + 1] == 'a')
                            && (buff[j + 2] == 'P' || buff[j + 2] == 'p'))
                        {
                            startIndex = i;
                            sFlagNum = 1;
                        }
                        else
                        {
                            sFlagNum++;
                        }
                    }

                    if (buff[i] == jsonEndFlag)
                    {
                        if (sFlagNum > 0)
                            sFlagNum--;
                        if (sFlagNum == 0)
                        {
                            endIndex = i + 1; //1为sFlag的长度
                            break;
                        }
                    }
                }

                if (endIndex != -1 && startIndex != -1)
                    return true;
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("Json数据起始、结束索引处理异常[i=" + i.ToString() + ",j=" + j.ToString() + "]", ex.Message, ex.StackTrace);
            }

            return false;
        }

        /// <summary>
        /// 从消息中找到一条完整的Json消息。返回Json起始、结束索引号 (优化)
        /// </summary>
        /// <param name="buff">消息</param>
        /// <param name="startIndex">起始索引</param>
        /// <param name="endIndex">结束索引</param>
        /// <returns>是否有完整Json消息</returns>
        private bool GetFlagByteArray2(byte[] buff, ref int startIndex, ref int endIndex)
        {
            try
            {
                startIndex = -1;
                endIndex = -1;
                //起始标志数
                int sFlagNum = 0;
                for (int i = 0; i < buff.Length; i++)
                {
                    if (buff[i] == jsonStartFlag)
                    {
                        int j = i;
                        for (j = i + 1; j < buff.Length; j++)
                        {
                            if (buff[j] != '\n' && buff[j] != '\r' && buff[j] != '\t' && buff[j] != ' ')
                            {
                                break;
                            }
                        }

                        if (buff[j] == '"'
                            && (buff[j + 1] == 'A' || buff[j + 1] == 'a')
                            && (buff[j + 2] == 'P' || buff[j + 2] == 'p'))
                        {
                            startIndex = i;
                            sFlagNum = 1;
                        }
                        else
                        {
                            sFlagNum++;
                        }
                    }

                    if (buff[i] == jsonEndFlag)
                    {
                        if (sFlagNum > 0)
                            sFlagNum--;
                        if (sFlagNum == 0)
                        {
                            endIndex = i + 1; //1为sFlag的长度
                            break;
                        }
                    }
                }

                if (endIndex != -1 && startIndex != -1)
                    return true;
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }

            return false;
        }
    }
    #endregion

    #region 请求设备完成进度状态类
    public class DeviceListRequestStatusClass : INotifyPropertyChanged
    {
        private int _StationCount;
        private int _completeCount;
        private int _maxLoading = 100;
        private int _valueLoading = 0;
        private int _aPCount;
        private bool _error;
        private bool _hasDeviceList = false;

        private Visibility _loadingWindowStatu = Visibility.Visible;

        public event PropertyChangedEventHandler PropertyChanged;

        public void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }

        public int StationCount
        {
            get
            {
                return _StationCount;
            }

            set
            {
                _StationCount = value;
                NotifyPropertyChanged("StationCount");
            }
        }

        public int CompleteCount
        {
            get
            {
                return _completeCount;
            }

            set
            {
                _completeCount = value;
                NotifyPropertyChanged("CompleteCount");
            }
        }

        public int MaxLoading
        {
            get
            {
                return _maxLoading;
            }

            set
            {
                _maxLoading = value;
                NotifyPropertyChanged("MaxLoading");
            }
        }

        public int ValueLoading
        {
            get
            {
                return _valueLoading;
            }

            set
            {
                _valueLoading = value;
                NotifyPropertyChanged("ValueLoading");
            }
        }

        public Visibility LoadingWindowStatu
        {
            get
            {
                return _loadingWindowStatu;
            }

            set
            {
                _loadingWindowStatu = value;
                NotifyPropertyChanged("LoadingWindowStatu");
            }
        }

        public bool Error
        {
            get
            {
                return _error;
            }

            set
            {
                _error = value;
            }
        }

        public int APCount
        {
            get
            {
                return _aPCount;
            }

            set
            {
                _aPCount = value;
            }
        }

        public bool HasDeviceList
        {
            get
            {
                return _hasDeviceList;
            }

            set
            {
                _hasDeviceList = value;
            }
        }

        /// <summary>
        /// 构造
        /// </summary>
        public DeviceListRequestStatusClass()
        {

        }

        /// <summary>
        /// 初始化
        /// </summary>
        public void InitStatus()
        {
            StationCount = 0;
            CompleteCount = 0;
        }

    }
    #endregion

    #region 自定义用户类型
    public class UserTypesParameterClass : INotifyPropertyChanged
    {
        private int _iD;
        private bool _setting;
        private string _userType;
        private string _backGroundColor;
        private bool _alert;

        public event PropertyChangedEventHandler PropertyChanged;

        public void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }

        public int ID
        {
            get
            {
                return _iD;
            }

            set
            {
                _iD = value;
                NotifyPropertyChanged("ID");
            }
        }

        public bool Setting
        {
            get
            {
                return _setting;
            }

            set
            {
                _setting = value;
                NotifyPropertyChanged("Setting");
            }
        }

        public string UserType
        {
            get
            {
                return _userType;
            }

            set
            {
                _userType = value;
                NotifyPropertyChanged("UserType");
            }
        }

        public string BackGroundColor
        {
            get
            {
                return _backGroundColor;
            }

            set
            {
                _backGroundColor = value;
                NotifyPropertyChanged("BackGroundColor");
            }
        }

        public bool Alert
        {
            get
            {
                return _alert;
            }

            set
            {
                _alert = value;
                NotifyPropertyChanged("Alert");
            }
        }
    }
    #endregion

    #region 操作状态类
    public class ActionResultStatusClass : INotifyPropertyChanged
    {
        private bool _finished = true;
        private object _finishedLock = null;
        private double _submitBarMax = 100;
        private double _submitBarStep = 0;
        private double _finishedBarMax = 100;
        private double _finishedBarStep = 0;
        private string _configType = string.Empty;
        private bool _noResultErrorDeviceName = true;
        private string _resoultStatus = string.Empty;
        private string _carrier = string.Empty;
        private int _aPCount = 0;

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyProptertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }

        public ActionResultStatusClass()
        {
            if (FinishedLock == null)
            {
                FinishedLock = new object();
            }
        }

        public bool Finished
        {
            get
            {
                return _finished;
            }

            set
            {
                _finished = value;
            }
        }

        public object FinishedLock
        {
            get
            {
                return _finishedLock;
            }

            set
            {
                _finishedLock = value;
            }
        }

        public double SubmitBarMax
        {
            get
            {
                return _submitBarMax;
            }

            set
            {
                _submitBarMax = value;
                NotifyProptertyChanged("SubmitBarMax");
            }
        }

        public double SubmitBarStep
        {
            get
            {
                return _submitBarStep;
            }

            set
            {
                _submitBarStep = value;
                NotifyProptertyChanged("SubmitBarStep");
            }
        }

        public double FinishedBarMax
        {
            get
            {
                return _finishedBarMax;
            }

            set
            {
                _finishedBarMax = value;
                NotifyProptertyChanged("FinishedBarMax");
            }
        }

        public double FinishedBarStep
        {
            get
            {
                return _finishedBarStep;
            }

            set
            {
                _finishedBarStep = value;
                NotifyProptertyChanged("FinishedBarStep");
            }
        }

        public string ConfigType
        {
            get
            {
                return _configType;
            }

            set
            {
                _configType = value;
                NotifyProptertyChanged("ConfigType");
            }
        }

        public bool NoResultErrorDeviceName
        {
            get
            {
                return _noResultErrorDeviceName;
            }

            set
            {
                _noResultErrorDeviceName = value;
                NotifyProptertyChanged("NoResultErrorDeviceName");
            }
        }

        public string ResoultStatus
        {
            get
            {
                return _resoultStatus;
            }

            set
            {
                _resoultStatus = value;
                NotifyProptertyChanged("ResoultStatus");
            }
        }

        public string Carrier
        {
            get
            {
                return _carrier;
            }

            set
            {
                _carrier = value;
                NotifyProptertyChanged("Carrier");
            }
        }

        public int APCount
        {
            get
            {
                return _aPCount;
            }

            set
            {
                _aPCount = value;
                NotifyProptertyChanged("APCount");
            }
        }
    }
    #endregion

    #region 批量配置导出远程地址信息类
    public class BatchConfigurationOutputParameterClass
    {
        private string ftpUsrName;
        private string ftpPwd;
        private string ftpRootDir;
        private string ftpServerIp;
        private string ftpPort;
        private string fileName;
        private string localDir;

        public string FtpUsrName
        {
            get
            {
                return ftpUsrName;
            }

            set
            {
                ftpUsrName = value;
            }
        }

        public string FtpPwd
        {
            get
            {
                return ftpPwd;
            }

            set
            {
                ftpPwd = value;
            }
        }

        public string FtpRootDir
        {
            get
            {
                return ftpRootDir;
            }

            set
            {
                ftpRootDir = value;
            }
        }

        public string FtpServerIp
        {
            get
            {
                return ftpServerIp;
            }

            set
            {
                ftpServerIp = value;
            }
        }

        public string FtpPort
        {
            get
            {
                return ftpPort;
            }

            set
            {
                ftpPort = value;
            }
        }

        public string FileName
        {
            get
            {
                return fileName;
            }

            set
            {
                fileName = value;
            }
        }

        public string LocalDir
        {
            get
            {
                return localDir;
            }

            set
            {
                localDir = value;
            }
        }
    }
    #endregion

    #region 媒体播报状态机
    public class FSMClass
    {
        private byte _OtherListStauts;
        private byte _BlackListStatus;
        private byte _WhiteListStatus;
        private object _StatusLock = null;

        public FSMClass()
        {
            if (StatusLock == null)
            {
                StatusLock = new object();
            }
        }

        public byte OtherListStauts
        {
            get
            {
                return _OtherListStauts;
            }

            set
            {
                _OtherListStauts = value;
            }
        }

        public byte BlackListStatus
        {
            get
            {
                return _BlackListStatus;
            }

            set
            {
                _BlackListStatus = value;
            }
        }

        public byte WhiteListStatus
        {
            get
            {
                return _WhiteListStatus;
            }

            set
            {
                _WhiteListStatus = value;
            }
        }

        public object StatusLock
        {
            get
            {
                return _StatusLock;
            }

            set
            {
                _StatusLock = value;
            }
        }

        //用户类型
        public void Input(int UserType)
        {
            lock (StatusLock)
            {
                switch (UserType)
                {
                    case 0:
                        WhiteListStatus = 1;
                        break;
                    case 1:
                        BlackListStatus = 1;
                        break;
                    case 2:
                        OtherListStauts = 1;
                        break;
                    default:
                        WhiteListStatus = 0;
                        BlackListStatus = 0;
                        OtherListStauts = 0;
                        break;
                }
            }
        }

        //重置
        public void Reset(bool BlackList, bool WhiteList, bool OtherList)
        {
            if (BlackList)
            {
                BlackListStatus = 0;
            }

            if (WhiteList)
            {
                WhiteListStatus = 0;
            }

            if (OtherList)
            {
                OtherListStauts = 0;
            }
        }
    }
    #endregion

    #region 地图显示
    public class StationMapClass : INotifyPropertyChanged
    {
        private string deviceName;
        private string fullName;
        private string lng;
        private string lat;
        private string des;
        private bool isStation;
        private bool setExistence;

        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
        public string DeviceName
        {
            get { return deviceName; }
            set
            {
                deviceName = value;
                NotifyPropertyChanged("DeviceName");
            }
        }
        public string FullName
        {
            get { return fullName; }
            set
            {
                fullName = value;
                NotifyPropertyChanged("FullName");
            }
        }
        public string Lng
        {
            get { return lng; }
            set
            {
                lng = value;
                NotifyPropertyChanged("Lng");
            }
        }
        public string Lat
        {
            get { return lat; }
            set
            {
                lat = value;
                NotifyPropertyChanged("Lat");
            }
        }
        public bool IsStation
        {
            get { return isStation; }
            set
            {
                isStation = value;
                NotifyPropertyChanged("IsStation");
            }
        }
        public bool SetExistence
        {
            get { return setExistence; }
            set
            {
                setExistence = value;
                NotifyPropertyChanged("SetExistence");
            }
        }
        public string Des
        {
            get { return des; }
            set
            {
                des = value;
                NotifyPropertyChanged("Des");
            }
        }
    }
    #endregion

    #region 分时统计
    public class StatisticalClass : INotifyPropertyChanged
    {
        private DataTable imsiCountDT = null;
        private string imsiTotal;
        private string imsiTotalRmDup;
        private int imsiRow;
        private int imsiRowTotal;
        private int imsiTotalMax;
        private int imsiTotalRmDupMax;
        private Object imsi_DbHelper = null;
        public StatisticalClass()
        {
            if (Imsi_DbHelper == null)
            {
                Imsi_DbHelper = new object();
            }

            if (ImsiCountDT == null)
            {
                ImsiCountDT = new DataTable("ImsiCountList");

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "ID";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "imsiTotal";

                DataColumn Column2 = new DataColumn();
                Column2.DataType = System.Type.GetType("System.String");
                Column2.ColumnName = "ImsiTotalRmDup";

                ImsiCountDT.Columns.Add(Column0);
                ImsiCountDT.Columns.Add(Column1);
                ImsiCountDT.Columns.Add(Column2);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }
        public DataTable ImsiCountDT
        {
            get { return imsiCountDT; }
            set
            {
                imsiCountDT = value;
            }

        }
        public string ImsiTotal
        {
            get { return imsiTotal; }
            set
            {
                imsiTotal = value;
                NotifyPropertyChanged("ImsiTotal");
            }
        }
        public string ImsiTotalRmDup
        {
            get { return imsiTotalRmDup; }
            set
            {
                imsiTotalRmDup = value;
                NotifyPropertyChanged("ImsiTotalRmDup");
            }
        }
        public int ImsiRow
        {
            get { return imsiRow; }
            set
            {
                imsiRow = value;
                NotifyPropertyChanged("ImsiRow");
            }
        }
        public int ImsiRowTotal
        {
            get { return imsiRowTotal; }
            set
            {
                imsiRowTotal = value;
                NotifyPropertyChanged("ImsiRow");
            }
        }
        public int ImsiTotalRmDupMax
        {
            get { return imsiTotalRmDupMax; }
            set
            {
                imsiTotalRmDupMax = value;
                NotifyPropertyChanged("ImsiTotalRmDupMax");
            }
        }
        public int ImsiTotalMax
        {
            get { return imsiTotalMax; }
            set
            {
                imsiTotalMax = value;
                NotifyPropertyChanged("ImsiTotalMax");
            }
        }

        public object Imsi_DbHelper
        {
            get
            {
                return imsi_DbHelper;
            }
            set
            {
                imsi_DbHelper = value;
            }
        }
        public void ImsiCountInsert(string _id, string _imsiTotal, string _imsiTotalRmDup)
        {
            lock (Imsi_DbHelper)
            {
                DataRow dr = ImsiCountDT.NewRow();
                dr[0] = _id;
                dr[1] = _imsiTotal;
                dr[2] = _imsiTotalRmDup;
                ImsiCountDT.Rows.Add(dr);
            }
        }
    }
    #endregion

    #region 常驻人口
    public class ResidentIMSIClass : INotifyPropertyChanged
    {
        private DataTable residentIMSIDT = null;
        private object resident_DbHelper = null;
        private string id;
        private string imsi;
        private int imsiTotal;
        private int imsiCount;
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string value)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(value));
            }
        }

        public ResidentIMSIClass()
        {
            if (Resident_DbHelper == null)
            {
                Resident_DbHelper = new object();
            }

            if (ResidentIMSIDT == null)
            {
                ResidentIMSIDT = new DataTable("ResidentIMSIList");

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "ID";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "IMSI";

                ResidentIMSIDT.Columns.Add(Column0);
                ResidentIMSIDT.Columns.Add(Column1);
            }
        }
        public DataTable ResidentIMSIDT
        {
            get { return residentIMSIDT; }
            set { residentIMSIDT = value; }
        }
        public object Resident_DbHelper
        {
            get
            {
                return resident_DbHelper;
            }
            set
            {
                resident_DbHelper = value;
            }
        }
        public string ID
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
                NotifyPropertyChanged("ID");
            }
        }
        public string IMSI
        {
            get
            {
                return imsi;
            }
            set
            {
                imsi = value;
                NotifyPropertyChanged("IMSI");
            }
        }
        public int IMSICount
        {
            get
            {
                return imsiCount;
            }
            set
            {
                imsiCount = value;
                NotifyPropertyChanged("IMSICount");
            }
        }
        public int IMSITotal
        {
            get
            {
                return imsiTotal;
            }
            set
            {
                imsiTotal = value;
                NotifyPropertyChanged("IMSITotal");
            }
        }
        public void ResidentIMSIinput(string _id, string _imsi)
        {
            lock (Resident_DbHelper)
            {
                DataRow dr = ResidentIMSIDT.NewRow();
                dr[0] = _id;
                dr[1] = _imsi;
                ResidentIMSIDT.Rows.Add(dr);
            }
        }

    }
    #endregion

    #region 碰撞分析
    public class ConditionsClass : ResidentIMSIClass
    {
        private string fullName;
        private string timeStart;
        private string timeEnd;
        public string FullName
        {
            get { return fullName; }
            set { fullName = value; }
        }
        public string TimeStart
        {
            get { return timeStart; }
            set { timeStart = value; }
        }
        public string TimeEnd
        {
            get { return timeEnd; }
            set { timeEnd = value; }
        }
    }
    #endregion

    #region 伴随分析
    public class AccompanyClass : ConditionsClass
    {
        private DataTable accompanyIMSIDT = null;
        private int imsiCount;
        public AccompanyClass()
        {
            if (Resident_DbHelper == null)
            {
                Resident_DbHelper = new object();
            }

            if (AccompanyIMSIDT == null)
            {
                AccompanyIMSIDT = new DataTable("ResidentIMSIList");

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "ID";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "IMSI";

                AccompanyIMSIDT.Columns.Add(Column0);
                AccompanyIMSIDT.Columns.Add(Column1);
            }
        }
        public DataTable AccompanyIMSIDT
        {
            get { return accompanyIMSIDT; }
            set { accompanyIMSIDT = value; }
        }
        public int ImsiCount
        {
            get { return imsiCount; }
            set { imsiCount = value; }
        }
        public void AccompanyIMSIinput(string _id, string _imsi)
        {
            lock (Resident_DbHelper)
            {
                DataRow dr = AccompanyIMSIDT.NewRow();
                dr[0] = _id;
                dr[1] = _imsi;
                AccompanyIMSIDT.Rows.Add(dr);
            }
        }
    }
    #endregion

    #region IMSI轨迹
    public class IMSIPathClass : ConditionsClass
    {
        private DataTable dtIMSIPath = null;
        private string nameFullPath;
        private string longitude;
        private string latitude;
        public IMSIPathClass()
        {
            if (Resident_DbHelper == null)
            {
                Resident_DbHelper = new object();
            }

            if (DTIMSIPath == null)
            {
                DTIMSIPath = new DataTable("IMSIPathList");

                DataColumn Column0 = new DataColumn();
                Column0.DataType = System.Type.GetType("System.String");
                Column0.ColumnName = "ID";

                DataColumn Column1 = new DataColumn();
                Column1.DataType = System.Type.GetType("System.String");
                Column1.ColumnName = "NameFullPath";

                DataColumn Column2 = new DataColumn();
                Column2.DataType = System.Type.GetType("System.String");
                Column2.ColumnName = "Longitude";

                DataColumn Column3 = new DataColumn();
                Column3.DataType = System.Type.GetType("System.String");
                Column3.ColumnName = "Latitude";

                DTIMSIPath.Columns.Add(Column0);
                DTIMSIPath.Columns.Add(Column1);
                DTIMSIPath.Columns.Add(Column2);
                DTIMSIPath.Columns.Add(Column3);
            }
        }
        public DataTable DTIMSIPath
        {
            get { return dtIMSIPath; }
            set { dtIMSIPath = value; }
        }
        public string NameFullPath
        {
            get { return nameFullPath; }
            set { nameFullPath = value; }
        }
        public string Longitude
        {
            get { return longitude; }
            set { longitude = value; }
        }
        public string Latitude
        {
            get { return latitude; }
            set { latitude = value; }
        }
        public void IMSIPathinput(string _id, string _nameFullPath, string _lng, string _lat)
        {
            lock (Resident_DbHelper)
            {
                DataRow dr = DTIMSIPath.NewRow();
                dr[0] = _id;
                dr[1] = _nameFullPath;
                dr[2] = _lng;
                dr[3] = _lat;
                DTIMSIPath.Rows.Add(dr);
            }
        }
    }
    #endregion

    #region 数据处理、解析类
    public static class JsonInterFace
    {
        #region 字段
        public static UDPClientClass UDPClient = new UDPClientClass();
        private static string clientIP = string.Empty;
        private static int clientPort = 0;
        private static bool connected = false;
        private static bool loginFinish = false;
        private static bool loadedFinish = false;
        private static OperatorsList operatorsList = new OperatorsList();

        public static DataCaching AnalysisDataCaching = new DataCaching();
        private static List<DataCaching> resultDataCaching = new List<DataCaching>();

        //数据解析
        private static Thread AnalysisDataThread = null;

        //监视线程
        private static Thread DaemonThread = null;

        //GSM捕号上报显示
        private static Thread GSMDataInScannerTabThread = null;

        //CDMA捕号上报显示
        private static Thread CDMADataInScannerTabThread = null;

        //黑名单测量曲线图测试(测试用)
        public static Thread AxialChartThread = null;

        public static StringBuilder ResultMessageList = new StringBuilder();
        private static string _remoteHost;
        private static string _remotePort;

        //日志消息处理接口
        public static DatabaseHelper IODataHelper = new DatabaseHelper();

        public static SourceDataCachingClass SourceDataCaching = new SourceDataCachingClass();
        private static Thread StickDataPackageThread = null;

        private static BindTreeView bindTreeViewClass = new BindTreeView();

        private static BindTreeView bindUserDomainTreeViewClass = new BindTreeView();
        private static BindTreeView bindUserDeviceTreeViewClass = new BindTreeView();

        private static TreeView mainDeviceTreeView = new TreeView();
        public static APATTributes APATTributesParameter = new APATTributes();
        public static List<APATTributes> APATTributesLists = new List<APATTributes>();
        private static DeviceNodeListsClass deviceNodeLists = new DeviceNodeListsClass();

        //设备列表请求完成进度
        public static DeviceListRequestStatusClass DeviceListRequestCompleteStatus = new DeviceListRequestStatusClass();

        //LTE
        public static LTEDeviceParameterClass LteDeviceParameter = new LTEDeviceParameterClass();
        public static LTECellNeighParameterClass LteCellNeighParameter = new LTECellNeighParameterClass();
        public static LTESetWorkModeParameterClass LteSetWorkModeParameter = new LTESetWorkModeParameterClass();
        public static LTEDeviceAdvanceSettingClass LteDeviceAdvanceSettingParameter = new LTEDeviceAdvanceSettingClass();
        public static LTEDeviceSystemMaintenence LteDeviceSystemMaintenenceParameter = new LTEDeviceSystemMaintenence();
        public static LTEDeviceObjectSetting LteDeviceObjectSettingParameter = new LTEDeviceObjectSetting();
        public static LTEDeviceDetailClass LTEDeviceDetail = new LTEDeviceDetailClass();
        public static WhiteListSelfLearningParameterClass WhiteListSelfLearningParameter = new WhiteListSelfLearningParameterClass();

        //未知设备(LTE,WCDMA,CDMA,GSM)
        public static UnKnownDeviceListsParameterClass UnKnownDeviceListsParameter = new UnKnownDeviceListsParameterClass();

        //WCDMA
        public static WCDMADeviceParameterClass WCDMADeviceParameter = new WCDMADeviceParameterClass();
        public static WCDMACellNeighParameterClass WCDMACellNeighParameter = new WCDMACellNeighParameterClass();
        public static WCDMASetWorkModeParameterClass WCDMASetWorkModeParameter = new WCDMASetWorkModeParameterClass();
        public static WCDMADeviceAdvanceSettingClass WCDMADeviceAdvanceSettingParameter = new WCDMADeviceAdvanceSettingClass();
        public static WCDMADeviceSystemMaintenence WCDMADeviceSystemMaintenenceParameter = new WCDMADeviceSystemMaintenence();
        public static WCDMADeviceObjectSetting WCDMADeviceObjectSettingParameter = new WCDMADeviceObjectSetting();
        public static WCDMADeviceDetailClass WCDMADeviceDetail = new WCDMADeviceDetailClass();
        //TDS
        public static TDSDeviceParameterClass TDSDeviceParameter = new TDSDeviceParameterClass();
        public static TDSCellNeighParameterClass TDSCellNeighParameter = new TDSCellNeighParameterClass();
        public static TDSSetWorkModeParameterClass TDSSetWorkModeParameter = new TDSSetWorkModeParameterClass();
        public static TDSDeviceAdvanceSettingClass TDSDeviceAdvanceSettingParameter = new TDSDeviceAdvanceSettingClass();
        public static TDSDeviceSystemMaintenence TDSDeviceSystemMaintenenceParameter = new TDSDeviceSystemMaintenence();
        public static TDSDeviceObjectSetting TDSDeviceObjectSettingParameter = new TDSDeviceObjectSetting();
        public static TDSDeviceDetailClass TDSDeviceDetail = new TDSDeviceDetailClass();
        //GSM载波
        public static GSMCarrierParameterClass GSMCarrierParameter = new GSMCarrierParameterClass();
        //GSM设备信息
        public static GSMDeviceParameterClass GSMDeviceParameter = new GSMDeviceParameterClass();
        //GSM系统参数
        public static GSMSystemParameterClass GSMSystemParameter = new GSMSystemParameterClass();
        //GSM系统选项
        public static GSMSystemOptionParameterClass GSMSystemOptionParameter = new GSMSystemOptionParameterClass();
        //GSM射频参数
        public static GSMRadioFrequencyParameterClass GSMRadioFrequencyParameter = new GSMRadioFrequencyParameterClass();
        //GSM注册工作模式
        public static GSMRegModeParameterClass GSMRegModeParameter = new GSMRegModeParameterClass();
        //GSM白名单添加
        public static GSMLibyraryRegAddClass GSMLibyraryRegAdd = new GSMLibyraryRegAddClass();
        //GSM白名单查询
        public static GSMLibyraryRegQueryClass GSMLibyraryRegQuery = new GSMLibyraryRegQueryClass();
        //GSM高级设置
        public static GSMDeviceAdvanceSettingClass GSMDeviceAdvanceSettingParameter = new GSMDeviceAdvanceSettingClass();
        //GSM捕号上报
        public static GSMUEInformationParameterClass GSMUEInformationParameter = new GSMUEInformationParameterClass();
        //GSM设备详细信息
        public static GSMDeviceDetaiInfoClass GSMSelfCarrierOneDetailInfo = new GSMDeviceDetaiInfoClass();
        public static GSMDeviceDetaiInfoClass GSMSelfCarrierTwoDetailInfo = new GSMDeviceDetaiInfoClass();
        //GSM 短信息
        public static GSMSMSParameterClass GSMSMSParameter = new GSMSMSParameterClass();
        //GSM通话记录，短信息记录
        public static GSMDeviceSMSPhoneNumberRecordClass GSMDeviceSMSPhoneNumberRecord = new GSMDeviceSMSPhoneNumberRecordClass();
        //GSM工程设置
        public static GSMDeviceObjectSetting GSMDeviceObjectSettingParameter = new GSMDeviceObjectSetting();

        //CDMA设备信息
        public static CDMADeviceParameterClass CDMADeviceParameter = new CDMADeviceParameterClass();
        //CMDA捕号上报
        public static CDMAUEInformationParameterClass CDMAUEInformationParameter = new CDMAUEInformationParameterClass();
        //CDMA小区参数
        public static CDMACellNeighParameterClass CDMACellNeighParameter = new CDMACellNeighParameterClass();
        //CDMA多载波
        public static CDMAMultiCarrierParameterClass CDMAMultiCarrierParameter = new CDMAMultiCarrierParameterClass();
        //CDMA 高级设置
        public static CDMADeviceAdvanceSettingClass CDMADeviceAdvanceSettingParameter = new CDMADeviceAdvanceSettingClass();
        //CDMA系统维护
        public static CDMADeviceSystemMaintenence CDMADeviceSystemMaintenenceParameter = new CDMADeviceSystemMaintenence();
        //CDMA工程设置
        public static CDMADeviceObjectSetting CDMADeviceObjectSettingParameter = new CDMADeviceObjectSetting();
        //CDMA设备详细信息
        public static CDMADeviceDetailClass CDMADeviceDetail = new CDMADeviceDetailClass();
        //IMSI管理类
        public static CDMAIMSIControlInfoClass CDMAIMSIControlInfo = new CDMAIMSIControlInfoClass();
        //GSMV2上报UE主叫信息
        public static CDMAUEReportInfoClass CDMAUEReportInfo = new CDMAUEReportInfoClass();
        //GSMV2 FAP配置下发短信号码和内容
        public static CDMAConfigSMSMSGClass CDMAConfigSMSMSG = new CDMAConfigSMSMSGClass();

        //GSMV2载波
        public static GSMV2CarrierParameterClass GSMV2CarrierParameter = new GSMV2CarrierParameterClass();
        //GSMV2设备信息
        public static GSMV2DeviceParameterClass GSMV2DeviceParameter = new GSMV2DeviceParameterClass();
        //GSMV2小区参数
        public static GSMV2CellNeighParameterClass GSMV2CellNeighParameter = new GSMV2CellNeighParameterClass();
        //GSMV2高级设置
        public static GSMV2DeviceAdvanceSettingClass GSMV2DeviceAdvanceSettingParameter = new GSMV2DeviceAdvanceSettingClass();
        //GSMV2捕号上报
        public static GSMV2UEInformationParameterClass GSMV2UEInformationParameter = new GSMV2UEInformationParameterClass();
        //GSMV2设备详细信息
        public static GSMV2DeviceDetailClass GSMV2SelfCarrierOneDetailInfo = new GSMV2DeviceDetailClass();
        public static GSMV2DeviceDetailClass GSMV2SelfCarrierTwoDetailInfo = new GSMV2DeviceDetailClass();
        //GSMV2系统维护
        public static GSMV2DeviceSystemMaintenence GSMV2DeviceSystemMaintenenceParameter = new GSMV2DeviceSystemMaintenence();
        //GSMV2工程设置
        public static GSMV2DeviceObjectSetting GSMV2DeviceObjectSettingParameter = new GSMV2DeviceObjectSetting();
        //IMSI管理类
        public static GSMV2IMSIControlInfoClass GSMV2IMSIControlInfo = new GSMV2IMSIControlInfoClass();
        //GSMV2 GSM 通话记录 短信记录
        public static GSMPhoneNumberSMSRecordInfoClass GSMPhoneNumberSMSRecordInfo = new GSMPhoneNumberSMSRecordInfoClass();
        //GSMV2上报UE主叫信息
        public static GSMV2UEReportInfoClass GSMV2UEReportInfo = new GSMV2UEReportInfoClass();
        //GSMV2 FAP配置下发短信号码和内容
        public static GSMV2ConfigSMSMSGClass GSMV2ConfigSMSMSG = new GSMV2ConfigSMSMSGClass();

        //操作完成状态
        public static ActionResultStatusClass ActionResultStatus = new ActionResultStatusClass();

        private static FTPServerInfo fTPServerConnection = new FTPServerInfo();
        private static ProgressBarInfoClass progressBarInfo = new ProgressBarInfoClass();

        public static BlackListClass BlackList = new BlackListClass();
        public static WhiteListClass WhiteList = new WhiteListClass();
        public static CustomListClass CustomList = new CustomListClass();
        public static ReDirectionClass reDirection = new ReDirectionClass();

        private static SystemLogsInformation systemLogsInfo = new SystemLogsInformation();
        public static ScannerDataClass ScannerData = new ScannerDataClass();
        private static MeasReportBlackListClass measReportBlackList = new MeasReportBlackListClass();

        //设备列表
        private static object _usrdomainDataLock = null;
        private static IList<CheckBoxTreeModel> _usrdomainData = new List<CheckBoxTreeModel>();

        //非XML接口
        public static DeviceNoXMLUploadClass DeviceNoXMLUpload = new DeviceNoXMLUploadClass();

        //同步状态信息
        public static SYNCInfoClass SYNCInfo = new SYNCInfoClass();

        //系统数据粘包状态
        public static SystemRuningStickPackageStatusClass SystemRuningStickPackageStatus = new SystemRuningStickPackageStatusClass();

        //系统数据解析状态 
        public static SystemRuningAnalysisStatusClass SystemRuningAnalysisStatus = new SystemRuningAnalysisStatusClass();

        //自定义用户类型
        public static UserTypesParameterClass UserTypesParameter = new UserTypesParameterClass();

        //批量配置导出参数
        public static BatchConfigurationOutputParameterClass BatchConfigurationOutputParameter = new BatchConfigurationOutputParameterClass();

        //模块状态
        public static SystemThreadsStatusParametersClass SystemThreadsStatusParameters = new SystemThreadsStatusParametersClass();

        //播报状态机
        public static FSMClass FSM = new FSMClass();

        //地图显示
        public static StationMapClass stationMap = new StationMapClass();

        //分时统计
        public static StatisticalClass statistical = new StatisticalClass();

        //常驻人口分析
        public static ResidentIMSIClass residentIMSI = new ResidentIMSIClass();

        //碰撞分析
        public static ConditionsClass conditionsIMSI = new ConditionsClass();

        //伴随分析
        public static AccompanyClass accompanyIMSI = new AccompanyClass();

        //IMSI轨迹
        public static IMSIPathClass iMSIPath = new IMSIPathClass();

        //译号器
        public static GSMV3DeviceParameterClass GSMV3DeviceParameter = new GSMV3DeviceParameterClass();
        public static GSMV3CellNeighParameterClass GSMV3CellNeighParameter = new GSMV3CellNeighParameterClass();
        public static GSMV3DeviceAdvanceSettingClass GSMV3DeviceAdvanceSetting = new GSMV3DeviceAdvanceSettingClass();
        public static GSMV3DeviceObjectSettingParameterClass GSMV3DeviceObjectSettingParameter = new GSMV3DeviceObjectSettingParameterClass();

        public static SaveReceiveDataToDB SaveReceiveDataToLogDB = null;

        //======获取号码归属地接口======
        [DllImport(@"Lib\PhoneAreaInterface.dll", EntryPoint = "initGLFunc", CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitGLFunc();

        [DllImport(@"Lib\PhoneAreaInterface.dll", EntryPoint = "getLocationAndOprator", CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetLocationAndOprator(string imsi, ref byte location, ref byte country, ref byte opreator, ref byte isdn);
        //============================

        private static PhoneAreaConvertionClass phoneAreaConvertion = new PhoneAreaConvertionClass();
        #endregion

        #region 登录系统信息
        private static List<LoginedInfo> loginUserInfo = new List<LoginedInfo>();
        #endregion

        #region 用户组相关
        private static List<RoleManage> roleManageList = new List<RoleManage>();
        private static RoleManage roleManageInfo = new RoleManage();
        private static ReturnResult addroleResponse = new ReturnResult();
        private static ReturnResult delroleResponse = new ReturnResult();
        #endregion

        #region 用户相关
        private static List<UserManage> userManageList = new List<UserManage>();
        private static UserManage addUserManageList = new UserManage();
        private static UserManage delUserManageList = new UserManage();
        private static ReturnResult adduserResponse = new ReturnResult();
        private static ReturnResult deluserResponse = new ReturnResult();
        private static ReturnResult modifyUserPswResponse = new ReturnResult();
        #endregion

        #region 用户组类型相关
        private static RoletypeManage roletypeManageItems = new RoletypeManage();
        private static ReturnResult addroletypeResponse = new ReturnResult();
        private static ReturnResult delroletypeResponse = new ReturnResult();
        #endregion

        #region 用户-用户组相关
        private static UsergroupManage usergroupManageClass = new UsergroupManage();
        private static ReturnResult addusergroupResponse = new ReturnResult();
        private static ReturnResult delusergroupResponse = new ReturnResult();
        #endregion

        #region 权限相关
        //private static List<PrivilegeManage> privilegeManageList = new List<PrivilegeManage>();
        private static PrivilegeManage privilegeManageClass = new PrivilegeManage();
        private static ReturnResult addprivilegeResponse = new ReturnResult();
        private static ReturnResult delprivilegeResponse = new ReturnResult();
        #endregion

        #region 用户组-权限相关
        private static List<GroupprivilegeManage> groupprivilegeManageList = new List<GroupprivilegeManage>();
        private static ReturnResult addgroupprivilegeResponse = new ReturnResult();
        private static ReturnResult delgroupprivilegeResponse = new ReturnResult();
        private static ReturnResult updategroupprivilegeResponse = new ReturnResult();
        #endregion

        #region 用户-域相关
        private static UsrdomainManage usrdomainManageClass = new UsrdomainManage();
        private static ReturnResult addusrdomainResponse = new ReturnResult();
        private static ReturnResult delusrdomainResponse = new ReturnResult();
        private static ReturnResult updateusrdomainResponse = new ReturnResult();
        #endregion

        #region 历史数据查询
        private static HistoryDataClass historyDataList = new HistoryDataClass();
        private static HistoryDataToCSVClass historyDataToCSVFile = new HistoryDataToCSVClass();

        public static PhoneHistoryDataClass PhoneHistoryData = new PhoneHistoryDataClass();
        public static SMSHistoryDataClass SMSHistoryData = new SMSHistoryDataClass();
        public static PhoneHistoryDataToCSVClass PhoneHistoryDataToCSVFile = new PhoneHistoryDataToCSVClass();
        public static SMSHistoryDataToCSVClass SMSHistoryDataToCSVFile = new SMSHistoryDataToCSVClass();

        #endregion

        #region LTE(电信,移动)
        private static List<LTE_RestartRequestMsg> restartRequest = new List<LTE_RestartRequestMsg>();
        private static List<LTE_ActiveRequestMsg> lteActiveRequest = new List<LTE_ActiveRequestMsg>();
        private static List<LTE_NetWorkModeSettingMsg> lteNetWorkModeSetting = new List<LTE_NetWorkModeSettingMsg>();
        private static List<LTE_DeviceInfoRequestMsg> lteDeviceInfoRequest = new List<LTE_DeviceInfoRequestMsg>();
        private static List<LTE_CellinfoRequestMsg> lteCellinfoRequest = new List<LTE_CellinfoRequestMsg>();
        private static List<LTE_SetEarfcnRequestMsg> setEarfcnRequest = new List<LTE_SetEarfcnRequestMsg>();
        private static List<LTE_GPSSettingRequestMsg> gpsSettingRequest = new List<LTE_GPSSettingRequestMsg>();
        private static List<LTE_NTPSettingRequestMsg> ntpSettingRequest = new List<LTE_NTPSettingRequestMsg>();
        private static List<LTE_SyncInfoSetRequestMsg> syncInfoSetRequest = new List<LTE_SyncInfoSetRequestMsg>();
        private static List<LTE_TimeSettingRequestMsg> timeSettingRequest = new List<LTE_TimeSettingRequestMsg>();
        private static List<LTE_SystemUpgradeRequestMsg> systemUpgradeRequest = new List<LTE_SystemUpgradeRequestMsg>();
        private static List<LTE_LogFileDownLoadRequestMsg> logFileDownLoadRequest = new List<LTE_LogFileDownLoadRequestMsg>();
        private static List<LTE_ProjectSettingRequestMsg> projectSettingRequest = new List<LTE_ProjectSettingRequestMsg>();
        private static LTE_ScannerInformation scannerInformation = new LTE_ScannerInformation(); //扫频结果
        private static TDS_ScannerInformation tdsScannerInformation = new TDS_ScannerInformation();

        /// <summary>
        /// 主构造函数
        /// </summary>
        static JsonInterFace()
        {
            if (GSMDataInScannerTabThread == null)
            {
                GSMDataInScannerTabThread = new Thread(new ThreadStart(GSMUEInformationParameter.GSMDataInScannerTab));
                GSMDataInScannerTabThread.Start();
            }

            if (CDMADataInScannerTabThread == null)
            {
                CDMADataInScannerTabThread = new Thread(new ThreadStart(CDMAUEInformationParameter.CDMADataInScannerTab));
                CDMADataInScannerTabThread.Start();
            }

            if (UsrdomainDataLock == null)
            {
                UsrdomainDataLock = new object();
            }

            if (SaveReceiveDataToLogDB == null)
            {
                SaveReceiveDataToLogDB = new SaveReceiveDataToDB();
            }
        }

        public static string RemoteHost
        {
            get
            {
                return _remoteHost;
            }

            set
            {
                _remoteHost = value;
            }
        }

        public static string RemotePort
        {
            get
            {
                return _remotePort;
            }

            set
            {
                _remotePort = value;
            }
        }
        public static List<LTE_RestartRequestMsg> RestartRequest
        {
            get
            {
                return restartRequest;
            }

            set
            {
                restartRequest = value;
            }
        }

        public static List<LTE_ActiveRequestMsg> LteActiveRequest
        {
            get
            {
                return lteActiveRequest;
            }

            set
            {
                lteActiveRequest = value;
            }
        }

        public static List<LTE_NetWorkModeSettingMsg> LteNetWorkModeSetting
        {
            get
            {
                return lteNetWorkModeSetting;
            }

            set
            {
                lteNetWorkModeSetting = value;
            }
        }

        public static List<LTE_DeviceInfoRequestMsg> LteDeviceInfoRequest
        {
            get
            {
                return lteDeviceInfoRequest;
            }

            set
            {
                lteDeviceInfoRequest = value;
            }
        }

        public static List<LTE_CellinfoRequestMsg> LteCellinfoRequest
        {
            get
            {
                return lteCellinfoRequest;
            }

            set
            {
                lteCellinfoRequest = value;
            }
        }

        public static List<LTE_SetEarfcnRequestMsg> SetEarfcnRequest
        {
            get
            {
                return setEarfcnRequest;
            }

            set
            {
                setEarfcnRequest = value;
            }
        }

        public static List<LTE_GPSSettingRequestMsg> GpsSettingRequest
        {
            get
            {
                return gpsSettingRequest;
            }

            set
            {
                gpsSettingRequest = value;
            }
        }

        public static List<LTE_NTPSettingRequestMsg> NtpSettingRequest
        {
            get
            {
                return ntpSettingRequest;
            }

            set
            {
                ntpSettingRequest = value;
            }
        }

        public static List<LTE_SyncInfoSetRequestMsg> SyncInfoSetRequest
        {
            get
            {
                return syncInfoSetRequest;
            }

            set
            {
                syncInfoSetRequest = value;
            }
        }

        public static List<LTE_TimeSettingRequestMsg> TimeSettingRequest
        {
            get
            {
                return timeSettingRequest;
            }

            set
            {
                timeSettingRequest = value;
            }
        }

        public static List<LTE_SystemUpgradeRequestMsg> SystemUpgradeRequest
        {
            get
            {
                return systemUpgradeRequest;
            }

            set
            {
                systemUpgradeRequest = value;
            }
        }

        public static List<LTE_LogFileDownLoadRequestMsg> LogFileDownLoadRequest
        {
            get
            {
                return logFileDownLoadRequest;
            }

            set
            {
                logFileDownLoadRequest = value;
            }
        }

        public static List<LTE_ProjectSettingRequestMsg> ProjectSettingRequest
        {
            get
            {
                return projectSettingRequest;
            }

            set
            {
                projectSettingRequest = value;
            }
        }

        public static LTE_ScannerInformation ScannerInformation
        {
            get
            {
                return scannerInformation;
            }

            set
            {
                scannerInformation = value;
            }
        }
        public static TDS_ScannerInformation TDSScannerInformation
        {
            get
            {
                return tdsScannerInformation;
            }

            set
            {
                tdsScannerInformation = value;
            }
        }
        public static string ClientIP
        {
            get
            {
                return clientIP;
            }

            set
            {
                clientIP = value;
            }
        }

        public static int ClientPort
        {
            get
            {
                return clientPort;
            }

            set
            {
                clientPort = value;
            }
        }

        public static List<LoginedInfo> LoginUserInfo
        {
            get
            {
                return loginUserInfo;
            }

            set
            {
                loginUserInfo = value;
            }
        }

        public static BindTreeView BindTreeViewClass
        {
            get
            {
                return bindTreeViewClass;
            }

            set
            {
                bindTreeViewClass = value;
            }
        }
        public static BindTreeView BindUserDomainTreeViewClass
        {
            get
            {
                return bindUserDomainTreeViewClass;
            }

            set
            {
                bindUserDomainTreeViewClass = value;
            }
        }
        public static BindTreeView BindUserDeviceTreeViewClass
        {
            get
            {
                return bindUserDeviceTreeViewClass;
            }

            set
            {
                bindUserDeviceTreeViewClass = value;
            }
        }

        public static DeviceNodeListsClass DeviceNodeLists
        {
            get
            {
                return deviceNodeLists;
            }

            set
            {
                deviceNodeLists = value;
            }
        }

        public static List<RoleManage> RoleManageList
        {
            get
            {
                return roleManageList;
            }
            set
            {
                roleManageList = value;
            }
        }
        public static RoleManage RoleManageInfo
        {
            get
            {
                return roleManageInfo;
            }
            set
            {
                roleManageInfo = value;
            }
        }

        public static OperatorsList OperatorsList
        {
            get
            {
                return operatorsList;
            }

            set
            {
                operatorsList = value;
            }
        }
        public static FTPServerInfo FTPServerConnection
        {
            get
            {
                return fTPServerConnection;
            }

            set
            {
                fTPServerConnection = value;
            }
        }
        public static ReDirectionClass ReDirection
        {
            get
            {
                return reDirection;
            }

            set
            {
                reDirection = value;
            }
        }
        public static ProgressBarInfoClass ProgressBarInfo
        {
            get
            {
                return progressBarInfo;
            }

            set
            {
                progressBarInfo = value;
            }
        }
        public static ReturnResult AddroleResponse
        {
            get
            {
                return addroleResponse;
            }

            set
            {
                addroleResponse = value;
            }
        }
        public static ReturnResult DelroleResponse
        {
            get
            {
                return delroleResponse;
            }

            set
            {
                delroleResponse = value;
            }
        }
        public static List<UserManage> UserManageList
        {
            get
            {
                return userManageList;
            }

            set
            {
                userManageList = value;
            }
        }

        public static UserManage AddUserManageList
        {
            get
            {
                return addUserManageList;
            }

            set
            {
                addUserManageList = value;
            }
        }
        public static UserManage DelUserManageList
        {
            get
            {
                return delUserManageList;
            }

            set
            {
                delUserManageList = value;
            }
        }
        public static ReturnResult DeluserResponse
        {
            get
            {
                return deluserResponse;
            }

            set
            {
                deluserResponse = value;
            }
        }
        public static ReturnResult ModifyUserPswResponse
        {
            get
            {
                return modifyUserPswResponse;
            }

            set
            {
                modifyUserPswResponse = value;
            }
        }
        public static ReturnResult AdduserResponse
        {
            get
            {
                return adduserResponse;
            }

            set
            {
                adduserResponse = value;
            }
        }
        public static RoletypeManage RoletypeManageItems
        {
            get
            {
                return roletypeManageItems;
            }

            set
            {
                roletypeManageItems = value;
            }
        }
        public static ReturnResult AddroletypeResponse
        {
            get
            {
                return addroletypeResponse;
            }

            set
            {
                addroletypeResponse = value;
            }
        }
        public static ReturnResult DelroletypeResponse
        {
            get
            {
                return delroletypeResponse;
            }

            set
            {
                delroletypeResponse = value;
            }
        }
        public static UsergroupManage UsergroupManageClass
        {
            get
            {
                return usergroupManageClass;
            }

            set
            {
                usergroupManageClass = value;
            }
        }
        public static ReturnResult AddusergroupResponse
        {
            get
            {
                return addusergroupResponse;
            }

            set
            {
                addusergroupResponse = value;
            }
        }
        public static ReturnResult DelusergroupResponse
        {
            get
            {
                return delusergroupResponse;
            }

            set
            {
                delusergroupResponse = value;
            }
        }
        public static List<GroupprivilegeManage> GroupprivilegeManageList
        {
            get
            {
                return groupprivilegeManageList;
            }

            set
            {
                groupprivilegeManageList = value;
            }
        }//用户组-权限
        public static ReturnResult AddgroupprivilegeResponse
        {
            get
            {
                return addgroupprivilegeResponse;
            }

            set
            {
                addgroupprivilegeResponse = value;
            }
        }
        public static ReturnResult DelgroupprivilegeResponse
        {
            get
            {
                return delgroupprivilegeResponse;
            }

            set
            {
                delgroupprivilegeResponse = value;
            }
        }
        public static ReturnResult UpdategroupprivilegeResponse
        {
            get
            {
                return updategroupprivilegeResponse;
            }

            set
            {
                updategroupprivilegeResponse = value;
            }
        }
        public static UsrdomainManage UsrdomainManageClass
        {
            get
            {
                return usrdomainManageClass;
            }

            set
            {
                usrdomainManageClass = value;
            }
        }//用户-域
        public static ReturnResult AddusrdomainResponse
        {
            get
            {
                return addusrdomainResponse;
            }

            set
            {
                addusrdomainResponse = value;
            }
        }
        public static ReturnResult DelusrdomainResponse
        {
            get
            {
                return delusrdomainResponse;
            }

            set
            {
                delusrdomainResponse = value;
            }
        }
        public static ReturnResult UpdateusrdomainResponse
        {
            get
            {
                return updateusrdomainResponse;
            }

            set
            {
                updateusrdomainResponse = value;
            }
        }
        public static PrivilegeManage PrivilegeManageClass
        {
            get
            {
                return privilegeManageClass;
            }

            set
            {
                privilegeManageClass = value;
            }
        }//用户-权限
        public static HistoryDataClass HistoryDataList
        {
            get
            {
                return historyDataList;
            }
            set
            {
                historyDataList = value;
            }
        }
        public static HistoryDataToCSVClass HistoryDataToCSVFile
        {
            get
            {
                return historyDataToCSVFile;
            }
            set
            {
                historyDataToCSVFile = value;
            }
        }
        public static SystemLogsInformation SystemLogsInfo
        {
            get
            {
                return systemLogsInfo;
            }
            set
            {
                systemLogsInfo = value;
            }
        }

        public static MeasReportBlackListClass MeasReportBlackList
        {
            get
            {
                return measReportBlackList;
            }

            set
            {
                measReportBlackList = value;
            }
        }

        public static IList<CheckBoxTreeModel> UsrdomainData
        {
            get
            {
                return _usrdomainData;
            }

            set
            {
                _usrdomainData = value;
            }
        }

        public static PhoneAreaConvertionClass PhoneAreaConvertion
        {
            get
            {
                return phoneAreaConvertion;
            }

            set
            {
                phoneAreaConvertion = value;
            }
        }

        public static bool Connected
        {
            get
            {
                return connected;
            }

            set
            {
                connected = value;
            }
        }

        public static bool LoginFinish
        {
            get
            {
                return loginFinish;
            }

            set
            {
                loginFinish = value;
            }
        }

        public static object UsrdomainDataLock
        {
            get
            {
                return _usrdomainDataLock;
            }

            set
            {
                _usrdomainDataLock = value;
            }
        }

        public static bool LoadedFinish
        {
            get
            {
                return loadedFinish;
            }

            set
            {
                loadedFinish = value;
            }
        }
        public static StationMapClass StationMap
        {
            get
            {
                return stationMap;
            }

            set
            {
                stationMap = value;
            }
        }
        public static StatisticalClass Statistical
        {
            get
            {
                return statistical;
            }

            set
            {
                statistical = value;
            }
        }
        public static ResidentIMSIClass ResidentIMSI
        {
            get
            {
                return residentIMSI;
            }

            set
            {
                residentIMSI = value;
            }
        }
        public static ConditionsClass ConditionsIMSI
        {
            get
            {
                return conditionsIMSI;
            }

            set
            {
                conditionsIMSI = value;
            }
        }
        public static AccompanyClass AccompanyIMSI
        {
            get
            {
                return accompanyIMSI;
            }

            set
            {
                accompanyIMSI = value;
            }
        }
        public static IMSIPathClass IMSIPath
        {
            get
            {
                return iMSIPath;
            }

            set
            {
                iMSIPath = value;
            }
        }

        #endregion

        #region 显示事件消息
        /// <summary>
        /// 显示事件消息
        /// </summary>
        /// <param name="Msg"></param>
        /// <param name="Type"></param>
        public static void ShowMessage(string Msg, int Type)
        {
            if (Type == 16)
            {
                System.Windows.MessageBox.Show(Msg, "错误", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error, System.Windows.MessageBoxResult.OK, System.Windows.MessageBoxOptions.ServiceNotification);
            }
            else if (Type == 48)
            {
                System.Windows.MessageBox.Show(Msg, "警告", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Warning, System.Windows.MessageBoxResult.OK, System.Windows.MessageBoxOptions.ServiceNotification);
            }
            else if (Type == 64)
            {
                System.Windows.MessageBox.Show(Msg, "信息", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Information, System.Windows.MessageBoxResult.OK, System.Windows.MessageBoxOptions.ServiceNotification);
            }
        }
        #endregion

        #region 查找树结点
        /// <summary>
        /// 查找树结点
        /// </summary>
        /// <param name="item"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        public static TreeViewItem FindTreeViewItem(ItemsControl item, object data)
        {
            TreeViewItem findItem = null;
            bool itemIsExpand = false;
            if (item is TreeViewItem)
            {
                TreeViewItem tviCurrent = item as TreeViewItem;
                itemIsExpand = tviCurrent.IsExpanded;
                if (!tviCurrent.IsExpanded)
                {
                    //如果这个TreeViewItem未展开过，则不能通过ItemContainerGenerator来获得TreeViewItem

                    tviCurrent.SetValue(TreeViewItem.IsExpandedProperty, true);

                    //必须使用UpdaeLayour才能获取到TreeViewItem

                    tviCurrent.UpdateLayout();
                }
            }

            for (int i = 0; i < item.Items.Count; i++)
            {
                TreeViewItem tvItem = (TreeViewItem)item.ItemContainerGenerator.ContainerFromIndex(i);
                if (tvItem == null)
                {
                    continue;
                }
                object itemData = item.Items[i];
                if (itemData == data)
                {
                    findItem = tvItem;
                    break;
                }

                else if (tvItem.Items.Count > 0)
                {
                    findItem = FindTreeViewItem(tvItem, data);

                    if (findItem != null)
                    {
                        break;
                    }
                }
            }

            if (findItem == null)
            {
                TreeViewItem tviCurrent = item as TreeViewItem;

                tviCurrent.SetValue(TreeViewItem.IsExpandedProperty, itemIsExpand);

                tviCurrent.UpdateLayout();
            }
            return findItem;
        }
        #endregion

        #region 递归生成树形数据
        /// <summary>
        /// 递归生成树形数据
        /// </summary>
        /// <param name="delst"></param>
        /// <returns></returns>
        public static List<Node> GenerateTree(int parentid, List<Node> nodes)
        {
            List<Node> RootNodes = nodes.Where(x => x.ParentID == parentid).ToList<Node>();
            List<Node> StructrualNodes = nodes.Where(x => x.ParentID != parentid).ToList<Node>();
            foreach (Node item in RootNodes)
            {
                item.Nodes = GenerateTree(item.SelfID, StructrualNodes);
            }
            return RootNodes;
        }

        #endregion

        #region 获取文件MD5值
        /// <summary>
        /// 获取文件MD5值
        /// </summary>
        /// <param name="fileName">文件绝对路径</param>
        /// <returns>MD5值</returns>
        public static string GetMD5HashFromFile(string fileName)
        {
            StringBuilder MD5Code = new StringBuilder();
            try
            {
                FileStream file = new FileStream(fileName, FileMode.Open);
                System.Security.Cryptography.MD5 md5 = new System.Security.Cryptography.MD5CryptoServiceProvider();
                byte[] retVal = md5.ComputeHash(file);
                file.Close();
                for (int i = 0; i < retVal.Length; i++)
                {
                    MD5Code.Append(retVal[i].ToString("x2"));
                }
            }
            catch (Exception ex)
            {
                JsonInterFace.IODataHelper.SaveLogs(DateTime.Now.ToString(), "获取文件MD5值", ex.Message, ex.StackTrace);
            }
            return MD5Code.ToString();
        }
        #endregion

        #region  获得值+描述
        ///<summary>
        /// 从枚举类型和它的特性读出并返回一个键值对
        ///</summary>
        ///<param name="enumType">Type,该参数的格式为typeof(需要读的枚举类型)</param>
        ///<returns>键值对</returns>
        public static Dictionary<string, string> GetNEnumValueDes(Type enumType)
        {
            Dictionary<string, string> KeyValue = new Dictionary<string, string>();
            Type typeDescription = typeof(DescriptionAttribute);
            System.Reflection.FieldInfo[] fields = enumType.GetFields();
            string strText = string.Empty;
            string strValue = string.Empty;
            foreach (FieldInfo field in fields)
            {
                if (field.FieldType.IsEnum)
                {
                    strValue = ((int)enumType.InvokeMember(field.Name, BindingFlags.GetField, null, null, null)).ToString();
                    object[] arr = field.GetCustomAttributes(typeDescription, true);
                    if (arr.Length > 0)
                    {
                        DescriptionAttribute aa = (DescriptionAttribute)arr[0];
                        strText = aa.Description;
                    }
                    else
                    {
                        strText = field.Name;
                    }
                    KeyValue.Add(strValue, strText);
                }
            }
            return KeyValue;
        }
        #endregion

        /// <summary>
        /// 原始网络数据缓存(字符串)
        /// </summary>
        /// <param name="ResultJsonData">原始字符串数据</param>
        /// <param name="remoteHost">远程IP</param>
        /// <param name="remotePort">远程端口</param>
        public static void Parse(string ResultJsonData, string ResultRemoteHost, String ResultRemoutePort)
        {
            try
            {
                if (ResultJsonData != "" && ResultJsonData != null)
                {
                    SystemRuningStickPackageStatus.CachingDataTotal += 1;

                    RemoteHost = ResultRemoteHost;
                    RemotePort = ResultRemoutePort;

                    lock (SourceDataCaching.LockObject)
                    {
                        byte[] sourceData = Encoding.Default.GetBytes(ResultJsonData);
                        int sourceDataLen = sourceData.Length;

                        byte[] DestinationData = SourceDataCaching.GCaptureInfoDbCaching;
                        int DestinationDataLen = DestinationData.Length;

                        SourceDataCaching.GCaptureInfoDbCaching = new byte[sourceDataLen + DestinationDataLen];

                        //原数据
                        Buffer.BlockCopy(DestinationData, 0, SourceDataCaching.GCaptureInfoDbCaching, 0, DestinationDataLen);
                        //原数据 + 新数据 合并
                        Buffer.BlockCopy(sourceData, 0, SourceDataCaching.GCaptureInfoDbCaching, DestinationDataLen, sourceDataLen);
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("原始网络数据缓存异常", ex.Message, ex.StackTrace);
                JsonInterFace.IODataHelper.SaveLogs(DateTime.Now.ToString(), "原始网络数据缓存异常", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 原始网络数据缓存(字节)
        /// </summary>
        /// <param name="ResultJsonData">原始字节数据</param>
        /// <param name="remoteHost">远程IP</param>
        /// <param name="remotePort">远程端口</param>
        public static void Parse(byte[] ResultJsonData, string ResultRemoteHost, String ResultRemoutePort)
        {
            try
            {
                if (ResultJsonData.Length > 0)
                {
                    SystemRuningStickPackageStatus.CachingDataTotal += 1;

                    RemoteHost = ResultRemoteHost;
                    RemotePort = ResultRemoutePort;

                    lock (SourceDataCaching.LockObject)
                    {
                        byte[] sourceData = ResultJsonData;
                        int sourceDataLen = sourceData.Length;

                        byte[] DestinationData = SourceDataCaching.GCaptureInfoDbCaching;
                        int DestinationDataLen = DestinationData.Length;

                        SourceDataCaching.GCaptureInfoDbCaching = new byte[sourceDataLen + DestinationDataLen];

                        //原数据
                        Buffer.BlockCopy(DestinationData, 0, SourceDataCaching.GCaptureInfoDbCaching, 0, DestinationDataLen);
                        //原数据 + 新数据 合并
                        Buffer.BlockCopy(sourceData, 0, SourceDataCaching.GCaptureInfoDbCaching, DestinationDataLen, sourceDataLen);
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("原始网络数据缓存异常", ex.Message, ex.StackTrace);
                JsonInterFace.IODataHelper.SaveLogs(DateTime.Now.ToString(), "原始网络数据缓存异常", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 启动数据解析
        /// </summary>
        public static void AnalysisDataStart()
        {
            try
            {
                if (AnalysisDataThread == null)
                {
                    AnalysisDataThread = new Thread(new ThreadStart(AnalysisJsonData));
                    AnalysisDataThread.Start();
                }

                if (DaemonThread == null)
                {
                    DaemonThread = new Thread(new ThreadStart(CheckingThreads));
                    DaemonThread.Priority = ThreadPriority.Lowest;
                    DaemonThread.Start();
                }

                //测试用
                //if (AxialChartThread == null)
                //{
                //    AxialChartThread = new Thread(new ThreadStart(ChartBlackListInfo));
                //    AxialChartThread.Start();
                //}
            }
            catch (Exception ex)
            {
                JsonInterFace.IODataHelper.SaveLogs(DateTime.Now.ToString(), "启动数据解析", ex.Message, ex.StackTrace);
            }
        }

        //测试用
        private static void ChartBlackListInfo()
        {
            Random rd = new Random(0);
            while (true)
            {
                try
                {
                    //int rdv = rd.Next(-128, 0);
                    //string DTime = System.DateTime.Now.ToString();
                    //string cmdstr = "{\"ApInfo\":{\"SN\":\"EN1801S117420011\",\"Fullname\":\"设备.TDS测试.TDS-Test\",\"IP\":\"172.17.18.13\",\"Port\":40039,\"Type\":\"LTE_TDD\"},\"Body\":{\"type\":\"meas_report\",\"dic\":{\"id\":\"4773\",\"userType\":\"1\",\"imsi\":\"460015326691390\",\"tmsi\":\"0xdb1fffcd\",\"rsrp\":\"" + rdv.ToString() + "\",\"timeout\":\"10\",\"direction\":\"0\",\"sn\":\"EN1801S117420011\",\"timestamp\":\"" + DTime + "\"},\"n_dic\":null},\"Version\":\"1.0.0.4453\"}";
                    //JsonInterFace.Parse(cmdstr, "127.0.0.1", "14789");

                    //Thread.Sleep(100);

                    //int rdv1 = rd.Next(-128, 0);
                    //string DTime1 = System.DateTime.Now.ToString();
                    //string cmdstr1 = "{\"ApInfo\":{\"SN\":\"EN1801S117420012\",\"Fullname\":\"设备.实验室.地上整机FDD_Band4\",\"IP\":\"172.17.18.13\",\"Port\":40039,\"Type\":\"LTE_TDD\"},\"Body\":{\"type\":\"meas_report\",\"dic\":{\"id\":\"4773\",\"userType\":\"1\",\"imsi\":\"460015326691370\",\"tmsi\":\"0xdb1fffec\",\"rsrp\":\"" + rdv1.ToString() + "\",\"timeout\":\"11\",\"direction\":\"0\",\"sn\":\"EN1801S117420011\",\"timestamp\":\"" + DTime1 + "\"},\"n_dic\":null},\"Version\":\"1.0.0.4453\"}";
                    //JsonInterFace.Parse(cmdstr1, "127.0.0.1", "14789");

                    //string cmdstr1 = Encoding.UTF8.GetString(Encoding.UTF8.GetBytes(System.IO.File.ReadAllText(@"E:\Temp\GSMV2Scanner.txt")));
                    //JsonInterFace.Parse(cmdstr1, "127.0.0.1", "14789");

                    //日志重复测试
                    //byte[] cmdstr1 = Encoding.UTF8.GetBytes(System.IO.File.ReadAllText(@"E:\Temp\心跳.txt"));
                    //JsonInterFace.Parse(cmdstr1, "127.0.0.1", "14789");

                }
                catch (Exception ex)
                {
                    SystemLogsInfo.Input(DateTime.Now.ToString(), ex.Message, ex.StackTrace, "黑名单测量测试数据");
                }
                Thread.Sleep(3000);
            }
        }

        /// <summary>
        /// 守护线程检测模块状态
        /// </summary>
        private static void CheckingThreads()
        {
            while (true)
            {
                Thread.Sleep(10000);
                try
                {
                    if (AnalysisDataThread != null)
                    {
                        if (AnalysisDataThread.ThreadState == ThreadState.Running)
                        {
                            Parameters.PrintfLogsExtended("数据解析事务", "AnalysisDataThread is Running！IsAlive[" + AnalysisDataThread.IsAlive.ToString() + "]");
                        }
                        else if (AnalysisDataThread.ThreadState == ThreadState.Background)
                        {
                            Parameters.PrintfLogsExtended("数据解析事务", "AnalysisDataThread is Background！IsAlive[" + AnalysisDataThread.IsAlive.ToString() + "]");
                        }
                        else if (AnalysisDataThread.ThreadState == ThreadState.Stopped)
                        {
                            Parameters.PrintfLogsExtended("数据解析事务", "AnalysisDataThread is Stopped！IsAlive[" + AnalysisDataThread.IsAlive.ToString() + "]");
                        }
                        else if (AnalysisDataThread.ThreadState == ThreadState.Suspended)
                        {
                            Parameters.PrintfLogsExtended("数据解析事务", "AnalysisDataThread is Suspended！IsAlive[" + AnalysisDataThread.IsAlive.ToString() + "]");
                        }
                        else if (AnalysisDataThread.ThreadState == ThreadState.Unstarted)
                        {
                            Parameters.PrintfLogsExtended("数据解析事务", "AnalysisDataThread is Unstarted！IsAlive[" + AnalysisDataThread.IsAlive.ToString() + "]");
                        }
                        else if (AnalysisDataThread.ThreadState == ThreadState.WaitSleepJoin)
                        {
                            Parameters.PrintfLogsExtended("数据解析事务", "AnalysisDataThread is WaitSleepJoin！IsAlive[" + AnalysisDataThread.IsAlive.ToString() + "]");
                        }
                        else if (AnalysisDataThread.ThreadState == ThreadState.Aborted)
                        {
                            Parameters.PrintfLogsExtended("数据解析事务", "AnalysisDataThread is Aborted！IsAlive[" + AnalysisDataThread.IsAlive.ToString() + "]");
                        }
                    }
                    else
                    {
                        Parameters.PrintfLogsExtended("数据解析事务", "AnalysisDataThread is Null！");
                    }

                    //数据缓存粘包线程
                    if (StickDataPackageThread != null)
                    {
                        if (StickDataPackageThread.ThreadState == ThreadState.Running)
                        {
                            Parameters.PrintfLogsExtended("数据缓存事务", "StickDataPackageThread is Running！IsAlive[" + StickDataPackageThread.IsAlive.ToString() + "]");
                        }
                        else if (StickDataPackageThread.ThreadState == ThreadState.Background)
                        {
                            Parameters.PrintfLogsExtended("数据缓存事务", "StickDataPackageThread is Background！IsAlive[" + StickDataPackageThread.IsAlive.ToString() + "]");
                        }
                        else if (StickDataPackageThread.ThreadState == ThreadState.Stopped)
                        {
                            Parameters.PrintfLogsExtended("数据缓存事务", "StickDataPackageThread is Stopped！IsAlive[" + StickDataPackageThread.IsAlive.ToString() + "]");
                        }
                        else if (StickDataPackageThread.ThreadState == ThreadState.Suspended)
                        {
                            Parameters.PrintfLogsExtended("数据缓存事务", "StickDataPackageThread is Suspended！IsAlive[" + StickDataPackageThread.IsAlive.ToString() + "]");
                        }
                        else if (StickDataPackageThread.ThreadState == ThreadState.Unstarted)
                        {
                            Parameters.PrintfLogsExtended("数据缓存事务", "StickDataPackageThread is Unstarted！IsAlive[" + StickDataPackageThread.IsAlive.ToString() + "]");
                        }
                        else if (StickDataPackageThread.ThreadState == ThreadState.WaitSleepJoin)
                        {
                            Parameters.PrintfLogsExtended("数据缓存事务", "StickDataPackageThread is WaitSleepJoin！IsAlive[" + StickDataPackageThread.IsAlive.ToString() + "]");
                        }
                        else if (StickDataPackageThread.ThreadState == ThreadState.Aborted)
                        {
                            Parameters.PrintfLogsExtended("数据缓存事务", "StickDataPackageThread is Aborted！IsAlive[" + StickDataPackageThread.IsAlive.ToString() + "]");
                        }
                    }
                    else
                    {
                        Parameters.PrintfLogsExtended("数据缓存事务", "StickDataPackageThread is Null！");
                    }
                }
                catch (Exception ex)
                {
                    Parameters.PrintfLogsExtended("守护线程异常终止", ex.Message, ex.StackTrace);
                }
            }
        }

        /// <summary>
        /// 停止数据解析
        /// </summary>
        public static void AnalysisDataStop()
        {
            try
            {
                if (AnalysisDataThread.ThreadState == ThreadState.Running || AnalysisDataThread.ThreadState == ThreadState.WaitSleepJoin)
                {
                    AnalysisDataThread.Abort();
                    AnalysisDataThread.Join();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 启动数据粘包处理线程
        /// </summary>
        public static void StickDataPackageStart()
        {
            if (StickDataPackageThread == null)
            {
                StickDataPackageThread = new Thread(new ThreadStart(NetDataCachingControl));
                StickDataPackageThread.Start();
            }
        }

        /// <summary>
        /// 网络数据粘包处理
        /// </summary>
        private static void NetDataCachingControl()
        {
            string resultJsonStr = string.Empty;
            //粘包处理类
            StickJsonPackageClass StickJsonPackage = new StickJsonPackageClass();
            while (true)
            {
                resultJsonStr = string.Empty;
                try
                {
                    //粘包
                    SystemRuningStickPackageStatus.CachingPoolTotal = SourceDataCaching.GCaptureInfoDbCaching.Length;
                    SystemRuningStickPackageStatus.CachingTotal = 1;
                    SystemRuningStickPackageStatus.CachingActionStep = 0;

                    if (SystemRuningStickPackageStatus.CachingPoolTotal > 0)
                    {
                        //粘包工作状态
                        SystemRuningStickPackageStatus.CachingStatu = "正在工作...";
                        SystemRuningStickPackageStatus.CachingActionStep++;

                        //粘包返回JSON串
                        lock (SourceDataCaching.LockObject)
                        {
                            resultJsonStr = StickJsonPackage.GetJsonDataWithByteArray(SourceDataCaching.GCaptureInfoDbCaching);
                        }
                    }
                    else
                    {
                        SystemRuningStickPackageStatus.CachingStatu = "空闲...";
                        Thread.Sleep(50);
                        continue;
                    }

                    //JSON串缓存
                    if (resultJsonStr != "" && resultJsonStr != null)
                    {
                        try
                        {
                            lock (SourceDataCaching.LockJsonCaching)
                            {
                                string[] DestinationData = SourceDataCaching.GCaptureInfoJsonCaching;
                                int DestinationDataLen = DestinationData.Length;

                                SourceDataCaching.GCaptureInfoJsonCaching = new string[DestinationDataLen + 1];

                                for (int i = 0; i < SourceDataCaching.GCaptureInfoJsonCaching.Length - 1; i++)
                                {
                                    SourceDataCaching.GCaptureInfoJsonCaching[i] = DestinationData[i];
                                }

                                SourceDataCaching.GCaptureInfoJsonCaching[DestinationDataLen] = resultJsonStr;
                            }
                        }
                        catch (Exception ex)
                        {
                            SystemLogsInfo.Input(DateTime.Now.ToString(), ex.Message, "JSON串缓存失败", ex.StackTrace);
                        }
                    }
                }
                catch (Exception ex)
                {
                    IODataHelper.SaveLogs(DateTime.Now.ToString(), "Json消息处理异常", ex.Message, ex.StackTrace);
                    Parameters.PrintfLogsExtended("Json消息处理异常", ex.Message, ex.StackTrace);
                    Thread.Sleep(100);
                }
            }
        }

        /// <summary>
        /// --- 数据解析 ---
        /// </summary>
        private static void AnalysisJsonData()
        {
            string ErrorData = string.Empty;
            DataCaching DataStruct = new DataCaching();
            string aData = string.Empty;

            while (true)
            {
                try
                {
                    //------------------------------------------------------
                    lock (SourceDataCaching.LockJsonCaching)
                    {
                        SystemRuningAnalysisStatus.AnalysisDataTotal = SourceDataCaching.GCaptureInfoJsonCaching.Length;

                        SystemRuningAnalysisStatus.AnalysisTotal = 1;
                        SystemRuningAnalysisStatus.AnalysisActionStep = 0;

                        if (SystemRuningAnalysisStatus.AnalysisDataTotal > 0)
                        {
                            //数据解析工作
                            SystemRuningAnalysisStatus.AnalysisStatu = "正在解析...";
                            SystemRuningAnalysisStatus.AnalysisActionStep++;

                            //取值并生成JSON结构数据(数据重复丢弃)
                            aData = SourceDataCaching.GCaptureInfoJsonCaching[0];
                            DataStruct.ResultJsonData = JsonConvert.DeserializeObject<MsgStruct.InterModuleMsgStruct>(aData);
                            DataStruct.RemoteHost = RemoteHost;
                            DataStruct.RemotePort = Convert.ToInt32((RemotePort == "") ? "0" : RemotePort);
                        }
                        else
                        {
                            SystemRuningAnalysisStatus.AnalysisStatu = "空闲...";
                            Thread.Sleep(100);
                            continue;
                        }
                    }

                    //------------------------------------------------------
                    //通用错误事件
                    if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.general_error_result.ToLower()))
                    {
                        Error_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //LTE WCDMA Scanner捕号上报响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.scanner.ToLower()))
                    {
                        if (LoginFinish)
                        {
                            APScannerReportResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                    }
                    //心跳响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_heartbeat_response.ToLower()))
                    {
                        AppTOServerHeartResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //设备状态改变响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(Main2ApControllerMsgType.ApStatusChange.ToLower()))
                    {
                        OnDeviceStatuChanged(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //登录数据响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_login_response.ToLower()))
                    {
                        LoginedResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //域列表响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_all_domain_response.ToLower()))
                    {
                        DomainNameListsResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //设备列表响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_all_device_response.ToLower()))
                    {
                        DeviceListsResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取服务端基本参数配置
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_ServerConfig_Response.ToLower()))
                    {
                        ServerBaseParameterResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取用户组
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_all_role_response))
                    {
                        All_role_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //增加用户组
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_add_role_response))
                    {
                        Add_role_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //删除用户组
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_del_role_response))
                    {
                        Del_role_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取用户
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_all_user_response))
                    {
                        All_user_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //增加用户
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_add_user_response))
                    {
                        Add_user_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //删除用户
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_del_user_response))
                    {
                        Del_user_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //修改用户密码
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_modify_user_psw_response))
                    {
                        Modify_user_psw_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取用户组类型
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_all_roletype_response))
                    {
                        All_roletype_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //添加用户组类型
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_add_roletype_response))
                    {
                        Add_roletype_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //删除用户组类型
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_del_roletype_response))
                    {
                        Del_roletype_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取用户-用户组
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_all_usr_group_response))
                    {
                        All_user_group_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //添加用户-用户组
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_add_usr_group_response))
                    {
                        Add_user_group_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //删除用户-用户组
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_del_usr_group_response))
                    {
                        Del_user_group_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //请求用户组权限
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_all_group_privilege_response))
                    {
                        All_group_privilege_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //请求添加用户组权限
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_add_group_privilege_response))
                    {
                        Add_group_privilege_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //请求删除用户组权限
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_del_group_privilege_response))
                    {
                        Del_group_privilege_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //请求更新用户组权限
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_update_group_privilege_response))
                    {
                        Update_group_privilege_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //请求用户权限
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_all_privilege_response))
                    {
                        All_privilege_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //请求添加用户权限
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_add_privilege_response))
                    {
                        Add_privilege_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //请求删除用户权限
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_del_privilege_response))
                    {
                        Del_privilege_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //请求用户-域
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_all_usr_domain_response))
                    {
                        All_usr_domain_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //请求添加用户-域
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_add_usr_domain_response))
                    {
                        Add_usr_domain_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //请求删除用户-域
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_del_usr_domain_response))
                    {
                        Del_usr_domain_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //请求更新用户-域
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_update_usr_domain_response))
                    {
                        Update_usr_domain_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //添加域名响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_add_domain_response.ToLower()))
                    {
                        AddDomainNodeNameResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //重命名域名响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_rename_domain_response.ToLower()))
                    {
                        ReNameDomainNodeNameResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //删出域名响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_del_domain_response.ToLower()))
                    {
                        DeleteDomainNameResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //添加设备设信息响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_add_device_response.ToLower()))
                    {
                        AddDeviceNameResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //更新设备信息响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_update_device_response.ToLower()))
                    {
                        AddDeviceNameUpdateParametersResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //删除设备信息响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_del_device_response.ToLower()))
                    {
                        DeleteDeviceNameResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //通用参数请求响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_GenPara_Response.ToLower()))
                    {
                        GetAPGenParaResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //扫频参数配置
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.set_son_earfcn_response.ToLower()))
                    {
                        ApSetSonEarfcnResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //小区信息配置响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.set_configuration_result.ToLower()))
                    {
                        APSetConfigurationResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //GPS信息配置响应 或 NTP信息配置响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.set_system_response.ToLower()))
                    {
                        Regex regexGPS = new Regex("GPS");
                        Regex regexNTP = new Regex("NTP");

                        //GPS
                        if (regexGPS.Match(Parameters.ConfigType).Success)
                        {
                            APGPSConfigrationResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        //NTP
                        else if (regexNTP.Match(Parameters.ConfigType).Success)
                        {
                            NTPConfigrationResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                    }
                    //同步源信息配置响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.Syncinfo_set_response.ToLower()))
                    {
                        APSyncinfoSettingResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }

                    //时间段信息配置响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_set_GenPara_ActiveTime_Response.ToLower()))
                    {
                        APPeriodTimeConrolResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取设备详细信息响应(LTE,WCDMA,GSM,CDMA)
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_device_detail_response.ToLower()))
                    {
                        GetDeviceDetailResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //请求系统升级响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_ftp_oper_response.ToLower()))
                    {
                        APUpgradeSystemResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //执行AP系统升级完成响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_ftp_update_response.ToLower()))
                    {
                        APUpgradeSystemFinishedResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //黑白名单,自定义名单查询响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_all_bwlist_response.ToLower()))
                    {
                        Regex regexBlackList = new Regex("BlackList");
                        Regex regexWhiteList = new Regex("WhiteList");
                        Regex regexCustomList = new Regex("OtherList");

                        //黑名单
                        if (regexBlackList.Match(Parameters.ConfigType).Success)
                        {
                            APBlackListResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        //白名单
                        else if (regexWhiteList.Match(Parameters.ConfigType).Success)
                        {
                            APWhiteListResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        //普通用户
                        else if (regexCustomList.Match(Parameters.ConfigType).Success)
                        {
                            APCustomListResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                    }
                    //添加黑白名单,普通用户响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_add_bwlist_response.ToLower()))
                    {
                        Regex regexBlackList = new Regex("BlackList");
                        Regex regexWhiteList = new Regex("WhiteList");
                        Regex regexCustomList = new Regex("OtherList");
                        //黑名单
                        if (regexBlackList.Match(Parameters.ConfigType).Success)
                        {
                            APBlackListDataAddResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        //白名单
                        else if (regexWhiteList.Match(Parameters.ConfigType).Success)
                        {
                            APWhiteListDataAddResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        //普通用户
                        else if (regexCustomList.Match(Parameters.ConfigType).Success)
                        {
                            APCustomListDataAddResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                    }
                    //删除黑白名单普通用户响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_del_bwlist_response.ToLower()))
                    {
                        string regexBlackList = "BlackList";
                        string regexWhiteList = "WhiteList";
                        string regexCustomList = "OtherList";
                        string regexClearWhiteList = "ClearWhiteList";
                        string regexClearBlackList = "ClearBlackList";
                        string regexClearCustomList = "ClearCustomList";

                        //黑名单
                        if (regexBlackList == Parameters.ConfigType)
                        {
                            APBlackListDataDeleteResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        //白名单
                        else if (regexWhiteList == Parameters.ConfigType)
                        {
                            APWhiteListDataDeleteResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        //普通用户
                        else if (regexCustomList == Parameters.ConfigType)
                        {
                            APCustomListDataDeleteResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        //清空白名单
                        else if (regexClearWhiteList == Parameters.ConfigType)
                        {
                            APWhiteListDataClearResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        //清空黑名单
                        else if (regexClearBlackList == Parameters.ConfigType)
                        {
                            APBlackListDataClearResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        //清空自定义名单
                        else if (regexClearCustomList == Parameters.ConfigType)
                        {
                            APCustomListDataClearResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                    }
                    //黑名单追踪上报响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.meas_report.ToLower()))
                    {
                        APMeasReportResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //AP上下线通知
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(Main2ApControllerMsgType.OnOffLine_Ack.ToLower()))
                    {
                        APOnOfflineResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //AP激活/重启响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.activate_nodeb_result.ToLower()))
                    {
                        Regex regexAPActive = new Regex("APActive");
                        Regex regexAPReboot = new Regex("APReboot");
                        Regex regexBatchApReboot = new Regex("BatchApReboot");
                        Regex regexAPUnActive = new Regex("APUnActive");

                        //激活
                        if (regexAPActive.Match(Parameters.ConfigType).Success)
                        {
                            APActiveRespone(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        //去激活
                        else if (regexAPUnActive.Match(Parameters.ConfigType).Success)
                        {
                            APUnActiveRespone(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        //重启
                        else if (regexAPReboot.Match(Parameters.ConfigType).Success
                              || regexBatchApReboot.Match(Parameters.ConfigType).Success)
                        {
                            APRestartResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                    }
                    //历史数据查询
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_history_record_response.ToLower()))
                    {
                        App_history_record_response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //历史记录搜索导出csv文件s
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_history_record_export_csv_response.ToLower()))
                    {
                        App_history_record_export_csv_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //定时清空数据库IMSI数据
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_history_record_delete_response.ToLower()))
                    {
                        App_history_record_delete_response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //工作模式设置响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.set_work_mode_reponse.ToLower()))
                    {
                        APSetWorkModeResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取GSM通用参数响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_GsmInfo_Response.ToLower()))
                    {
                        GetGSMCarrierGenParaResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取重定向参数响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_redirection_response.ToLower()))
                    {
                        Get_redirection_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //GSM,CDMA 上报，查询，设置，确认信息响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.gsm_msg_recv.ToLower()))
                    {
                        GSMAPSettingResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //设置重定向参数响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_set_redirection_response.ToLower()))
                    {
                        Set_redirection_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //扫频结果
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.cell_info_result.ToLower()))
                    {
                        Get_son_earfcn_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //工程参数设置响应(GSM / LTE)
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.transparent_msg_response.ToLower()))
                    {
                        APProjectSettingResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //白名单自学习参数查询响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.get_whitelist_study_result.ToLower()))
                    {
                        APWhiteListSelfLearningParameterResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //白名单自学习参数设置响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.set_whitelist_study_result.ToLower()))
                    {
                        APWhiteListSelfLearningSettingResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //指定参数设置响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.set_param_response.ToLower()))
                    {
                        if (new Regex("OtherPLMN").Match(Parameters.ConfigType).Success)
                        {
                            //多PLMN设置响应
                            APSettingOhterPLMNResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        else if (new Regex("PeriodFreq").Match(Parameters.ConfigType).Success)
                        {
                            //周期频点设置响应
                            APSettingPeriodFreqResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                        else if (new Regex("ProjectSetting").Match(Parameters.ConfigType).Success)
                        {
                            //工程指定参数设置
                            APProjectSingleParameterSettingResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                        }
                    }
                    //获取GSM-V2或CDMA设备信息响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_GCInfo_Response.ToLower()))
                    {
                        CDMAParameterGettingResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取GSM-V2或CDMA通话记录响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_MsCall_Response.ToLower()))
                    {
                        App_get_MsCall_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取GSM-V2或CDMA短信记录响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_MsSms_Response.ToLower()))
                    {
                        App_get_MsSms_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取GSM-V2或CDMA通话记录CSV文件响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_MsCall_ExportCSV_Response.ToLower()))
                    {
                        App_get_MsCall_ExportCSV_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取GSM-V2或CDMA短信记录CSV文件响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_MsSms_ExportCSV_Response.ToLower()))
                    {
                        App_get_MsSms_ExportCSV_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //非XML查询响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.get_upload_response.ToLower()))
                    {
                        Get_Upload_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //非XML设置响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.set_upload_response.ToLower()))
                    {
                        Set_Upload_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //配置批量导出响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_BIE_ExportConfig_Response.ToLower()))
                    {
                        BatchConfigurationInfoResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //配置批量导入响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_set_BIE_ImportConfig_Response.ToLower()))
                    {
                        BatchConfigurationImportResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //修改服务器配置响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_set_ServerConfig_Response.ToLower()))
                    {
                        ServerBaseParameterSaveResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取站点地图位置
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_station_location_response.ToLower()))
                    {
                        Get_station_location_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //设置站点地图位置
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_set_station_location_response.ToLower()))
                    {
                        Set_station_location_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //分时统计
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_statistics_response.ToLower()))
                    {
                        Get_statistics_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //常驻人口
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_resident_imsi_list_response.ToLower()))
                    {
                        Get_resident_imsi_list_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //碰撞分析
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_collision_imsi_list_response.ToLower()))
                    {
                        Get_Collision_imsi_list_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //伴随分析
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_accompany_response.ToLower()))
                    {
                        Get_Accompany_imsi_list_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //IMSI轨迹
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.app_get_imsi_path_response.ToLower()))
                    {
                        Get_imsi_path_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //同步状态信息
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.SYNC_info.ToLower()))
                    {
                        Get_SYNC_Info_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.Syncinfo_get_response.ToLower()))
                    {
                        Get_Syncinfo_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //AP日志文件下载登录响应
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.Get_Log_result.ToLower()))
                    {
                        APLogFilesDownloadLoginResponse(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //获取TDS扫频频点
                    else if (DataStruct.ResultJsonData.Body.type.Trim().ToLower().Equals(AppMsgType.get_son_earfcn_response.ToLower()))
                    {
                        Get_Son_Earfcn_Response(DataStruct.ResultJsonData, DataStruct.RemoteHost, DataStruct.RemotePort);
                    }
                    //删除
                    lock (SourceDataCaching.LockJsonCaching)
                    {
                        SourceDataCaching.Delete(0);
                    }
                }
                catch
                {
                    SystemRuningAnalysisStatus.AnalysisStatu = "解析失败...";
                    SystemRuningAnalysisStatus.AnalysisActionStep++;
                    lock (SourceDataCaching.LockJsonCaching)
                    {
                        SourceDataCaching.Delete(0);
                    }
                    Thread.Sleep(100);
                }

                //(0->save to database  1->save to Logs file 2-> None)
                if (Parameters.LogStatus == 0)
                {
                    //Save Logs To DB
                    SaveReceiveDataToLogDB.Input(aData);
                }
                else if (Parameters.LogStatus == 1)
                {
                    //输出到Log文件
                    Parameters.PrintfLogsExtended("接收到服务端数据", aData);
                }
            }
        }

        /// <summary>
        /// 通用操作事件错误晌应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void Error_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string RecvType = string.Empty;
            string ErrStr = string.Empty;

            new Thread(() =>
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("RecvType"))
                    {
                        RecvType = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ErrStr"))
                    {
                        ErrStr = Item.Value.ToString();
                    }
                }

                if (Parameters.ConfigType == "BatchApReboot")
                {
                    string ResultStr = "来自[服务器]消息：(" + ErrStr + ")";
                    IntPtr ReSultStrHandle = Marshal.StringToBSTR(ResultStr);
                    Parameters.SendMessage(Parameters.BatchRebootApWinHandle, Parameters.WM_BatchApRebootCompleteMessage, 0, ReSultStrHandle.ToInt32());
                }
                else
                {
                    ShowMessage("来自[服务器]消息：" + Environment.NewLine + ErrStr, 16);
                }
            }).Start();
        }

        /// <summary>
        /// APP登录请求
        /// </summary>
        /// <param name="UserName"></param>
        /// <param name="PassWord"></param>
        /// <returns></returns>
        public static string LoginRequest(string UserName, string PassWord)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> loginParam = new Dictionary<string, object>();
                loginParam.Add("UserName", UserName);
                loginParam.Add("PassWord", PassWord);
                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                loginParam.Add("AllNum", loginParam.Count + 1);

                MsgStruct.Msg_Body_Struct loginParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_login_request, loginParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = loginParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 登录请求响应
        /// </summary>
        /// <param name="ResultJsonData"></param>
        /// <param name="remoteHost"></param>
        /// <param name="remotePort"></param>
        public static void LoginedResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            LoginUserInfo.Clear();
            LoginedInfo loginedInfo = new LoginedInfo();
            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("ReturnCode"))
                {
                    loginedInfo.LoginAccess = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("ReturnStr"))
                {
                    loginedInfo.Information = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("GroupName"))
                {
                    loginedInfo.WorkGroup = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("DomainList"))
                {
                    loginedInfo.DomainLists = Item.Value.ToString().Split(new char[] { ',', '.' });
                }
                else if (Item.Key.Trim().Equals("FunList"))
                {
                    loginedInfo.FunLists = Item.Value.ToString().Split(new char[] { ',' });
                }
            }
            LoginUserInfo.Add(loginedInfo);
        }

        /// <summary>
        /// 域名列表请求
        /// </summary>
        /// <returns></returns>
        public static string All_DomainLists_Request()
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> domainListsParam = new Dictionary<string, object>();
                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                domainListsParam.Add("AllNum", domainListsParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_domain_request, domainListsParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求获取设备列表
        /// </summary>
        /// <returns></returns>
        public static string All_DeviceLists_Request(string StationFullName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> deviceListsParam = new Dictionary<string, object>();
                deviceListsParam.Add("parentFullPathName", StationFullName);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                deviceListsParam.Add("AllNum", deviceListsParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_device_request, deviceListsParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求域名列表响应
        /// </summary>
        /// <returns></returns>
        public static void DomainNameListsResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                bool userDomainbol = true;
                string[] userDomainList = null;
                BindTreeViewClass.DeviceTreeTable.Clear();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        BindTreeViewClass.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        BindTreeViewClass.ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("NodeCount"))
                    {
                        BindTreeViewClass.NodeCount = Item.Value.ToString();
                    }
                }

                //成功
                if (BindTreeViewClass.ReturnCode == "0")
                {
                    BindTreeViewClass.DeviceTreeTable.Rows.Clear();

                    //查询用户域访问权限
                    if (LoginUserInfo.Count > 0)
                    {
                        foreach (LoginedInfo loginedInfo in LoginUserInfo)
                        {
                            if (loginedInfo.WorkGroup != null)
                            {
                                if ((loginedInfo.WorkGroup.Equals("RoleSA")) || (loginedInfo.WorkGroup.Equals("RoleEng")))
                                {
                                    //所有权限
                                    userDomainbol = false;
                                }
                            }
                            userDomainList = loginedInfo.DomainLists;
                        }
                    }

                    foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                    {
                        DataRow rw = BindTreeViewClass.DeviceTreeTable.NewRow();
                        rw[0] = x.name.Trim();

                        DeviceListRequestCompleteStatus.MaxLoading = x.dic.Count;
                        DeviceListRequestCompleteStatus.ValueLoading = 0;

                        foreach (KeyValuePair<string, object> Item in x.dic)
                        {
                            if (Item.Key.Trim().Equals("id"))
                            {
                                rw[1] = Convert.ToInt32(Item.Value.ToString());
                            }
                            else if (Item.Key.Trim().Equals("name"))
                            {
                                rw[2] = Item.Value.ToString().Trim();
                                rw[5] = Item.Value.ToString().Trim();
                            }
                            else if (Item.Key.Trim().Equals("parentId"))
                            {
                                rw[3] = Convert.ToInt32(Item.Value.ToString());
                            }
                            else if (Item.Key.Trim().Equals("isStation"))
                            {
                                rw[4] = Convert.ToInt32(Item.Value.ToString());
                            }
                            else if (Item.Key.Trim().Equals("des"))
                            {
                                rw[11] = Item.Value.ToString().Trim();
                            }
                        }

                        rw[6] = false;
                        rw[7] = "None";

                        if (Convert.ToInt32(rw[3]) == -1)
                        {
                            rw[8] = NodeType.RootNode.ToString();
                            rw[9] = new NodeIcon().RootNodeCloseIcon;
                        }
                        else
                        {
                            rw[8] = NodeType.StructureNode.ToString();
                            rw[9] = new NodeIcon().StructureCloseNodeIcon;
                        }

                        rw[10] = "0";

                        if (!userDomainbol) //不存在权限
                        {
                            BindTreeViewClass.DeviceTreeTable.Rows.Add(rw);
                        }
                        else
                        {
                            for (int i = 0; i < userDomainList.Length; i++)
                            {
                                if (rw[2].ToString() == userDomainList[i])
                                {
                                    BindTreeViewClass.DeviceTreeTable.Rows.Add(rw);
                                    break;
                                }
                            }
                        }

                        DeviceListRequestCompleteStatus.ValueLoading++;
                    }

                    if (BindTreeViewClass.NodeCount.Equals("0"))
                    {
                        DeviceListRequestCompleteStatus.MaxLoading = 1;
                        DeviceListRequestCompleteStatus.ValueLoading = 0;

                        lock (BindTreeViewClass.DevicesTableLock)
                        {
                            DataRow rw = BindTreeViewClass.DeviceTreeTable.NewRow();
                            rw.BeginEdit();
                            rw[0] = "设备";
                            rw[1] = 1;
                            rw[2] = "设备";
                            rw[3] = -1;
                            rw[4] = 0;
                            rw[5] = "设备";
                            rw[6] = false;
                            rw[7] = "None";
                            rw[8] = NodeType.RootNode.ToString();
                            rw[9] = new NodeIcon().RootNodeCloseIcon;
                            rw[10] = "0";
                            rw[11] = string.Empty;
                            BindTreeViewClass.DeviceTreeTable.Rows.Add(rw);
                            rw.EndEdit();
                        }

                        DeviceListRequestCompleteStatus.ValueLoading++;
                        Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_DeviceListInfoLoad, 0, 0);
                    }
                    else
                    {
                        for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                        {
                            if (BindTreeViewClass.DeviceTreeTable.Rows[i][4].ToString().Equals("1")
                                && BindTreeViewClass.DeviceTreeTable.Rows[i][8].ToString().Equals(NodeType.StructureNode.ToString()))
                            {
                                //请求AP设备消息(有站点的情况)
                                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_RequestDeviceLists, 0, 0);
                                break;
                            }
                            else if (i == BindTreeViewClass.DeviceTreeTable.Rows.Count - 1)
                            {
                                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_DeviceListInfoLoad, 0, 0);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("解析域信息", ex.Message, ex.StackTrace);
            }
        }

        private static void SelectSelfId(DataRow dataRow, List<string> selfIdList)//查询所有父类的SelfId放在list中
        {
            if (!selfIdList.Contains(dataRow[1].ToString()))
            {
                selfIdList.Add(dataRow[1].ToString());
            }
            //向上查询
            DataRow[] domaindr = BindTreeViewClass.DeviceTreeTable.Select("SelfId = '" + dataRow[3].ToString() + "'");
            if (domaindr.Length != 0)
            {
                foreach (DataRow dr in domaindr)
                {
                    SelectSelfId(dr, selfIdList);
                }
            }
        }

        /// <summary>
        /// 请求[设备列表]响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void DeviceListsResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string NodeCount = string.Empty;
            int EndID = 0;
            List<string> UnknownDeviceLists = new List<string>();
            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("NodeCount"))
                    {
                        NodeCount = Item.Value.ToString();
                    }
                }

                //未知设备数量
                foreach (MsgStruct.Name_DIC_Struct n_dic_item in resultData.Body.n_dic)
                {
                    if (n_dic_item.name == Parameters.UnknownDeviceNameDefault)
                    {
                        UnknownDeviceLists.Add(n_dic_item.name);
                    }
                }
                //若未知设备已空通知客户端清理
                if (UnknownDeviceLists.Count <= 0)
                {
                    string UnknownDeviceListsCountStr = UnknownDeviceLists.Count.ToString();
                    IntPtr UnknownDeviceListsCountHandle = Marshal.StringToBSTR(UnknownDeviceListsCountStr);
                    Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_UnknownDeviceAutoUpdate, 0, UnknownDeviceListsCountHandle.ToInt32());
                }

                //成功
                if (ReturnCode.Trim().Equals("0"))
                {
                    if (resultData.Body.n_dic != null)
                    {
                        if (resultData.Body.n_dic.Count > 0)
                        {
                            EndID = Convert.ToInt32(BindTreeViewClass.DeviceTreeTable.Rows[BindTreeViewClass.DeviceTreeTable.Rows.Count - 1][1].ToString());
                            JsonInterFace.DeviceListRequestCompleteStatus.MaxLoading = resultData.Body.n_dic.Count;
                            JsonInterFace.DeviceListRequestCompleteStatus.ValueLoading = 0;

                            foreach (MsgStruct.Name_DIC_Struct n_dic_item in resultData.Body.n_dic)
                            {
                                string _sN = "";
                                string _carrier = "";
                                string _ipAddr = "";
                                string _port = "";
                                string _name = "";
                                string _netmask = "";
                                string _mode = "";
                                string _online = "";
                                string _lastOnline = "";
                                string _isActive = "";
                                string _innerType = "";
                                string _apVersion = "";

                                //正常设备
                                if (!new Regex(DeviceType.UnknownType.ToLower()).Match(n_dic_item.name.Trim().ToLower()).Success)
                                {
                                    try
                                    {
                                        //设备存在
                                        JsonInterFace.DeviceListRequestCompleteStatus.HasDeviceList = true;
                                        JsonInterFace.DeviceListRequestCompleteStatus.APCount++;

                                        //声明
                                        string ApFullName = string.Empty;
                                        string SelfID = string.Empty;
                                        string ParentID = string.Empty;
                                        string DevicePathname = string.Empty;

                                        //设备全名
                                        ApFullName = n_dic_item.name;

                                        //属性值
                                        foreach (KeyValuePair<string, object> Item in n_dic_item.dic)
                                        {
                                            if (Item.Key.Trim().Equals("sn"))
                                            {
                                                _sN = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("carrier"))
                                            {
                                                _carrier = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("ipAddr"))
                                            {
                                                _ipAddr = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("port"))
                                            {
                                                _port = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("netmask"))
                                            {
                                                _netmask = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("mode"))
                                            {
                                                _mode = Item.Value.ToString();
                                                if (_mode.Contains("_"))
                                                {
                                                    _mode = _mode.Replace("_", "-");
                                                }
                                            }
                                            else if (Item.Key.Trim().Equals("online"))
                                            {
                                                _online = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("lastOnline"))
                                            {
                                                _lastOnline = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("isActive"))
                                            {
                                                _isActive = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("innerType"))
                                            {
                                                _innerType = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("apVersion"))
                                            {
                                                _apVersion = Item.Value.ToString();
                                            }
                                        }

                                        string[] _DevicePathname = n_dic_item.name.Split(new char[] { '.' });
                                        string AppName = _DevicePathname[_DevicePathname.Length - 1];

                                        for (int i = 0; i < _DevicePathname.Length - 1; i++)
                                        {
                                            if (DevicePathname == "" || DevicePathname == null)
                                            {
                                                DevicePathname = _DevicePathname[i].Trim();
                                            }
                                            else
                                            {
                                                DevicePathname += "." + _DevicePathname[i].Trim();
                                            }
                                        }

                                        DataRow[] devicePathRow = BindTreeViewClass.DeviceTreeTable.Select(string.Format("PathName='{0}'", DevicePathname));
                                        if (devicePathRow.Length > 0)
                                        {
                                            EndID++;
                                            SelfID = EndID.ToString();
                                            ParentID = devicePathRow[devicePathRow.Length - 1]["SelfID"].ToString();  //设备父ID指向上一级的ID
                                        }

                                        //AP设备添加到树列表显示
                                        if (SelfID != "" && ParentID != "")
                                        {
                                            lock (BindTreeViewClass.DevicesTableLock)
                                            {
                                                DataRow rw = BindTreeViewClass.DeviceTreeTable.NewRow();
                                                rw.BeginEdit();
                                                rw["PathName"] = ApFullName;
                                                rw["SelfID"] = Convert.ToInt32(SelfID);
                                                rw["SelfName"] = AppName;
                                                rw["ParentID"] = Convert.ToInt32(ParentID);
                                                rw["IsStation"] = 1;
                                                rw["NodeContent"] = AppName;
                                                rw["IsDeleted"] = false;
                                                rw["Permission"] = "None";
                                                rw["NodeType"] = NodeType.LeafNode.ToString();

                                                if (_isActive == "1" && _online == "1")
                                                {
                                                    rw["NodeIcon"] = new NodeIcon().LeafAllReadyNodeIcon;
                                                }
                                                else if (_isActive == "0" && _online == "1")
                                                {
                                                    rw["NodeIcon"] = new NodeIcon().LeafNoActiveNodeIcon;
                                                }
                                                else
                                                {
                                                    rw["NodeIcon"] = new NodeIcon().LeafNoConnectNodeIcon;
                                                }

                                                rw["CarrierStatus"] = _carrier;
                                                BindTreeViewClass.DeviceTreeTable.Rows.Add(rw);
                                                rw.EndEdit();
                                            }

                                            APATTributes APTTrib = new APATTributes();
                                            APTTrib.FullName = ApFullName;
                                            APTTrib.SelfID = SelfID;
                                            APTTrib.ParentID = ParentID;
                                            APTTrib.SelfName = AppName;
                                            APTTrib.SN = _sN;
                                            APTTrib.Carrier = _carrier;
                                            APTTrib.IpAddr = _ipAddr;
                                            APTTrib.Port = _port;
                                            APTTrib.NetMask = _netmask;
                                            APTTrib.Mode = _mode;
                                            APTTrib.OnLine = _online;
                                            APTTrib.LastOnline = _lastOnline;
                                            APTTrib.IsActive = _isActive;
                                            APTTrib.InnerType = _innerType;
                                            APTTrib.ApVersion = _apVersion;

                                            APATTributesLists.Add(APTTrib);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        Parameters.PrintfLogsExtended("解析正常设备列表", ex.Message, ex.StackTrace);
                                    }

                                    JsonInterFace.DeviceListRequestCompleteStatus.ValueLoading++;
                                }
                                //未知设备
                                else
                                {
                                    try
                                    {
                                        foreach (KeyValuePair<string, object> Item in n_dic_item.dic)
                                        {
                                            if (Item.Key.Trim().Equals("sn"))
                                            {
                                                _sN = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("carrier"))
                                            {
                                                _carrier = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("ipAddr"))
                                            {
                                                _ipAddr = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("port"))
                                            {
                                                _port = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("name"))
                                            {
                                                if (Item.Value.ToString() == null || Item.Value.ToString() == "")
                                                {
                                                    _name = "device_unknown";
                                                }
                                                else
                                                {
                                                    _name = Item.Value.ToString();
                                                }
                                            }
                                            else if (Item.Key.Trim().Equals("netmask"))
                                            {
                                                _netmask = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("mode"))
                                            {
                                                _mode = Item.Value.ToString();
                                                if (_mode.Contains("_"))
                                                {
                                                    _mode = _mode.Replace("_", "-");
                                                }
                                            }
                                            else if (Item.Key.Trim().Equals("online"))
                                            {
                                                _online = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("lastOnline"))
                                            {
                                                _lastOnline = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("isActive"))
                                            {
                                                _isActive = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("innerType"))
                                            {
                                                _innerType = Item.Value.ToString();
                                            }
                                            else if (Item.Key.Trim().Equals("apVersion"))
                                            {
                                                _apVersion = Item.Value.ToString();
                                            }
                                        }

                                        UnKnownDeviceListsParameter.Input(
                                                                            _name,
                                                                            _sN,
                                                                            _carrier,
                                                                            _ipAddr,
                                                                            _port,
                                                                            _netmask,
                                                                            _mode,
                                                                            _online,
                                                                            _lastOnline,
                                                                            _isActive,
                                                                            _innerType,
                                                                            _apVersion
                                                                         );

                                    }
                                    catch (Exception ex)
                                    {
                                        Parameters.PrintfLogsExtended("解析未知设备列表失败", ex.Message, ex.StackTrace);
                                    }
                                }
                            }
                        }

                        if (new Regex("AutoLoadDeviceLists").Match(Parameters.ConfigType).Success)
                        {
                            DeviceListRequestCompleteStatus.CompleteCount++;
                            if (DeviceListRequestCompleteStatus.CompleteCount >= DeviceListRequestCompleteStatus.StationCount)
                            {
                                //获取设备列表完毕，获取设备详细信息开始
                                if (JsonInterFace.DeviceListRequestCompleteStatus.HasDeviceList)
                                {
                                    Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_GettingAllDeviceDetailMessage, 0, 0);
                                }
                                else
                                {
                                    Parameters.UniversalCounter = 0;
                                    JsonInterFace.DeviceListRequestCompleteStatus.ValueLoading = 0;
                                    Parameters.ConfigType = "AutoGettingDeviceDomainList";
                                    Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_DeviceListInfoLoad, 0, 0);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("解析设备信息：", ex.Message, ex.StackTrace);
            }
            System.GC.Collect();
        }

        #region 用户组相关

        /// <summary>
        /// 请求用户组列表
        /// </summary>
        /// <returns></returns>
        public static string All_role_Request()
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> roleListsParam = new Dictionary<string, object>();

                MsgStruct.Msg_Body_Struct roleListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_role_request, roleListsParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = roleListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求用户组列表响应
        /// </summary>
        /// <returns></returns>
        public static void All_role_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string GroupCount = string.Empty;
            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("GroupCount"))
                    {
                        GroupCount = Item.Value.ToString();
                    }
                }

                //成功
                if (ReturnCode.Trim().Equals("0"))
                {
                    RoleManageList.Clear();

                    foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                    {
                        RoleManage roleManage = new RoleManage();
                        foreach (KeyValuePair<string, object> Item in x.dic)
                        {
                            if (Item.Key.Trim().Equals("name"))
                            {
                                roleManage.Name = Item.Value.ToString();
                                if (Item.Value.ToString().Equals("RoleEng"))
                                {
                                    roleManage.AliasName = "工程用户组";
                                }
                                else if (Item.Value.ToString().Equals("RoleSA"))
                                {
                                    roleManage.AliasName = "超级管理员组";
                                }
                                else if (Item.Value.ToString().Equals("RoleAdmin"))
                                {
                                    roleManage.AliasName = "管理员组";
                                }
                                else if (Item.Value.ToString().Equals("RoleSO"))
                                {
                                    roleManage.AliasName = "超级操作员组";
                                }
                                else if (Item.Value.ToString().Equals("RoleOP"))
                                {
                                    roleManage.AliasName = "操作员组";
                                }
                                else
                                {
                                    roleManage.AliasName = Item.Value.ToString();
                                }
                            }
                            else if (Item.Key.Trim().Equals("roleType"))
                            {
                                roleManage.RoleType = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Equals("timeStart"))
                            {
                                roleManage.TimeStart = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Equals("timeEnd"))
                            {
                                roleManage.TimeEnd = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Equals("des"))
                            {
                                roleManage.Des = Item.Value.ToString();
                            }
                        }
                        RoleManageList.Add(roleManage);
                    }
                    for (int i = 0; i < RoleManageList.Count; i++)
                    {
                        if (LoginUserInfo[0].WorkGroup == JsonInterFace.RoleManageList[i].Name)
                        {
                            //RoleTypeClass.RoleType = JsonInterFace.RoleManageList[i].RoleType;
                            RoleTypeClass.RoleType = i.ToString();
                            break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求用户列表失败", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 请求增加用户组
        /// </summary>
        /// <param name="UserName"></param>
        /// <param roleType="roleType"></param>
        /// <param timeStart="timeStart"></param>
        /// <param timeEnd="timeEnd"></param>
        /// <param des="des"></param>
        public static string Add_role_Request(string Name, string RoleType, string TimeStart, string TimeEnd, string Des)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> roleParam = new Dictionary<string, object>();
                roleParam.Add("name", Name);
                roleParam.Add("roleType", RoleType);
                roleParam.Add("timeStart", TimeStart);
                roleParam.Add("timeEnd", TimeEnd);
                roleParam.Add("des", Des);
                MsgStruct.Msg_Body_Struct roleParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_add_role_request, roleParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = roleParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求增加用户组响应
        /// </summary>
        /// <returns></returns>
        public static void Add_role_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult addroleInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        addroleInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        addroleInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                addroleResponse = addroleInfo;
                if (addroleInfo.ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        //增加用户组
                        JsonInterFace.RoleManageList.Add(JsonInterFace.RoleManageInfo);
                        if (Parameters.ConfigType == "AddRole")
                        {
                            ShowMessage("添加用户组:" + JsonInterFace.RoleManageInfo.Name + addroleInfo.ReturnStr, 64);
                        }
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("添加用户组:" + JsonInterFace.RoleManageInfo.Name + addroleInfo.ReturnStr, 16);
                    }).Start();
                }

            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求增加用户组失败", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 请求删除用户组
        /// </summary>
        /// <param name="RoleEng"></param>
        public static string Del_role_Request(string name)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> roleParam = new Dictionary<string, object>();
                roleParam.Add("name", name);

                MsgStruct.Msg_Body_Struct roleParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_role_request, roleParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = roleParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求删除用户组响应
        /// </summary>
        /// <returns></returns>
        public static void Del_role_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult delroleInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        delroleInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        delroleInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                delroleResponse = delroleInfo;
                if (delroleResponse.ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        RoleManageList.RemoveAll(roleManage => roleManage.Name == RoleManageInfo.Name);
                        GroupprivilegeManageList.RemoveAll(gpManage => gpManage.GroupName == RoleManageInfo.Name);
                        if (Parameters.ConfigType == "DeleteRole")
                        {
                            ShowMessage("删除用户组" + delroleResponse.ReturnStr, 64);
                        }
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("删除用户组" + delroleResponse.ReturnStr, 16);
                    }).Start();

                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求删除用户失败", ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 用户相关

        /// <summary>
        /// 请求用户列表
        /// </summary>
        public static string All_user_Request()
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> userParam = new Dictionary<string, object>();
                MsgStruct.Msg_Body_Struct userParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_user_request, userParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = userParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求用户列表响应
        /// </summary>
        /// <returns></returns>
        public static void All_user_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string GroupCount = string.Empty;
            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("UserCount"))
                    {
                        GroupCount = Item.Value.ToString();
                    }
                }

                //成功
                if (ReturnCode.Trim().Equals("0"))
                {
                    userManageList.Clear();

                    foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                    {
                        UserManage userManage = new UserManage();
                        foreach (KeyValuePair<string, object> Item in x.dic)
                        {
                            if (Item.Key.Trim().Equals("name"))
                            {
                                userManage.Name = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Equals("des"))
                            {
                                userManage.Des = Item.Value.ToString();
                            }
                        }
                        userManageList.Add(userManage);
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求用户失败", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 请求增加用户
        /// </summary>
        /// <param name="UserName"></param>
        /// <param psw="roleType"></param>
        /// <param des="des"></param>
        public static string Add_user_Request(string Name, string PassWord, string Des)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> userParam = new Dictionary<string, object>();
                userParam.Add("name", Name);
                userParam.Add("psw", PassWord);
                userParam.Add("des", Des);
                MsgStruct.Msg_Body_Struct userParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_add_user_request, userParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = userParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求增加用户响应
        /// </summary>
        /// <returns></returns>
        public static void Add_user_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult adduserInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        adduserInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        adduserInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                adduserResponse = adduserInfo;
                if (adduserResponse.ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        UserManage users = new UserManage();
                        users.Name = AddUserManageList.Name;
                        users.RoleType = AddUserManageList.RoleType;
                        users.Password = AddUserManageList.Password;
                        users.Des = AddUserManageList.Des;
                        users.BuildName = AddUserManageList.BuildName;
                        users.DomainIdSet = AddUserManageList.DomainIdSet;
                        UserManageList.Add(users);
                        if (Parameters.ConfigType == "AddUser")
                        {
                            ShowMessage("增加用户:" + AddUserManageList.Name + adduserResponse.ReturnStr, 64);
                        }
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("增加用户:" + AddUserManageList.Name + adduserResponse.ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求增加用户失败", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 请求删除用户
        /// </summary>
        /// <param name="UserName"></param>
        public static string Del_user_Request(string Name)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> userParam = new Dictionary<string, object>();
                userParam.Add("name", Name);
                MsgStruct.Msg_Body_Struct userParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_user_request, userParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = userParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求删除用户响应
        /// </summary>
        /// <returns></returns>
        public static void Del_user_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult deluserInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        deluserInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        deluserInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                deluserResponse = deluserInfo;
                if (deluserResponse.ReturnCode.Equals("0"))
                {
                    UserManageList.RemoveAll(userManage => userManage.Name == JsonInterFace.DelUserManageList.Name);
                    new Thread(() =>
                    {
                        for (int i = 0; i <= UsergroupManageClass.UsergroupTable.Rows.Count; i++)
                        {
                            if ((UsergroupManageClass.UsergroupTable.Rows[i][0].ToString() == DelUserManageList.Name) &&
                                (UsergroupManageClass.UsergroupTable.Rows[i][1].ToString() == DelUserManageList.RoleType))
                            {
                                UsergroupManageClass.UsergroupTable.Rows.RemoveAt(i);
                                break;
                            }
                        }
                        if (Parameters.ConfigType == "DeleteUser")
                        {
                            ShowMessage("删除用户" + deluserResponse.ReturnStr, 64);
                        }
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("删除用户" + deluserResponse.ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求删除用户失败", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 请求修改用户密码
        /// </summary>
        /// <param name="UserName"></param>
        /// <param oldPasswd="oldPasswd"></param>
        /// <param newPasswd="newPasswd"></param>
        public static string Modify_user_psw_Request(string Name, string OldPasswd, string NewPasswd)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> modifyUserPswParam = new Dictionary<string, object>();
                modifyUserPswParam.Add("name", Name);
                modifyUserPswParam.Add("oldPasswd", OldPasswd);
                modifyUserPswParam.Add("newPasswd", NewPasswd);
                MsgStruct.Msg_Body_Struct modifyUserPswParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_modify_user_psw_request, modifyUserPswParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = modifyUserPswParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求修改用户密码响应
        /// </summary>
        /// <returns></returns>
        public static void Modify_user_psw_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult modifyUserPswInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        modifyUserPswInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        modifyUserPswInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                modifyUserPswResponse = modifyUserPswInfo;
                if (modifyUserPswResponse.ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        ShowMessage("修改密码" + modifyUserPswResponse.ReturnStr, 64);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("修改密码" + modifyUserPswResponse.ReturnStr, 16);
                    }).Start();
                }

            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求修改用户密码失败", ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 用户组类型
        /// <summary>
        /// 请求用户组类型
        /// </summary>
        public static string All_roletype_request()
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> roletypeParam = new Dictionary<string, object>();
                MsgStruct.Msg_Body_Struct roletypeParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_roletype_request, roletypeParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = roletypeParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求用户组类型响应
        /// </summary>
        /// <returns></returns>
        public static void All_roletype_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                roletypeManageItems.RoleType = new List<string>();
                roletypeManageItems.Des = new List<string>();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        roletypeManageItems.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        roletypeManageItems.ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("TypeCount"))
                    {
                        roletypeManageItems.TypeCount = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Contains("RoleType"))
                    {
                        roletypeManageItems.RoleType.Add(Item.Value.ToString());
                    }
                    else if (Item.Key.Trim().Contains("Des"))
                    {
                        roletypeManageItems.Des.Add(Item.Value.ToString());
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求用户组类型失败", ex.Message, ex.StackTrace);
            }
        }
        /// <summary>
        /// 请求添加用户组类型
        /// </summary>
        /// <param RoleType="TempGrp"></param>
        /// <param Des="创建一个临时组(角色)"></param>
        public static string Add_roletype_request(string RoleType, string Des)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> addroletypeParam = new Dictionary<string, object>();
                addroletypeParam.Add("RoleType", RoleType);
                addroletypeParam.Add("Des", Des);
                MsgStruct.Msg_Body_Struct addroletypeParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_add_roletype_request, addroletypeParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = addroletypeParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求添加用户组类型响应
        /// </summary>
        /// <returns></returns>
        public static void Add_roletype_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult addroletypeInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        addroletypeInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        addroletypeInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                addroletypeResponse = addroletypeInfo;
                if (addroletypeResponse.ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        ShowMessage("增加" + addroletypeResponse.ReturnStr, 64);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("增加" + addroletypeResponse.ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求增加用户组类型失败", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 请求删除用户组类型
        /// </summary>
        /// <param RoleType="TempGrp"></param>
        public static string Del_roletype_request(string RoleType)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> delroletypeParam = new Dictionary<string, object>();
                delroletypeParam.Add("RoleType", RoleType);
                MsgStruct.Msg_Body_Struct delroletypeParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_roletype_request, delroletypeParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = delroletypeParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求删除用户组类型响应
        /// </summary>
        /// <returns></returns>
        public static void Del_roletype_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult delroletypeInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        delroletypeInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        delroletypeInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                delroletypeResponse = delroletypeInfo;
                if (delroletypeResponse.ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        ShowMessage("删除" + delroletypeResponse.ReturnStr, 64);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("删除" + delroletypeResponse.ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求删除用户组类型失败", ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 用户-用户组相关
        /// <summary>
        /// 请求用户-用户组对应关系
        /// </summary>
        public static string All_user_group_request()
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> usergroupParam = new Dictionary<string, object>();
                MsgStruct.Msg_Body_Struct usergroupParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_usr_group_request, usergroupParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = usergroupParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求用户-用户组对应关系响应
        /// </summary>
        /// <returns></returns>
        public static void All_user_group_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string UsrGroupCount = string.Empty;
            try
            {
                usergroupManageClass.UsergroupTable.Clear();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("UsrGroupCount"))
                    {
                        UsrGroupCount = Item.Value.ToString();
                    }
                }

                //成功
                if (ReturnCode.Trim().Equals("0"))
                {
                    foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                    {
                        DataRow rw = usergroupManageClass.UsergroupTable.NewRow();
                        foreach (KeyValuePair<string, object> Item in x.dic)
                        {
                            if (Item.Key.Trim().Equals("usrName"))
                            {
                                rw[0] = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Equals("roleName"))
                            {
                                rw[1] = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Equals("des"))
                            {
                                rw[4] = Item.Value.ToString();
                            }
                        }
                        rw[2] = "";
                        rw[3] = "";
                        usergroupManageClass.UsergroupTable.Rows.Add(rw);
                    }
                    //Parameters.SendMessage(Parameters.UserManageWinHandle, Parameters.WM_UsergroupManageResponse, 0, 0);
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求用户列表失败", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 请求添加用户-用户组对应关系
        /// </summary>
        /// <param userName="bti-test"></param>
        /// <param roleName="RoleRoot"></param>
        /// <param des="备注"></param>
        public static string Add_user_group_request(string UserName, string RoleName, string Des)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> addusergroupParam = new Dictionary<string, object>();
                addusergroupParam.Add("usrName", UserName);
                addusergroupParam.Add("roleName", RoleName);
                addusergroupParam.Add("des", Des);
                MsgStruct.Msg_Body_Struct addusergroupParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_add_usr_group_request, addusergroupParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = addusergroupParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求添加用户-用户组对应关系响应
        /// </summary>
        /// <returns></returns>
        public static void Add_user_group_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult addusergroupInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        addusergroupInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        addusergroupInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                addusergroupResponse = addusergroupInfo;
                if (addusergroupResponse.ReturnCode.Equals("0"))
                {
                    new Thread(() =>
                    {
                        //增加用户 - 用户组
                        DataRow rw = UsergroupManageClass.UsergroupTable.NewRow();
                        rw[0] = AddUserManageList.Name;
                        rw[1] = AddUserManageList.RoleType;
                        rw[4] = AddUserManageList.BuildName;
                        rw[2] = "";
                        rw[3] = "";
                        JsonInterFace.UsergroupManageClass.UsergroupTable.Rows.Add(rw);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("增加用户-用户组对应关系" + addusergroupResponse.ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求增加用户-用户组失败", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 请求删除用户-用户组对应关系
        /// </summary>
        /// <param userName="bti-test"></param>
        /// <param roleName="RoleRoot"></param>
        public static string Del_user_group_request(string UserName, string RoleName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> delusergroupParam = new Dictionary<string, object>();
                delusergroupParam.Add("usrName", UserName);
                delusergroupParam.Add("roleName", RoleName);
                MsgStruct.Msg_Body_Struct delusergroupParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_usr_group_request, delusergroupParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = delusergroupParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求删除用户-用户组对应关系响应
        /// </summary>
        /// <returns></returns>
        public static void Del_user_group_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult delusergroupInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        delusergroupInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        delusergroupInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                delusergroupResponse = delusergroupInfo;
                if (delusergroupResponse.ReturnCode.Trim().Equals("0"))
                {
                    for (int i = 0; i <= UsergroupManageClass.UsergroupTable.Rows.Count; i++)
                    {
                        if ((UsergroupManageClass.UsergroupTable.Rows[i][0].ToString() == DelUserManageList.Name) &&
                            (UsergroupManageClass.UsergroupTable.Rows[i][1].ToString() == DelUserManageList.RoleType))
                        {
                            UsergroupManageClass.UsergroupTable.Rows.RemoveAt(i);
                            break;
                        }
                    }
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("删除" + delusergroupResponse.ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求删除用户-用户组失败", ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 权限相关
        /// <summary>
        /// 请求权限
        /// </summary>
        public static string All_privilege_request()
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> privilegeParam = new Dictionary<string, object>();
                MsgStruct.Msg_Body_Struct privilegeParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_privilege_request, privilegeParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = privilegeParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求权限响应
        /// </summary>
        public static void All_privilege_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string GroupCount = string.Empty;
            try
            {
                PrivilegeManageClass.PrivilegeTable.Clear();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("PrivilegeCount"))
                    {
                        GroupCount = Item.Value.ToString();
                    }
                }
                if (ReturnCode.Trim().Equals("0"))
                {
                    foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                    {
                        DataRow rw = PrivilegeManageClass.PrivilegeTable.NewRow();
                        foreach (KeyValuePair<string, object> Item in x.dic)
                        {
                            if (Item.Key.Trim().Equals("priId"))
                            {
                                rw[0] = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Equals("funName"))
                            {
                                rw[1] = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Equals("aliasName"))
                            {
                                rw[2] = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Equals("des"))
                            {
                                rw[3] = Item.Value.ToString();
                            }
                        }
                        PrivilegeManageClass.PrivilegeTable.Rows.Add(rw);
                    }
                    Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_PrivilegeManageResponse, 0, 0);
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求权限失败", ex.Message, ex.StackTrace);
            }
        }
        /// <summary>
        /// 请求添加权限
        /// </summary>
        /// <param funName="bti-test"></param>
        /// <param aliasName="RoleRoot"></param>
        /// <param des="备注"></param>
        public static string Add_privilege_request(string FunName, string AliasName, string Des)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> addprivilegeParam = new Dictionary<string, object>();
                addprivilegeParam.Add("funName", FunName);
                addprivilegeParam.Add("aliasName", AliasName);
                addprivilegeParam.Add("des", Des);
                MsgStruct.Msg_Body_Struct addprivilegeParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_add_privilege_request, addprivilegeParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = addprivilegeParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求添加权限响应
        /// </summary>
        /// <returns></returns>
        public static void Add_privilege_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult addprivilegeInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        addprivilegeInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        addprivilegeInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                addprivilegeResponse = addprivilegeInfo;
                if (DefaultPrivilege.Des == "")
                {
                    if (addprivilegeResponse.ReturnCode.Trim().Equals("0"))
                    {
                        new Thread(() =>
                        {
                            ShowMessage("增加" + addprivilegeResponse.ReturnStr, 64);
                        }).Start();
                    }
                    else
                    {
                        new Thread(() =>
                        {
                            ShowMessage("增加" + addprivilegeResponse.ReturnStr, 16);
                        }).Start();
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求增加权限失败", ex.Message, ex.StackTrace);
            }
        }
        /// <summary>
        /// 请求删除权限
        /// </summary>
        /// <param funName="bti-test"></param>
        public static string Del_privilege_request(string FunName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> delprivilegeParam = new Dictionary<string, object>();
                delprivilegeParam.Add("funName", FunName);
                MsgStruct.Msg_Body_Struct delprivilegeParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_privilege_request, delprivilegeParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = delprivilegeParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求删除权限响应
        /// </summary>
        /// <returns></returns>
        public static void Del_privilege_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult delprivilegeInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        delprivilegeInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        delprivilegeInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                delprivilegeResponse = delprivilegeInfo;
                if (delprivilegeResponse.ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        ShowMessage("删除" + delprivilegeResponse.ReturnStr, 64);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("删除" + delprivilegeResponse.ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求删除权限失败", ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 用户组-权限相关
        /// <summary>
        /// 请求用户组-权限
        /// </summary>
        public static string All_group_privilege_request()
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> groupprivilegeParam = new Dictionary<string, object>();
                MsgStruct.Msg_Body_Struct groupprivilegeParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_group_privilege_request, groupprivilegeParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = groupprivilegeParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求用户组-权限响应
        /// </summary>
        /// <returns></returns>
        public static void All_group_privilege_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string UsrGroupCount = string.Empty;
            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("GroupPriCount"))
                    {
                        UsrGroupCount = Item.Value.ToString();
                    }
                }

                //成功
                if (ReturnCode.Trim().Equals("0"))
                {
                    groupprivilegeManageList.Clear();
                    RoleTypeClass.RolePrivilege.Clear();
                    foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                    {
                        GroupprivilegeManage groupprivilegeManage = new GroupprivilegeManage();
                        groupprivilegeManage.GroupName = x.name.Trim();
                        foreach (KeyValuePair<string, object> Item in x.dic)
                        {
                            if (Item.Key.Trim().Equals("priIdSet"))
                            {
                                groupprivilegeManage.PriIdSet = Item.Value.ToString();//Item.Value.ToString().Split(new char[] { ',' });
                            }
                            else if (Item.Key.Trim().Equals("des"))
                            {
                                groupprivilegeManage.Des = Item.Value.ToString();
                            }
                        }
                        groupprivilegeManageList.Add(groupprivilegeManage);
                    }
                }
                if (groupprivilegeManageList.Count > 0)
                {
                    for (int i = 0; i < groupprivilegeManageList.Count; i++)
                    {
                        if (LoginUserInfo[0].WorkGroup == groupprivilegeManageList[i].GroupName)
                        {
                            RoleTypeClass.RoleType = "RoleType";
                            string[] _priIdSet = groupprivilegeManageList[i].PriIdSet.ToString().Split(new char[] { ',' });
                            string[] _des = groupprivilegeManageList[i].Des.ToString().Split(new char[] { ',' });
                            if (_priIdSet.Length == _des.Length)
                            {
                                for (int j = 0; j < _priIdSet.Length; j++)
                                {
                                    DataRow[] dr = JsonInterFace.PrivilegeManageClass.PrivilegeTable.Select("priId='" + _priIdSet[j] + "'");
                                    if (dr.Length > 0)
                                    {
                                        RoleTypeClass.RolePrivilege.Add(dr[0][1].ToString(), _des[j]);
                                    }
                                }
                            }
                            break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求用户组权限失败", ex.Message, ex.StackTrace);
            }
        }
        /// <summary>
        /// 请求添加用户组-权限
        /// </summary>
        /// <param roleName="bti-test"></param>
        /// <param priIdSet="RoleRoot"></param>
        /// <param des="备注"></param>
        public static string Add_group_privilege_request(string RoleName, string PriIdSet, string Des)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> addgroupprivilegeParam = new Dictionary<string, object>();
                addgroupprivilegeParam.Add("roleName", RoleName);
                addgroupprivilegeParam.Add("priIdSet", PriIdSet);
                addgroupprivilegeParam.Add("des", Des);
                MsgStruct.Msg_Body_Struct addgroupprivilegeParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_add_group_privilege_request, addgroupprivilegeParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = addgroupprivilegeParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求添加用户组-权限响应
        /// </summary>
        /// <returns></returns>
        public static void Add_group_privilege_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult addgroupprivilegeInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        addgroupprivilegeInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        addgroupprivilegeInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                addgroupprivilegeResponse = addgroupprivilegeInfo;
                if (addgroupprivilegeResponse.ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        //增加用户组权限
                        GroupprivilegeManage groupprivilegeManage = new GroupprivilegeManage();
                        groupprivilegeManage.GroupName = RoleManageInfo.Name;
                        groupprivilegeManage.PriIdSet = RoleManageInfo.IsRead;
                        groupprivilegeManage.Des = RoleManageInfo.IsWrite;
                        GroupprivilegeManageList.Add(groupprivilegeManage);
                        if (Parameters.ConfigType == "UpdateRole")
                        {
                            ShowMessage("添加用户组-权限" + updategroupprivilegeResponse.ReturnStr, 64);
                        }
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("添加用户组-权限" + addgroupprivilegeResponse.ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求增加用户组权限失败", ex.Message, ex.StackTrace);
            }
        }
        /// <summary>
        /// 请求删除用户组-权限
        /// </summary>
        /// <param roleName="bti-test"></param>
        public static string Del_group_privilege_request(string RoleName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> delgroupprivilegeParam = new Dictionary<string, object>();
                delgroupprivilegeParam.Add("roleName", RoleName);
                MsgStruct.Msg_Body_Struct delgroupprivilegeParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_group_privilege_request, delgroupprivilegeParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = delgroupprivilegeParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求删除用户组-权限响应
        /// </summary>
        /// <returns></returns>
        public static void Del_group_privilege_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult delgroupprivilegeInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        delgroupprivilegeInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        delgroupprivilegeInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                delgroupprivilegeResponse = delgroupprivilegeInfo;
                if (delgroupprivilegeResponse.ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        GroupprivilegeManageList.RemoveAll(gpManage => gpManage.GroupName == RoleManageInfo.Name);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("删除用户组-权限" + delgroupprivilegeResponse.ReturnStr, 16);
                    }).Start();

                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求删除用户组权限失败", ex.Message, ex.StackTrace);
            }
        }
        /// <summary>
        /// 请求更新用户组-权限
        /// </summary>
        /// <param roleName="bti-test"></param>
        /// <param priIdSet="bti-test"></param>
        /// <param des="bti-test"></param>
        public static string Update_group_privilege_request(string RoleName, string PriIdSet, string Des)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> updategroupprivilegeParam = new Dictionary<string, object>();
                updategroupprivilegeParam.Add("roleName", RoleName);
                updategroupprivilegeParam.Add("priIdSet", PriIdSet);
                updategroupprivilegeParam.Add("des", Des);
                MsgStruct.Msg_Body_Struct updategroupprivilegeParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_update_group_privilege_request, updategroupprivilegeParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = updategroupprivilegeParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求更新用户组-权限响应
        /// </summary>
        /// <returns></returns>
        public static void Update_group_privilege_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult UpdategroupprivilegeInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        UpdategroupprivilegeInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        UpdategroupprivilegeInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                updategroupprivilegeResponse = UpdategroupprivilegeInfo;
                if (updategroupprivilegeResponse.ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        for (int i = 0; i < GroupprivilegeManageList.Count; i++)
                        {
                            if (GroupprivilegeManageList[i].GroupName.Equals(JsonInterFace.RoleManageInfo.Name))
                            {
                                GroupprivilegeManageList[i].PriIdSet = JsonInterFace.RoleManageInfo.IsRead;
                                GroupprivilegeManageList[i].Des = JsonInterFace.RoleManageInfo.IsWrite;
                            }
                        }
                        if (Parameters.ConfigType == "UpdateRole")
                        {
                            ShowMessage("更新用户组-权限" + updategroupprivilegeResponse.ReturnStr, 64);
                        }
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("更新用户组-权限" + updategroupprivilegeResponse.ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求更新用户组权限失败", ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 用户-域相关
        /// <summary>
        /// 请求用户-域
        /// </summary>
        public static string All_usr_domain_request()
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> usrDomainParam = new Dictionary<string, object>();
                MsgStruct.Msg_Body_Struct usrDomainParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_usr_domain_request, usrDomainParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = usrDomainParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求用户-域响应
        /// </summary>
        public static void All_usr_domain_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string UsrGroupCount = string.Empty;
            try
            {
                usrdomainManageClass.UsrDomainTable.Clear();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("UsrDomaiCount"))
                    {
                        UsrGroupCount = Item.Value.ToString();
                    }
                }

                //成功
                if (ReturnCode.Trim().Equals("0"))
                {
                    foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                    {
                        DataRow rw = usrdomainManageClass.UsrDomainTable.NewRow();
                        rw[0] = x.name.Trim();
                        foreach (KeyValuePair<string, object> Item in x.dic)
                        {
                            if (Item.Key.Trim().Equals("domainIdSet"))
                            {
                                rw[1] = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Equals("des"))
                            {
                                rw[2] = Item.Value.ToString();
                            }
                        }
                        usrdomainManageClass.UsrDomainTable.Rows.Add(rw);
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求用户域失败", ex.Message, ex.StackTrace);
            }
        }
        /// <summary>
        /// 请求增加用户-域
        /// </summary>
        /// <param usrName="root"></param>
        /// <param domainIdSet="9,8,7"></param>
        /// <param des="备注"></param>
        public static string Add_usr_domain_request(string UsrName, string DomainIdSet, string Des)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> addusrdomainParam = new Dictionary<string, object>();
                addusrdomainParam.Add("usrName", UsrName);
                addusrdomainParam.Add("domainIdSet", DomainIdSet);
                addusrdomainParam.Add("des", Des);
                MsgStruct.Msg_Body_Struct addusrdomainParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_add_usr_domain_request, addusrdomainParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = addusrdomainParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求增加用户-域响应
        /// </summary>
        public static void Add_usr_domain_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult addusrdomainInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        addusrdomainInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        addusrdomainInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                addusrdomainResponse = addusrdomainInfo;
                if (addusrdomainResponse.ReturnCode.Equals("0"))
                {
                    new Thread(() =>
                    {
                        DataRow usrdomainrw = UsrdomainManageClass.UsrDomainTable.NewRow();
                        usrdomainrw[0] = AddUserManageList.Name;
                        usrdomainrw[1] = AddUserManageList.DomainIdSet;
                        usrdomainrw[2] = AddUserManageList.BuildName;
                        UsrdomainManageClass.UsrDomainTable.Rows.Add(usrdomainrw);
                        if (Parameters.ConfigType == "UpdateUser")
                        {
                            ShowMessage("增加用户-域对应关系" + addusrdomainResponse.ReturnStr, 64);
                        }
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("增加用户-域对应关系" + addusrdomainResponse.ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求增加用户域失败", ex.Message, ex.StackTrace);
            }
        }
        /// <summary>
        /// 请求删除用户-域
        /// </summary>
        /// <param usrName="root"></param>
        public static string Del_usr_domain_request(string UsrName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> delusrdomainParam = new Dictionary<string, object>();
                delusrdomainParam.Add("usrName", UsrName);
                MsgStruct.Msg_Body_Struct delusrdomainParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_usr_domain_request, delusrdomainParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = delusrdomainParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求删除用户-域响应
        /// </summary>
        public static void Del_usr_domain_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                ReturnResult delusrdomainInfo = new ReturnResult();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        delusrdomainInfo.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        delusrdomainInfo.ReturnStr = Item.Value.ToString();
                    }
                }
                delusrdomainResponse = delusrdomainInfo;
                if (delusrdomainResponse.ReturnCode.Equals("0"))
                {
                    for (int i = 0; i <= UsrdomainManageClass.UsrDomainTable.Rows.Count; i++)
                    {
                        if (UsrdomainManageClass.UsrDomainTable.Rows[i][0].ToString() == DelUserManageList.Name)
                        {
                            UsrdomainManageClass.UsrDomainTable.Rows.RemoveAt(i);
                            break;
                        }
                    }
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("删除用户-域" + delusrdomainResponse.ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求删除用户域失败", ex.Message, ex.StackTrace);
            }
        }
        /// <summary>
        /// 请求更新用户-域
        /// </summary>
        /// <param usrName="root"></param>
        /// <param domainIdSet="9,8,7"></param>
        /// <param des="添加用户root的域集合"></param>
        public static string Update_usr_domain_request(string UsrName, string DomainIdSet, string Des)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> updateusrdomainParam = new Dictionary<string, object>();
                updateusrdomainParam.Add("usrName", UsrName);
                updateusrdomainParam.Add("domainIdSet", DomainIdSet);
                updateusrdomainParam.Add("des", Des);
                MsgStruct.Msg_Body_Struct updateusrdomainParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_update_usr_domain_request, updateusrdomainParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = updateusrdomainParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求更新用户-域响应
        /// </summary>
        public static void Update_usr_domain_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        updateusrdomainResponse.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        updateusrdomainResponse.ReturnStr = Item.Value.ToString();
                    }
                }
                if (updateusrdomainResponse.ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        for (int i = 0; i < UsrdomainManageClass.UsrDomainTable.Rows.Count; i++)
                        {
                            if (UsrdomainManageClass.UsrDomainTable.Rows[i][0].Equals(AddUserManageList.Name))
                            {
                                UsrdomainManageClass.UsrDomainTable.Rows[i][1] = AddUserManageList.DomainIdSet;
                                break;
                            }
                        }
                        if (Parameters.ConfigType == "UpdateUser")
                        {
                            ShowMessage("更新用户-域" + updateusrdomainResponse.ReturnStr, 64);
                        }
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("更新用户-域" + updateusrdomainResponse.ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("请求更新用户域失败", ex.Message, ex.StackTrace);
            }
        }
        #endregion

        /// <summary>
        /// 添加域名结点
        /// </summary>
        /// <param name="fullNodeName"></param>
        /// <param name="nodeName"></param>
        /// <returns></returns>
        public static string AddDomainNodeName(string fullNodeName, string nodeName, int isStation, string des)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> domainNodeParam = new Dictionary<string, object>();
                domainNodeParam.Add("parentNameFullPath", fullNodeName);
                domainNodeParam.Add("name", nodeName);
                domainNodeParam.Add("isStation", isStation);
                domainNodeParam.Add("des", des);
                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                domainNodeParam.Add("AllNum", domainNodeParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_add_domain_request, domainNodeParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 修改名域结点
        /// </summary>
        /// <param name="fullNodeName"></param>
        /// <param name="nodeName"></param>
        /// <param name="isStation"></param>
        /// <param name="des"></param>
        /// <returns></returns>
        public static string ReNameDomainNodeName(string oldFullNodeName, string newFullNodeName, int isStation, string des)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> renameDomainNodeParam = new Dictionary<string, object>();
                renameDomainNodeParam.Add("oldNameFullPath", oldFullNodeName);
                renameDomainNodeParam.Add("newNameFullPath", newFullNodeName);
                renameDomainNodeParam.Add("isStation", isStation);
                renameDomainNodeParam.Add("newDes", des);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                renameDomainNodeParam.Add("AllNum", renameDomainNodeParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_rename_domain_request, renameDomainNodeParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 添加域名称响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void AddDomainNodeNameResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("ReturnCode"))
                {
                    ReturnCode = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("ReturnStr"))
                {
                    ReturnStr = Item.Value.ToString();
                }
            }

            if (ReturnCode.Trim().Equals("0"))
            {
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_AddDomainNameResponse, 0, 0);
                new Thread(() =>
                {
                    ShowMessage("添加" + ReturnStr, 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage("添加" + ReturnStr, 16);
                }).Start();
            }
        }

        /// <summary>
        /// 重命名域名称响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void ReNameDomainNodeNameResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("ReturnCode"))
                {
                    ReturnCode = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("ReturnStr"))
                {
                    ReturnStr = Item.Value.ToString();
                }
            }

            if (ReturnCode.Trim().Equals("0"))
            {
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_ReNameDomainNameResponse, 0, 0);
                new Thread(() =>
                {
                    ShowMessage("重命名" + ReturnStr, 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage("重命名" + ReturnStr, 16);
                }).Start();
            }
        }

        /// <summary>
        /// 请求删除域名
        /// </summary>
        /// <param name="DomainFullName">要删出的域名(提供全名)</param>
        public static string DeleteDomainNameRequest(string DomainFullName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> deleteDomainNodeParam = new Dictionary<string, object>();
                deleteDomainNodeParam.Add("nameFullPath", DomainFullName);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                deleteDomainNodeParam.Add("AllNum", deleteDomainNodeParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_domain_request, deleteDomainNodeParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 请求删除域名响应
        /// </summary>
        public static void DeleteDomainNameResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("ReturnCode"))
                {
                    ReturnCode = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("ReturnStr"))
                {
                    ReturnStr = Item.Value.ToString();
                }
            }

            if (ReturnCode.Trim().Equals("0"))
            {
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_DeleteDomainNameResponse, 0, 0);

                new Thread(() =>
                {
                    ShowMessage("删除" + ReturnStr, 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage("删除" + ReturnStr, 16);
                }).Start();
            }
        }

        /// <summary>
        /// 添加设备名
        /// </summary>
        /// <param name="DomainFullName"></param>
        /// <param name="DeviceName"></param>
        public static string AddDeviceNameRequest(string DeviceFullPathName, string DeviceName, string Mode)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> DeviceNodeParam = new Dictionary<string, object>();
                DeviceNodeParam.Add("parentFullPathName", DeviceFullPathName);
                DeviceNodeParam.Add("name", DeviceName);
                DeviceNodeParam.Add("mode", Mode);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                DeviceNodeParam.Add("AllNum", DeviceNodeParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_add_device_request, DeviceNodeParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 添加设备名请求
        /// </summary>
        /// <param name="DomainFullName"></param>
        /// <param name="DeviceName"></param>
        public static string AddDeviceNameRequest(string DeviceFullPathName, string DeviceName, string Mode, string SourceName, string SourceIP, string SourcePort)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> DeviceNodeParam = new Dictionary<string, object>();
                DeviceNodeParam.Add("parentFullPathName", DeviceFullPathName);
                DeviceNodeParam.Add("name", DeviceName);
                DeviceNodeParam.Add("mode", Mode);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                DeviceNodeParam.Add("AllNum", DeviceNodeParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_add_device_request, DeviceNodeParam);

                deviceListsParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct n_dic = new MsgStruct.Name_DIC_Struct();

                //未知设备原参数
                n_dic.name = SourceName;
                n_dic.dic.Add("ipAddr", SourceIP);
                n_dic.dic.Add("port", SourcePort);
                deviceListsParamBody.n_dic.Add(n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 添加设备名响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void AddDeviceNameResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("ReturnCode"))
                {
                    ReturnCode = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("ReturnStr"))
                {
                    ReturnStr = Item.Value.ToString();
                }
            }

            //手动添加-->未知设备响应
            if (new Regex("UnknownDeviceToStation").Match(Parameters.ConfigType).Success)
            {
                //将已完成的序号发送处理
                IntPtr CompleteCountHandle = Marshal.StringToBSTR(Parameters.CompleteCount.ToString());
                IntPtr ResultTextHandle = Marshal.StringToBSTR(ReturnCode + "|" + ReturnStr);
                Parameters.SendMessage(Parameters.UnknownDeviceWinHandle, Parameters.WM_UnknownDeviceAddResponse, ResultTextHandle.ToInt32(), CompleteCountHandle.ToInt32());
                Parameters.CompleteCount++;
            }
            //手动添加-->正常新设备响应
            else
            {
                if (ReturnCode.Trim().Equals("0"))
                {
                    Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_AddDeviceNameResponse, 0, 0);

                    JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "添加新设备[" + JsonInterFace.LteDeviceParameter.DomainFullPathName + "." + JsonInterFace.LteDeviceParameter.DeviceName + " 制式:" + JsonInterFace.LteDeviceParameter.DeviceMode + "]", "添加设备", ReturnStr);
                    new Thread(() =>
                    {
                        ShowMessage("添加新设备[" + JsonInterFace.LteDeviceParameter.DomainFullPathName + "." + JsonInterFace.LteDeviceParameter.DeviceName + "]" + ReturnStr, 64);
                    }).Start();
                }
                else
                {
                    JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "添加新设备[" + JsonInterFace.LteDeviceParameter.DomainFullPathName + "." + JsonInterFace.LteDeviceParameter.DeviceName + " 制式:" + JsonInterFace.LteDeviceParameter.DeviceMode + "]", "添加设备", ReturnStr);
                    new Thread(() =>
                    {
                        ShowMessage("添加新设备[" + JsonInterFace.LteDeviceParameter.DomainFullPathName + "." + JsonInterFace.LteDeviceParameter.DeviceName + "]" + ReturnStr, 16);
                    }).Start();
                }
            }
        }

        /// <summary>
        /// 更新设备属性参数
        /// </summary>
        /// <param name="parentFullPathName"></param>
        /// <param name="DeviceName"></param>
        /// <param name="DeviceAttrParamList"></param>
        /// <returns></returns>
        public static string AddDeviceNameUpdateParametersRequest(string parentFullPathName, string DeviceName, Dictionary<string, string> DeviceAttrParamList)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> DeviceUpdateParam = new Dictionary<string, object>();
                DeviceUpdateParam.Add("parentFullPathName", parentFullPathName);
                DeviceUpdateParam.Add("name", DeviceName);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                DeviceUpdateParam.Add("AllNum", DeviceUpdateParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_update_device_request, DeviceUpdateParam);

                deviceListsParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct param = new MsgStruct.Name_DIC_Struct();

                foreach (KeyValuePair<string, string> item in DeviceAttrParamList)
                {
                    if (item.Value != null)
                    {
                        param.dic.Add(item.Key, item.Value);
                    }
                    else
                    {
                        param.dic.Add(item.Key, string.Empty);
                    }
                }
                deviceListsParamBody.n_dic.Add(param);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 设备参数更新响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void AddDeviceNameUpdateParametersResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            Regex regexAuto = new Regex("Auto");
            Regex regexManul = new Regex("Manul");

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("ReturnCode"))
                {
                    ReturnCode = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("ReturnStr"))
                {
                    ReturnStr = Item.Value.ToString();
                }
            }

            if (regexManul.Match(Parameters.ConfigType).Success)
            {
                JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "更新设备参数" + ReturnStr, "更新设备参数", ReturnStr);
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_UpdateDeviceInfoResponse, 0, 0);
                new Thread(() =>
                {
                    ShowMessage("更新设备参数成功！", 64);
                }).Start();
            }
            else if (regexAuto.Match(Parameters.ConfigType).Success)
            {
                JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "更新设备参数" + ReturnStr, "更新设备参数", ReturnStr);
            }
        }

        /// <summary>
        /// 删除设备名
        /// </summary>
        /// <param name="DomainFullName"></param>
        /// <param name="DeviceName"></param>
        public static string DeleteDeviceNameRequest(string DeviceFullPathName, string DeviceName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> DeviceNodeParam = new Dictionary<string, object>();
                DeviceNodeParam.Add("parentFullPathName", DeviceFullPathName);
                DeviceNodeParam.Add("name", DeviceName);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                DeviceNodeParam.Add("AllNum", DeviceNodeParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_device_request, DeviceNodeParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 删除设备名响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void DeleteDeviceNameResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("ReturnCode"))
                {
                    ReturnCode = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("ReturnStr"))
                {
                    ReturnStr = Item.Value.ToString();
                }
            }

            if (ReturnCode.Trim().Equals("0"))
            {
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_DeleteDeviceNameResponse, 0, 0);

                new Thread(() =>
                {
                    ShowMessage("删除" + ReturnStr, 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage("删除" + ReturnStr, 16);
                }).Start();
            }
        }

        /// <summary>
        /// AP上下线通知
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APOnOfflineResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string Status = string.Empty;
            string SN = string.Empty;
            string Fullname = string.Empty;
            string IP = string.Empty;
            string Port = string.Empty;
            string InnerType = string.Empty;

            SN = resultData.ApInfo.SN;
            Fullname = resultData.ApInfo.Fullname;
            IP = resultData.ApInfo.IP;
            Port = resultData.ApInfo.Port.ToString();
            InnerType = resultData.ApInfo.Type;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("Status"))
                    {
                        Status = Item.Value.ToString();
                    }
                }

                if (Status.Equals(APOnOffLineKey.OnLine.ToString()))
                {
                    //修改属性
                    for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                    {
                        if (Fullname.Equals(BindTreeViewClass.DeviceTreeTable.Rows[i][0].ToString()))
                        {
                            for (int j = 0; j < JsonInterFace.UsrdomainData.Count; j++)
                            {
                                if (JsonInterFace.UsrdomainData[j].SelfNodeType.Equals(NodeType.LeafNode.ToString()))
                                {
                                    if (JsonInterFace.UsrdomainData[j].ParentID.Equals(BindTreeViewClass.DeviceTreeTable.Rows[i][3].ToString())
                                        && JsonInterFace.UsrdomainData[j].Name.Equals(BindTreeViewClass.DeviceTreeTable.Rows[i][2].ToString()))
                                    {
                                        JsonInterFace.UsrdomainData[j].Icon = new NodeIcon().LeafAllReadyNodeIcon;
                                        break;
                                    }
                                }
                            }

                            BindTreeViewClass.DeviceTreeTable.Rows[i][9] = new NodeIcon().LeafAllReadyNodeIcon;

                            for (int j = 0; j < APATTributesLists.Count; j++)
                            {
                                if (APATTributesLists[j].FullName.Equals(Fullname))
                                {
                                    APATTributesLists[j].InnerType = InnerType;
                                    APATTributesLists[j].SN = SN;
                                    APATTributesLists[j].Port = Port;
                                    APATTributesLists[j].IpAddr = IP;
                                    APATTributesLists[j].OnLine = "1"; //0:断开，1:连接
                                    APATTributesLists[j].LastOnline = DateTime.Now.ToString();
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "[" + APATTributesLists[j].FullName + "]上线", "已上线", "成功");
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }
                else if (Status.Equals(APOnOffLineKey.OffLine.ToString()))
                {
                    //修改属性
                    for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                    {
                        if (Fullname.Equals(BindTreeViewClass.DeviceTreeTable.Rows[i][0].ToString()))
                        {
                            for (int j = 0; j < JsonInterFace.UsrdomainData.Count; j++)
                            {
                                if (JsonInterFace.UsrdomainData[j].SelfNodeType.Equals(NodeType.LeafNode.ToString()))
                                {
                                    if (JsonInterFace.UsrdomainData[j].ParentID.Equals(BindTreeViewClass.DeviceTreeTable.Rows[i][3].ToString())
                                        && JsonInterFace.UsrdomainData[j].Name.Equals(BindTreeViewClass.DeviceTreeTable.Rows[i][2].ToString()))
                                    {
                                        JsonInterFace.UsrdomainData[j].Icon = new NodeIcon().LeafNoConnectNodeIcon;
                                        break;
                                    }
                                }
                            }

                            BindTreeViewClass.DeviceTreeTable.Rows[i][9] = new NodeIcon().LeafNoConnectNodeIcon;

                            for (int j = 0; j < APATTributesLists.Count; j++)
                            {
                                if (APATTributesLists[j].FullName.Equals(Fullname))
                                {
                                    APATTributesLists[j].InnerType = InnerType;
                                    APATTributesLists[j].SN = SN;
                                    APATTributesLists[j].Port = Port;
                                    APATTributesLists[j].IpAddr = IP;
                                    APATTributesLists[j].OnLine = "0"; //0:下线，1在线
                                    APATTributesLists[j].LastOnline = DateTime.Now.ToString();
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "[" + APATTributesLists[j].FullName + "]下线", "已下线", "成功");
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_DeviceListInfoLoad, 0, 0);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 设备状态改变相关
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void OnDeviceStatuChanged(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string DomainPathFullName = string.Empty;
            string Carry = string.Empty;
            string SCTP = string.Empty;
            string S1 = string.Empty;
            string GPS = string.Empty;
            string CELL = string.Empty;
            string SYNC = string.Empty;
            string LICENSE = string.Empty;
            string RADIO = string.Empty;
            string ALIGN = string.Empty;
            string Timestamp = string.Empty;
            string WSelfStudy = string.Empty;
            string ApReadySt = string.Empty;
            string Detail = string.Empty;
            string[] StatusInfo = new string[] { string.Empty, string.Empty };
            string SelfMode = string.Empty;

            try
            {
                DomainPathFullName = resultData.ApInfo.Fullname;

                #region 解析AP状态数据
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("carry"))
                    {
                        Carry = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("SCTP"))
                    {
                        SCTP = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("S1"))
                    {
                        S1 = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("GPS"))
                    {
                        GPS = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("CELL"))
                    {
                        CELL = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("SYNC"))
                    {
                        SYNC = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("LICENSE"))
                    {
                        LICENSE = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("RADIO"))
                    {
                        RADIO = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ALIGN"))
                    {
                        ALIGN = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("timestamp"))
                    {
                        Timestamp = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("wSelfStudy"))
                    {
                        WSelfStudy = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ApReadySt"))
                    {
                        ApReadySt = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("detail"))
                    {
                        Detail = Item.Value.ToString();
                    }
                }
                #endregion

                #region 配置AP状态属性
                for (int j = 0; j < JsonInterFace.APATTributesLists.Count; j++)
                {
                    if (DomainPathFullName == JsonInterFace.APATTributesLists[j].FullName)
                    {
                        SelfMode = JsonInterFace.APATTributesLists[j].Mode;

                        if (JsonInterFace.APATTributesLists[j].OnLine == "1")
                        {
                            if (JsonInterFace.APATTributesLists[j].Radio != RADIO)
                            {
                                JsonInterFace.APATTributesLists[j].Radio = RADIO;
                            }

                            lock (JsonInterFace.UsrdomainDataLock)
                            {
                                if (RADIO == "1")
                                {
                                    SettingDeviceActiveStatus(
                                                                UsrdomainData,
                                                                DomainPathFullName,
                                                                Carry,
                                                                new NodeIcon().LeafAllReadyNodeIcon,
                                                                new NodeIcon().Carrier_One_ActiveIcon,
                                                                new NodeIcon().Carrier_Two_ActiveIcon,
                                                                true
                                                             );
                                    if (SelfMode == DeviceType.GSMV2 || SelfMode == DeviceType.GSM)
                                    {
                                        if (Carry == "0")
                                        {
                                            JsonInterFace.APATTributesLists[j].CarrierOne = true;
                                        }
                                        else if (Carry == "0")
                                        {
                                            JsonInterFace.APATTributesLists[j].CarrierTwo = true;
                                        }
                                        JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备状态改变消息：[" + DomainPathFullName + "]载波(" + (Carry == "0" ? "1" : "2") + ")激活成功", "射频状态", "激活");
                                    }
                                    else
                                    {
                                        JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备状态改变消息：[" + DomainPathFullName + "]激活成功", "射频状态", "激活");
                                    }
                                }
                                else if (RADIO == "0")
                                {
                                    SettingDeviceActiveStatus(
                                                                UsrdomainData,
                                                                DomainPathFullName,
                                                                Carry,
                                                                new NodeIcon().LeafNoActiveNodeIcon,
                                                                new NodeIcon().Carrier_One_ActiveIcon,
                                                                new NodeIcon().Carrier_Two_ActiveIcon,
                                                                false
                                                             );



                                    if (SelfMode == DeviceType.GSMV2 || SelfMode == DeviceType.GSM)
                                    {
                                        if (Carry == "0")
                                        {
                                            JsonInterFace.APATTributesLists[j].CarrierOne = false;
                                        }
                                        else if (Carry == "0")
                                        {
                                            JsonInterFace.APATTributesLists[j].CarrierTwo = false;
                                        }
                                        JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备状态改变消息：[" + DomainPathFullName + "]载波(" + (Carry == "0" ? "1" : "2") + ")去激活成功", "射频状态", "去激活");
                                    }
                                    else
                                    {
                                        JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备状态改变消息：[" + DomainPathFullName + "]去激活成功", "射频状态", "去激活");
                                    }
                                }
                            }
                        }

                        //白名单自学习状态
                        if (JsonInterFace.APATTributesLists[j].Command != WSelfStudy)
                        {
                            JsonInterFace.APATTributesLists[j].Command = WSelfStudy;
                        }
                        //停止
                        if (WSelfStudy == "0")
                        {
                            JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备状态改变消息：[" + DomainPathFullName + "]白名单自学习停止", "白名单自学习状态", "停止");
                        }
                        //学习
                        else if (WSelfStudy == "1")
                        {
                            JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备状态改变消息：[" + DomainPathFullName + "]白名单自学习开始", "白名单自学习状态", "正在学习...");
                        }

                        //AP数据对齐状态
                        if (JsonInterFace.APATTributesLists[j].ALIGN != ALIGN)
                        {
                            JsonInterFace.APATTributesLists[j].ALIGN = ALIGN;
                        }
                        //未对齐
                        if (ALIGN == "0")
                        {
                            JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备状态改变消息：[" + DomainPathFullName + "]数据对齐异常", "数据对齐状态", "异常");

                            //数据对异常状呈现
                            JsonInterFace.SettingDeviceAlignStatus(UsrdomainData, DomainPathFullName, Carry, 0, true, ref StatusInfo);
                        }
                        //已对齐
                        else if (ALIGN == "1")
                        {
                            JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备状态改变消息：[" + DomainPathFullName + "]数据对齐正常", "数据对齐状态", "正常");

                            //数据对异常状呈现
                            JsonInterFace.SettingDeviceAlignStatus(UsrdomainData, DomainPathFullName, Carry, 0, false, ref StatusInfo);
                        }

                        try
                        {
                            JsonInterFace.APATTributesLists[j].AlertIcon = StatusInfo[0];
                            JsonInterFace.APATTributesLists[j].AlertText = StatusInfo[1];
                        }
                        catch (Exception Ex)
                        {
                            JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备状态改变消息：[" + DomainPathFullName + "]数据对齐错误", "数据对齐状态", "错误");
                            Parameters.PrintfLogsExtended("设备状态改变消息：[" + DomainPathFullName + "]数据对齐错误]...", Ex.Message, Ex.StackTrace);
                        }
                        break;
                    }
                }
                #endregion

                #region 应用属性值
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_DeviceListInfoLoad, 0, 0);
                #endregion
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("设备状态改变消息异常", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 获到通用数据请求
        /// </summary>
        /// <param name="parentFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="ip"></param>
        /// <param name="port"></param>
        /// <param name="sn"></param>
        /// <returns></returns>
        public static string GetAPGenParaRequest(string parentFullPathName, string deviceName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> APGenParam = new Dictionary<string, object>();
                APGenParam.Add("parentFullPathName", parentFullPathName);
                APGenParam.Add("name", deviceName);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                APGenParam.Add("AllNum", APGenParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_GenPara_Request, APGenParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 获取通用数据响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void GetAPGenParaResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string NodeCount = string.Empty;
            string DomainId = string.Empty;
            string DomainParentId = string.Empty;
            string DevcieName = string.Empty;
            string ParentFullPathName = string.Empty;
            string SelfMode = string.Empty;
            string InnerType = string.Empty;
            int i = 0, j = 0;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("NodeCount"))
                    {
                        NodeCount = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("domainId"))
                    {
                        DomainId = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("domainParentId"))
                    {
                        DomainParentId = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("parentFullPathName"))
                    {
                        ParentFullPathName = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("name"))
                    {
                        DevcieName = Item.Value.ToString();
                    }
                    if (j > 6) { break; }
                    j++;
                }

                if (ReturnCode.Equals("0"))
                {
                    for (i = 0, j = 0; i < APATTributesLists.Count; i++)
                    {
                        if (APATTributesLists[i].ParentID.Equals(DomainId)
                            && APATTributesLists[i].SelfName.Equals(DevcieName))
                        {
                            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                            {
                                if (j < 6) { j++; continue; }

                                if (Item.Key.Trim().Equals("primaryplmn"))
                                {
                                    APATTributesLists[i].PLMN = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("earfcndl"))
                                {
                                    APATTributesLists[i].FrequencyPoint = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("cellid"))
                                {
                                    APATTributesLists[i].CellID = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("pci"))
                                {
                                    APATTributesLists[i].Scrambler = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("bandwidth"))
                                {
                                    if (Item.Value.ToString() != "" || Item.Value.ToString() != null)
                                    {
                                        if (int.Parse(Item.Value.ToString()) == 5 * 10)
                                        {
                                            APATTributesLists[i].BandWidth = (int.Parse(Item.Value.ToString()) / 5).ToString();
                                        }
                                        else
                                        {
                                            APATTributesLists[i].BandWidth = Item.Value.ToString();
                                        }
                                    }
                                }
                                else if (Item.Key.Trim().Equals("tac"))
                                {
                                    APATTributesLists[i].TacLac = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("txpower"))
                                {
                                    APATTributesLists[i].PowerAttenuation = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("periodtac"))
                                {
                                    APATTributesLists[i].Period = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("manualfreq"))
                                {
                                    if (Item.Value.ToString().Equals("1"))
                                    {
                                        APATTributesLists[i].FrequencyChioceModeAuto = false;
                                        APATTributesLists[i].FrequencyChioceModeManul = true;
                                    }
                                    else
                                    {
                                        APATTributesLists[i].FrequencyChioceModeAuto = true;
                                        APATTributesLists[i].FrequencyChioceModeManul = false;
                                    }
                                }
                                else if (Item.Key.Trim().Equals("bootMode"))
                                {
                                    if (Item.Value.ToString().Equals("1"))
                                    {
                                        APATTributesLists[i].RebootModeAuto = true;
                                        APATTributesLists[i].RebootModeManul = false;
                                    }
                                    else
                                    {
                                        APATTributesLists[i].RebootModeAuto = false;
                                        APATTributesLists[i].RebootModeManul = true;
                                    }
                                }
                                else if (Item.Key.Trim().Equals("Earfcnlist"))
                                {
                                    APATTributesLists[i].FrequencyList = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("Bandoffset"))
                                {
                                    APATTributesLists[i].FrequencyOffsetList = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("NTP"))
                                {
                                    APATTributesLists[i].NTPServerIP = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("ntppri"))
                                {
                                    APATTributesLists[i].NTPLevel = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("gps_select"))
                                {
                                    if (Item.Value.ToString().Equals("0"))
                                    {
                                        APATTributesLists[i].GPSStatusNoneConfig = true;
                                    }
                                    else if (Item.Value.ToString().Equals("1"))
                                    {
                                        APATTributesLists[i].GPSStatusConfig = true;
                                    }
                                }
                                //else if (Item.Key.Trim().Equals("source"))
                                //{
                                //    if (Item.Value.ToString().Equals("0"))
                                //    {
                                //        APATTributesLists[i].SyncSourceWithGPS = true;
                                //        APATTributesLists[i].SyncSourceWithKongKou = false;
                                //    }
                                //    else if (Item.Value.ToString().Equals("1"))
                                //    {
                                //        APATTributesLists[i].SyncSourceWithKongKou = true;
                                //        APATTributesLists[i].SyncSourceWithGPS = false;
                                //    }
                                //    else
                                //    {
                                //        APATTributesLists[i].SyncSourceWithGPS = false;
                                //        APATTributesLists[i].SyncSourceWithKongKou = false;
                                //    }
                                //}
                                else if (Item.Key.Trim().Equals("ManualEnable"))
                                {
                                    if (Item.Value.ToString().Equals("0"))
                                    {
                                        APATTributesLists[i].AppointNeighConfig = false;
                                        APATTributesLists[i].AppointNeighNoneConfig = true;
                                    }
                                    else if (Item.Value.ToString().Equals("1"))
                                    {
                                        APATTributesLists[i].AppointNeighConfig = true;
                                        APATTributesLists[i].AppointNeighNoneConfig = false;
                                    }
                                }
                                else if (Item.Key.Trim().Equals("ManualEarfcn"))
                                {
                                    APATTributesLists[i].AppointNeighList = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("ManualPci"))
                                {
                                    APATTributesLists[i].AppointNeighPci = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("ManualBw"))
                                {
                                    APATTributesLists[i].AppointNeighBandWidth = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("otherplmn"))
                                {
                                    APATTributesLists[i].MorePLMNSTab.Rows.Clear();
                                    string[] OtherPlmn = Item.Value.ToString().Split(new char[] { ',' });
                                    for (int n = 0; n < OtherPlmn.Length; n++)
                                    {
                                        if (OtherPlmn[n] != "" && OtherPlmn[n] != null)
                                        {
                                            APATTributesLists[i].PlmnsInput(OtherPlmn[n]);
                                        }
                                    }
                                }
                                else if (Item.Key.Trim().Equals("periodFreq"))
                                {
                                    APATTributesLists[i].PerierFreqTab.Rows.Clear();
                                    string[] PeriodFreq = Item.Value.ToString().Split(new char[] { ',' });
                                    for (int n = 0; n < PeriodFreq.Length; n++)
                                    {
                                        if (PeriodFreq[n] != "" && PeriodFreq[n] != null)
                                        {
                                            if (n.Equals(0))
                                            {
                                                APATTributesLists[i].Cycle = PeriodFreq[n].Split(new char[] { ':' })[0];
                                                APATTributesLists[i].PerierInput(PeriodFreq[n].Split(new char[] { ':' })[1]);
                                            }
                                            else
                                            {
                                                APATTributesLists[i].PerierInput(PeriodFreq[n]);
                                            }
                                        }
                                    }
                                }
                                else if (Item.Key.Trim().Equals("activeTime1Start"))
                                {
                                    APATTributesLists[i].FirstPeriodTimeStart = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("activeTime1Ended"))
                                {
                                    APATTributesLists[i].FirstPeriodTimeEnd = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("activeTime2Start"))
                                {
                                    APATTributesLists[i].SecondPeriodTimeStart = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("activeTime2Ended"))
                                {
                                    APATTributesLists[i].SecoondPeriodTimeEnd = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("activeTime3Start"))
                                {
                                    APATTributesLists[i].ThreePeriodTimeStart = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("activeTime3Ended"))
                                {
                                    APATTributesLists[i].ThreePeriodTimeEnd = Item.Value.ToString();
                                }
                                else if (Item.Key.Trim().Equals("mode"))
                                {
                                    APATTributesLists[i].DeviceMode = Item.Value.ToString().Replace("_", "-");
                                }
                                j++;
                            }

                            //========================WCDMA更新邦定项========================
                            if (DeviceType.WCDMA == APATTributesLists[i].DeviceMode)
                            {
                                #region WCDMA
                                //>>>>>> 设备信息 <<<<<<
                                JsonInterFace.WCDMADeviceParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.WCDMADeviceParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.WCDMADeviceParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.WCDMADeviceParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;

                                string FullPathName = string.Empty;
                                string[] DomainFullNameTmp = JsonInterFace.APATTributesLists[i].FullName.Split(new char[] { '.' });
                                for (int k = 0; k < DomainFullNameTmp.Length - 1; k++)
                                {
                                    if (FullPathName == "" || FullPathName == null)
                                    {
                                        FullPathName = DomainFullNameTmp[k];
                                    }
                                    else
                                    {
                                        FullPathName += "." + DomainFullNameTmp[k];
                                    }
                                }
                                JsonInterFace.WCDMADeviceParameter.DomainFullPathName = FullPathName;
                                JsonInterFace.WCDMADeviceParameter.Station = DomainFullNameTmp[DomainFullNameTmp.Length - 2];
                                JsonInterFace.WCDMADeviceParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.WCDMADeviceParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                JsonInterFace.WCDMADeviceParameter.StaticIPMode = true;               //没有返回值
                                JsonInterFace.WCDMADeviceParameter.DynamicIPMode = false;             //没有返回值

                                JsonInterFace.WCDMADeviceParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.WCDMADeviceParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.WCDMADeviceParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.WCDMADeviceParameter.SN = JsonInterFace.APATTributesLists[i].SN;
                                JsonInterFace.WCDMADeviceParameter.DeviceIdentificationMode = "设备"; //没有返回值                            

                                //>>>>>>小区信息<<<<<<
                                JsonInterFace.WCDMACellNeighParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.WCDMACellNeighParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.WCDMACellNeighParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.WCDMACellNeighParameter.DomainFullPathName = JsonInterFace.APATTributesLists[i].FullName;

                                JsonInterFace.WCDMACellNeighParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.WCDMACellNeighParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.WCDMACellNeighParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.WCDMACellNeighParameter.SN = JsonInterFace.APATTributesLists[i].SN;

                                JsonInterFace.WCDMACellNeighParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;
                                JsonInterFace.WCDMACellNeighParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.WCDMACellNeighParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                JsonInterFace.WCDMACellNeighParameter.PLMN = JsonInterFace.APATTributesLists[i].PLMN;
                                JsonInterFace.WCDMACellNeighParameter.Operators = JsonInterFace.OperatorsList.GetOperators(JsonInterFace.APATTributesLists[i].PLMN);
                                JsonInterFace.WCDMACellNeighParameter.FrequencyPoint = JsonInterFace.APATTributesLists[i].FrequencyPoint;
                                JsonInterFace.WCDMACellNeighParameter.BandWidth = JsonInterFace.APATTributesLists[i].BandWidth;
                                JsonInterFace.WCDMACellNeighParameter.PowerAttenuation = JsonInterFace.APATTributesLists[i].PowerAttenuation;
                                JsonInterFace.WCDMACellNeighParameter.Scrambler = JsonInterFace.APATTributesLists[i].Scrambler;
                                JsonInterFace.WCDMACellNeighParameter.TacLac = JsonInterFace.APATTributesLists[i].TacLac;
                                JsonInterFace.WCDMACellNeighParameter.Period = JsonInterFace.APATTributesLists[i].Period;

                                JsonInterFace.WCDMASetWorkModeParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.WCDMASetWorkModeParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.WCDMASetWorkModeParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.WCDMASetWorkModeParameter.SN = JsonInterFace.APATTributesLists[i].SN;
                                JsonInterFace.WCDMASetWorkModeParameter.FrequencyChioceModeAuto = JsonInterFace.APATTributesLists[i].FrequencyChioceModeAuto;
                                JsonInterFace.WCDMASetWorkModeParameter.FrequencyChioceModeManul = JsonInterFace.APATTributesLists[i].FrequencyChioceModeManul;
                                JsonInterFace.WCDMASetWorkModeParameter.RebootModeAuto = JsonInterFace.APATTributesLists[i].RebootModeAuto;
                                JsonInterFace.WCDMASetWorkModeParameter.RebootModeManul = JsonInterFace.APATTributesLists[i].RebootModeManul;

                                //>>>>>>高级设置<<<<<<
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.DomainFullPathName = JsonInterFace.APATTributesLists[i].FullName;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.SN = JsonInterFace.APATTributesLists[i].SN;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.FrequencyList = JsonInterFace.APATTributesLists[i].FrequencyList;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.GPSStatusConfig = JsonInterFace.APATTributesLists[i].GPSStatusConfig;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.GPSStatusNoneConfig = JsonInterFace.APATTributesLists[i].GPSStatusNoneConfig;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.FrequencyOffsetList = JsonInterFace.APATTributesLists[i].FrequencyOffsetList;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.NTPServerIP = JsonInterFace.APATTributesLists[i].NTPServerIP;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.NTPLevel = JsonInterFace.APATTributesLists[i].NTPLevel;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.SyncSourceWithGPS = JsonInterFace.APATTributesLists[i].SyncSourceWithGPS;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.SyncSourceWithKongKou = JsonInterFace.APATTributesLists[i].SyncSourceWithKongKou;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.AppointNeighNoneConfig = JsonInterFace.APATTributesLists[i].AppointNeighNoneConfig;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.AppointNeighConfig = JsonInterFace.APATTributesLists[i].AppointNeighConfig;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.AppointNeighList = JsonInterFace.APATTributesLists[i].AppointNeighList;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.AppointNeighPci = JsonInterFace.APATTributesLists[i].AppointNeighPci;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.AppointNeighBandWidth = JsonInterFace.APATTributesLists[i].AppointNeighBandWidth;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.FirstPeriodTimeStart = JsonInterFace.APATTributesLists[i].FirstPeriodTimeStart;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.FirstPeriodTimeEnd = JsonInterFace.APATTributesLists[i].FirstPeriodTimeEnd;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.SecondPeriodTimeStart = JsonInterFace.APATTributesLists[i].SecondPeriodTimeStart;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.SecoondPeriodTimeEnd = JsonInterFace.APATTributesLists[i].SecoondPeriodTimeEnd;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.ThreePeriodTimeStart = JsonInterFace.APATTributesLists[i].ThreePeriodTimeStart;
                                JsonInterFace.WCDMADeviceAdvanceSettingParameter.ThreePeriodTimeEnd = JsonInterFace.APATTributesLists[i].ThreePeriodTimeEnd;

                                //>>>>>>系统设置<<<<<<
                                JsonInterFace.WCDMADeviceSystemMaintenenceParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.WCDMADeviceSystemMaintenenceParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.WCDMADeviceSystemMaintenenceParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.WCDMADeviceSystemMaintenenceParameter.DomainFullPathName = JsonInterFace.APATTributesLists[i].FullName;

                                JsonInterFace.WCDMADeviceSystemMaintenenceParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.WCDMADeviceSystemMaintenenceParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.WCDMADeviceSystemMaintenenceParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.WCDMADeviceSystemMaintenenceParameter.SN = JsonInterFace.APATTributesLists[i].SN;

                                JsonInterFace.WCDMADeviceSystemMaintenenceParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;
                                JsonInterFace.WCDMADeviceSystemMaintenenceParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.WCDMADeviceSystemMaintenenceParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;


                                //>>>>>>工程设置<<<<<<
                                JsonInterFace.WCDMADeviceObjectSettingParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.WCDMADeviceObjectSettingParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.WCDMADeviceObjectSettingParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.WCDMADeviceObjectSettingParameter.DomainFullPathName = JsonInterFace.APATTributesLists[i].FullName;

                                JsonInterFace.WCDMADeviceObjectSettingParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.WCDMADeviceObjectSettingParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.WCDMADeviceObjectSettingParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.WCDMADeviceObjectSettingParameter.SN = JsonInterFace.APATTributesLists[i].SN;

                                JsonInterFace.WCDMADeviceObjectSettingParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;
                                JsonInterFace.WCDMADeviceObjectSettingParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.WCDMADeviceObjectSettingParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                #endregion
                            }

                            else if (new Regex(DeviceType.LTE).Match(APATTributesLists[i].DeviceMode).Success)
                            {
                                //========================LTE更新邦定项========================
                                //>>>>>> 设备信息 <<<<<<
                                #region LTE
                                JsonInterFace.LteDeviceParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.LteDeviceParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.LteDeviceParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.LteDeviceParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;

                                string FullPathName = string.Empty;
                                string[] DomainFullNameTmp = JsonInterFace.APATTributesLists[i].FullName.Split(new char[] { '.' });
                                for (int k = 0; k < DomainFullNameTmp.Length - 1; k++)
                                {
                                    if (FullPathName == "" || FullPathName == null)
                                    {
                                        FullPathName = DomainFullNameTmp[k];
                                    }
                                    else
                                    {
                                        FullPathName += "." + DomainFullNameTmp[k];
                                    }
                                }
                                JsonInterFace.LteDeviceParameter.DomainFullPathName = FullPathName;
                                JsonInterFace.LteDeviceParameter.Station = DomainFullNameTmp[DomainFullNameTmp.Length - 2];
                                JsonInterFace.LteDeviceParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.LteDeviceParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                JsonInterFace.LteDeviceParameter.StaticIPMode = true;               //没有返回值
                                JsonInterFace.LteDeviceParameter.DynamicIPMode = false;             //没有返回值

                                JsonInterFace.LteDeviceParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.LteDeviceParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.LteDeviceParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.LteDeviceParameter.SN = JsonInterFace.APATTributesLists[i].SN;
                                JsonInterFace.LteDeviceParameter.DeviceIdentificationMode = "设备"; //没有返回值                               

                                //>>>>>>小区信息<<<<<<
                                JsonInterFace.LteCellNeighParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.LteCellNeighParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.LteCellNeighParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.LteCellNeighParameter.DomainFullPathName = JsonInterFace.APATTributesLists[i].FullName;

                                JsonInterFace.LteCellNeighParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.LteCellNeighParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.LteCellNeighParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.LteCellNeighParameter.SN = JsonInterFace.APATTributesLists[i].SN;

                                JsonInterFace.LteCellNeighParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;
                                JsonInterFace.LteCellNeighParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.LteCellNeighParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                JsonInterFace.LteCellNeighParameter.PLMN = JsonInterFace.APATTributesLists[i].PLMN;
                                JsonInterFace.LteCellNeighParameter.Operators = JsonInterFace.OperatorsList.GetOperators(JsonInterFace.APATTributesLists[i].PLMN);
                                JsonInterFace.LteCellNeighParameter.FrequencyPoint = JsonInterFace.APATTributesLists[i].FrequencyPoint;
                                JsonInterFace.LteCellNeighParameter.BandWidth = JsonInterFace.APATTributesLists[i].BandWidth;
                                JsonInterFace.LteCellNeighParameter.PowerAttenuation = JsonInterFace.APATTributesLists[i].PowerAttenuation;
                                JsonInterFace.LteCellNeighParameter.Scrambler = JsonInterFace.APATTributesLists[i].Scrambler;
                                JsonInterFace.LteCellNeighParameter.TacLac = JsonInterFace.APATTributesLists[i].TacLac;
                                JsonInterFace.LteCellNeighParameter.Period = JsonInterFace.APATTributesLists[i].Period;
                                JsonInterFace.LteCellNeighParameter.CellID = JsonInterFace.APATTributesLists[i].CellID;

                                JsonInterFace.LteSetWorkModeParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.LteSetWorkModeParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.LteSetWorkModeParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.LteSetWorkModeParameter.SN = JsonInterFace.APATTributesLists[i].SN;
                                JsonInterFace.LteSetWorkModeParameter.FrequencyChioceModeAuto = JsonInterFace.APATTributesLists[i].FrequencyChioceModeAuto;
                                JsonInterFace.LteSetWorkModeParameter.FrequencyChioceModeManul = JsonInterFace.APATTributesLists[i].FrequencyChioceModeManul;
                                JsonInterFace.LteSetWorkModeParameter.RebootModeAuto = JsonInterFace.APATTributesLists[i].RebootModeAuto;
                                JsonInterFace.LteSetWorkModeParameter.RebootModeManul = JsonInterFace.APATTributesLists[i].RebootModeManul;

                                //>>>>>>高级设置<<<<<<
                                JsonInterFace.LteDeviceAdvanceSettingParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.DomainFullPathName = JsonInterFace.APATTributesLists[i].FullName;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.SN = JsonInterFace.APATTributesLists[i].SN;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.FrequencyList = JsonInterFace.APATTributesLists[i].FrequencyList;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.GPSStatusConfig = JsonInterFace.APATTributesLists[i].GPSStatusConfig;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.GPSStatusNoneConfig = JsonInterFace.APATTributesLists[i].GPSStatusNoneConfig;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.FrequencyOffsetList = JsonInterFace.APATTributesLists[i].FrequencyOffsetList;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.NTPServerIP = JsonInterFace.APATTributesLists[i].NTPServerIP;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.NTPLevel = JsonInterFace.APATTributesLists[i].NTPLevel;
                                //JsonInterFace.LteDeviceAdvanceSettingParameter.SyncSourceWithGPS = JsonInterFace.APATTributesLists[i].SyncSourceWithGPS;
                                //JsonInterFace.LteDeviceAdvanceSettingParameter.SyncSourceWithKongKou = JsonInterFace.APATTributesLists[i].SyncSourceWithKongKou;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.AppointNeighNoneConfig = JsonInterFace.APATTributesLists[i].AppointNeighNoneConfig;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.AppointNeighConfig = JsonInterFace.APATTributesLists[i].AppointNeighConfig;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.AppointNeighList = JsonInterFace.APATTributesLists[i].AppointNeighList;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.AppointNeighPci = JsonInterFace.APATTributesLists[i].AppointNeighPci;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.AppointNeighBandWidth = JsonInterFace.APATTributesLists[i].AppointNeighBandWidth;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.FirstPeriodTimeStart = JsonInterFace.APATTributesLists[i].FirstPeriodTimeStart;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.FirstPeriodTimeEnd = JsonInterFace.APATTributesLists[i].FirstPeriodTimeEnd;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.SecondPeriodTimeStart = JsonInterFace.APATTributesLists[i].SecondPeriodTimeStart;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.SecoondPeriodTimeEnd = JsonInterFace.APATTributesLists[i].SecoondPeriodTimeEnd;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.ThreePeriodTimeStart = JsonInterFace.APATTributesLists[i].ThreePeriodTimeStart;
                                JsonInterFace.LteDeviceAdvanceSettingParameter.ThreePeriodTimeEnd = JsonInterFace.APATTributesLists[i].ThreePeriodTimeEnd;

                                //>>>>>>系统设置<<<<<<
                                JsonInterFace.LteDeviceSystemMaintenenceParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.LteDeviceSystemMaintenenceParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.LteDeviceSystemMaintenenceParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.LteDeviceSystemMaintenenceParameter.DomainFullPathName = JsonInterFace.APATTributesLists[i].FullName;

                                JsonInterFace.LteDeviceSystemMaintenenceParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.LteDeviceSystemMaintenenceParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.LteDeviceSystemMaintenenceParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.LteDeviceSystemMaintenenceParameter.SN = JsonInterFace.APATTributesLists[i].SN;

                                JsonInterFace.LteDeviceSystemMaintenenceParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;
                                JsonInterFace.LteDeviceSystemMaintenenceParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.LteDeviceSystemMaintenenceParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;


                                //>>>>>>工程设置<<<<<<
                                JsonInterFace.LteDeviceObjectSettingParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.LteDeviceObjectSettingParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.LteDeviceObjectSettingParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.LteDeviceObjectSettingParameter.DomainFullPathName = JsonInterFace.APATTributesLists[i].FullName;

                                JsonInterFace.LteDeviceObjectSettingParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.LteDeviceObjectSettingParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.LteDeviceObjectSettingParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.LteDeviceObjectSettingParameter.SN = JsonInterFace.APATTributesLists[i].SN;

                                JsonInterFace.LteDeviceObjectSettingParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;
                                JsonInterFace.LteDeviceObjectSettingParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.LteDeviceObjectSettingParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                #endregion
                            }
                            //========================WCDMA更新邦定项========================
                            else if (DeviceType.TD_SCDMA == APATTributesLists[i].DeviceMode)
                            {
                                #region TDS
                                //>>>>>> 设备信息 <<<<<<
                                JsonInterFace.TDSDeviceParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.TDSDeviceParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.TDSDeviceParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.TDSDeviceParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;

                                string FullPathName = string.Empty;
                                string[] DomainFullNameTmp = JsonInterFace.APATTributesLists[i].FullName.Split(new char[] { '.' });
                                for (int k = 0; k < DomainFullNameTmp.Length - 1; k++)
                                {
                                    if (FullPathName == "" || FullPathName == null)
                                    {
                                        FullPathName = DomainFullNameTmp[k];
                                    }
                                    else
                                    {
                                        FullPathName += "." + DomainFullNameTmp[k];
                                    }
                                }
                                JsonInterFace.TDSDeviceParameter.DomainFullPathName = FullPathName;
                                JsonInterFace.TDSDeviceParameter.Station = DomainFullNameTmp[DomainFullNameTmp.Length - 2];
                                JsonInterFace.TDSDeviceParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.TDSDeviceParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                JsonInterFace.TDSDeviceParameter.StaticIPMode = true;               //没有返回值
                                JsonInterFace.TDSDeviceParameter.DynamicIPMode = false;             //没有返回值

                                JsonInterFace.TDSDeviceParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.TDSDeviceParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.TDSDeviceParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.TDSDeviceParameter.SN = JsonInterFace.APATTributesLists[i].SN;
                                JsonInterFace.TDSDeviceParameter.DeviceIdentificationMode = "设备"; //没有返回值                            

                                //>>>>>>小区信息<<<<<<
                                JsonInterFace.TDSCellNeighParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.TDSCellNeighParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.TDSCellNeighParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.TDSCellNeighParameter.DomainFullPathName = JsonInterFace.APATTributesLists[i].FullName;

                                JsonInterFace.TDSCellNeighParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.TDSCellNeighParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.TDSCellNeighParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.TDSCellNeighParameter.SN = JsonInterFace.APATTributesLists[i].SN;

                                JsonInterFace.TDSCellNeighParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;
                                JsonInterFace.TDSCellNeighParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.TDSCellNeighParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                JsonInterFace.TDSCellNeighParameter.PLMN = JsonInterFace.APATTributesLists[i].PLMN;
                                JsonInterFace.TDSCellNeighParameter.Operators = JsonInterFace.OperatorsList.GetOperators(JsonInterFace.APATTributesLists[i].PLMN);
                                JsonInterFace.TDSCellNeighParameter.FrequencyPoint = JsonInterFace.APATTributesLists[i].FrequencyPoint;
                                JsonInterFace.TDSCellNeighParameter.BandWidth = JsonInterFace.APATTributesLists[i].BandWidth;
                                JsonInterFace.TDSCellNeighParameter.PowerAttenuation = JsonInterFace.APATTributesLists[i].PowerAttenuation;
                                JsonInterFace.TDSCellNeighParameter.Scrambler = JsonInterFace.APATTributesLists[i].Scrambler;
                                JsonInterFace.TDSCellNeighParameter.TacLac = JsonInterFace.APATTributesLists[i].TacLac;
                                JsonInterFace.TDSCellNeighParameter.Period = JsonInterFace.APATTributesLists[i].Period;

                                JsonInterFace.TDSSetWorkModeParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.TDSSetWorkModeParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.TDSSetWorkModeParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.TDSSetWorkModeParameter.SN = JsonInterFace.APATTributesLists[i].SN;
                                JsonInterFace.TDSSetWorkModeParameter.FrequencyChioceModeAuto = JsonInterFace.APATTributesLists[i].FrequencyChioceModeAuto;
                                JsonInterFace.TDSSetWorkModeParameter.FrequencyChioceModeManul = JsonInterFace.APATTributesLists[i].FrequencyChioceModeManul;
                                JsonInterFace.TDSSetWorkModeParameter.RebootModeAuto = JsonInterFace.APATTributesLists[i].RebootModeAuto;
                                JsonInterFace.TDSSetWorkModeParameter.RebootModeManul = JsonInterFace.APATTributesLists[i].RebootModeManul;

                                //>>>>>>高级设置<<<<<<
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.DomainFullPathName = JsonInterFace.APATTributesLists[i].FullName;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.SN = JsonInterFace.APATTributesLists[i].SN;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.FrequencyList = JsonInterFace.APATTributesLists[i].FrequencyList;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.GPSStatusConfig = JsonInterFace.APATTributesLists[i].GPSStatusConfig;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.GPSStatusNoneConfig = JsonInterFace.APATTributesLists[i].GPSStatusNoneConfig;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.FrequencyOffsetList = JsonInterFace.APATTributesLists[i].FrequencyOffsetList;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.NTPServerIP = JsonInterFace.APATTributesLists[i].NTPServerIP;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.NTPLevel = JsonInterFace.APATTributesLists[i].NTPLevel;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.SyncSourceWithGPS = JsonInterFace.APATTributesLists[i].SyncSourceWithGPS;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.SyncSourceWithKongKou = JsonInterFace.APATTributesLists[i].SyncSourceWithKongKou;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.AppointNeighNoneConfig = JsonInterFace.APATTributesLists[i].AppointNeighNoneConfig;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.AppointNeighConfig = JsonInterFace.APATTributesLists[i].AppointNeighConfig;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.AppointNeighList = JsonInterFace.APATTributesLists[i].AppointNeighList;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.AppointNeighPci = JsonInterFace.APATTributesLists[i].AppointNeighPci;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.AppointNeighBandWidth = JsonInterFace.APATTributesLists[i].AppointNeighBandWidth;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.FirstPeriodTimeStart = JsonInterFace.APATTributesLists[i].FirstPeriodTimeStart;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.FirstPeriodTimeEnd = JsonInterFace.APATTributesLists[i].FirstPeriodTimeEnd;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.SecondPeriodTimeStart = JsonInterFace.APATTributesLists[i].SecondPeriodTimeStart;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.SecoondPeriodTimeEnd = JsonInterFace.APATTributesLists[i].SecoondPeriodTimeEnd;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.ThreePeriodTimeStart = JsonInterFace.APATTributesLists[i].ThreePeriodTimeStart;
                                JsonInterFace.TDSDeviceAdvanceSettingParameter.ThreePeriodTimeEnd = JsonInterFace.APATTributesLists[i].ThreePeriodTimeEnd;

                                //>>>>>>系统设置<<<<<<
                                JsonInterFace.TDSDeviceSystemMaintenenceParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.TDSDeviceSystemMaintenenceParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.TDSDeviceSystemMaintenenceParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.TDSDeviceSystemMaintenenceParameter.DomainFullPathName = JsonInterFace.APATTributesLists[i].FullName;

                                JsonInterFace.TDSDeviceSystemMaintenenceParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.TDSDeviceSystemMaintenenceParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.TDSDeviceSystemMaintenenceParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.TDSDeviceSystemMaintenenceParameter.SN = JsonInterFace.APATTributesLists[i].SN;

                                JsonInterFace.TDSDeviceSystemMaintenenceParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;
                                JsonInterFace.TDSDeviceSystemMaintenenceParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.TDSDeviceSystemMaintenenceParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;


                                //>>>>>>工程设置<<<<<<
                                JsonInterFace.TDSDeviceObjectSettingParameter.SelfID = JsonInterFace.APATTributesLists[i].SelfID;
                                JsonInterFace.TDSDeviceObjectSettingParameter.ParentID = JsonInterFace.APATTributesLists[i].ParentID;
                                JsonInterFace.TDSDeviceObjectSettingParameter.DeviceName = JsonInterFace.APATTributesLists[i].SelfName;
                                JsonInterFace.TDSDeviceObjectSettingParameter.DomainFullPathName = JsonInterFace.APATTributesLists[i].FullName;

                                JsonInterFace.TDSDeviceObjectSettingParameter.IpAddr = JsonInterFace.APATTributesLists[i].IpAddr;
                                JsonInterFace.TDSDeviceObjectSettingParameter.Port = JsonInterFace.APATTributesLists[i].Port;
                                JsonInterFace.TDSDeviceObjectSettingParameter.NetMask = JsonInterFace.APATTributesLists[i].NetMask;
                                JsonInterFace.TDSDeviceObjectSettingParameter.SN = JsonInterFace.APATTributesLists[i].SN;

                                JsonInterFace.TDSDeviceObjectSettingParameter.OnLine = JsonInterFace.APATTributesLists[i].OnLine;
                                JsonInterFace.TDSDeviceObjectSettingParameter.DeviceMode = JsonInterFace.APATTributesLists[i].Mode;
                                JsonInterFace.TDSDeviceObjectSettingParameter.InnerType = JsonInterFace.APATTributesLists[i].InnerType;
                                #endregion
                            }
                            break;
                        }
                    }
                }

                Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_GettingOtherPLMNListResponse, 0, 0);

                //日志
                JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "获取[" + ParentFullPathName + "." + DevcieName + "]设备通用参数" + ReturnStr, "获取设备通用参数", ReturnStr);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 系统日志
        /// </summary>
        /// <param name="DTime"></param>
        /// <param name="Object"></param>
        /// <param name="Action"></param>
        /// <param name="Other"></param>
        /// <returns></returns>
        public static string GenericSysLogsStruct(string DTime, string Object, string Action, string Other)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> LogsParam = new Dictionary<string, object>();
                LogsParam.Add("DTime", DTime);
                LogsParam.Add("Object", Object);
                LogsParam.Add("Action", Action);
                LogsParam.Add("Other", Other);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                LogsParam.Add("AllNum", LogsParam.Count + 1);

                MsgStruct.Msg_Body_Struct LogsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_update_device_request, LogsParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = LogsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 解析系统日志
        /// </summary>
        /// <param name="DTime"></param>
        /// <param name="Object"></param>
        /// <param name="Action"></param>
        /// <param name="Other"></param>
        public static void AnalysisSysLogsStruct(MsgStruct.InterModuleMsgStruct resultData, ref string DTime, ref string Object, ref string Action, ref string Other)
        {
            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("DTime"))
                {
                    DTime = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("Object"))
                {
                    Object = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("Action"))
                {
                    Action = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("Other"))
                {
                    Other = Item.Value.ToString();
                }
            }
        }

        #region 设备管理相关
        /// <summary>
        /// 设备工作模式
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <param name="WordModeParam"></param>
        /// <returns></returns>
        public static string APSetWorkModeRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, Dictionary<string, string> WordModeParam)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> WorkModeParameter = new Dictionary<string, object>();
                foreach (KeyValuePair<string, string> item in WordModeParam)
                {
                    WorkModeParameter.Add(item.Key, item.Value);
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //CellNeighParam.Add("AllNum", CellNeighParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.set_work_mode, WorkModeParameter);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }
                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }
                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }
                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }
                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 工作模式设置响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APSetWorkModeResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    ResourltFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            ResultMessageList.AppendLine(APResourltErrorType("工作模式设置", Resoult, ResourltFlag, Timestamp));
            JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), APResourltErrorType("工作模式设置", Resoult, ResourltFlag, Timestamp), "工作模式设置", ResourltFlag);
            if (Resoult.Trim().Equals("0"))
            {
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_UpdateCellNeighConfigrationResponse, 0, 0);

                new Thread(() =>
                {
                    ShowMessage(ResultMessageList.ToString(), 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage(ResultMessageList.ToString(), 16);
                }).Start();
            }
        }

        /// <summary>
        /// 小区参数设置请求( TO AP)
        /// </summary>
        /// <param name="APCellNeighConfiguration"></param>
        /// <returns></returns>
        public static string APSetConfigurationRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, Dictionary<string, string> APCellNeighConfiguration)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> CellNeighParam = new Dictionary<string, object>();
                foreach (KeyValuePair<string, string> item in APCellNeighConfiguration)
                {
                    CellNeighParam.Add(item.Key, item.Value);
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //CellNeighParam.Add("AllNum", CellNeighParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.set_configuration, CellNeighParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }
                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }
                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }
                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }
                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 小区参数设置响应
        /// </summary>
        public static void APSetConfigurationResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    ResourltFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            ResultMessageList.AppendLine(APResourltErrorType("小区更新", Resoult, ResourltFlag, Timestamp));
            JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), APResourltErrorType("小区更新", Resoult, ResourltFlag, Timestamp), "小区更新", ResourltFlag);

            if (Resoult.Trim().Equals("0"))
            {
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_UpdateCellNeighConfigrationResponse, 0, 0);

                new Thread(() =>
                {
                    ShowMessage(ResultMessageList.ToString(), 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage(ResultMessageList.ToString(), 16);
                }).Start();
            }
        }

        /// <summary>
        /// 多PLMN设置请求( TO AP)
        /// </summary>
        /// <param name="APCellNeighConfiguration"></param>
        /// <returns></returns>
        public static string APSettingOhterPLMNRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string APPLMNList)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> PlmnsParam = new Dictionary<string, object>();
                PlmnsParam.Add("paramName", "CFG_OTHER_PLMN");
                PlmnsParam.Add("paramValue", APPLMNList);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //CellNeighParam.Add("AllNum", CellNeighParam.Count + 1);

                MsgStruct.Msg_Body_Struct PlmnListsParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.set_parameter_request, PlmnsParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }

                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }

                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }

                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }

                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = PlmnListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 多PLMN设置响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APSettingOhterPLMNResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    ResourltFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            ResultMessageList.AppendLine(APResourltErrorType("多PLMN设置", Resoult, ResourltFlag, Timestamp));
            JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), APResourltErrorType("多PLMN设置", Resoult, ResourltFlag, Timestamp), "多PLMN设置", ResourltFlag);

            if (Resoult.Trim().Equals("0"))
            {
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_UpdateCellNeighConfigrationResponse, 0, 0);

                new Thread(() =>
                {
                    ShowMessage(ResultMessageList.ToString(), 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage(ResultMessageList.ToString(), 16);
                }).Start();
            }
        }

        /// <summary>
        /// 周期频点设置请求( TO AP)
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <param name="APPeriodList"></param>
        /// <returns></returns>
        public static string APSettingPeriodFreqRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string APPeriodList)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> PeriodFreqParam = new Dictionary<string, object>();
                PeriodFreqParam.Add("paramName", "CFG_PERIOD_FREQ");
                PeriodFreqParam.Add("paramValue", APPeriodList);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //CellNeighParam.Add("AllNum", CellNeighParam.Count + 1);

                MsgStruct.Msg_Body_Struct PlmnListsParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.set_parameter_request, PeriodFreqParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }

                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }

                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }

                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }

                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = PlmnListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 周期频点设置响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APSettingPeriodFreqResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    ResourltFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            ResultMessageList.AppendLine(APResourltErrorType("周期频点设置", Resoult, ResourltFlag, Timestamp));
            JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), APResourltErrorType("周期频点设置", Resoult, ResourltFlag, Timestamp), "周期频点设置", ResourltFlag);

            if (Resoult.Trim().Equals("0"))
            {
                new Thread(() =>
                {
                    ShowMessage(ResultMessageList.ToString(), 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage(ResultMessageList.ToString(), 16);
                }).Start();
            }
        }

        /// <summary>
        /// 工程指定参数设置响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APProjectSingleParameterSettingResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    ResourltFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }
            ResultMessageList.Clear();
            ResultMessageList.AppendLine(APResourltErrorType("工程参数设置", Resoult, ResourltFlag, Timestamp));
            if (Resoult.Trim().Equals("0"))
            {
                new Thread(() =>
                {
                    ShowMessage(ResultMessageList.ToString(), 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage(ResultMessageList.ToString(), 16);
                }).Start();
            }
        }

        /// <summary>
        /// 扫频信息设置
        /// </summary>
        /// <param name="frequencyList"></param>
        /// <returns></returns>
        public static string APSetSonEarfcnRequest(string domainFullPathName, string deviceName, string IP, int Port, string InnerType, string SN, string frequencyList)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> frequencyParam = new Dictionary<string, object>();

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //frequencyParam.Add("AllNum", frequencyParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.set_son_earfcn, frequencyParam);

                deviceListsParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();

                if (new Regex(",").Match(frequencyList).Success)
                {
                    string[] FrequencyLists = frequencyList.Split(new char[] { ',' });
                    for (int i = 0; i < FrequencyLists.Length; i++)
                    {
                        MsgStruct.Name_DIC_Struct Item = new MsgStruct.Name_DIC_Struct();
                        Item.dic.Add("earfcn", FrequencyLists[i]);
                        deviceListsParamBody.n_dic.Add(Item);
                    }
                }
                else
                {
                    MsgStruct.Name_DIC_Struct Item = new MsgStruct.Name_DIC_Struct();
                    Item.dic.Add("earfcn", frequencyList);
                    deviceListsParamBody.n_dic.Add(Item);
                }

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = Port;
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 扫频信息设置响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void ApSetSonEarfcnResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    ResourltFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            if (Resoult.Trim().Equals("0"))
            {
                Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_ScannerFrequencyConfigrationResponse, 0, 0);

                new Thread(() =>
                {
                    ShowMessage(APResourltErrorType("扫频配置", Resoult, ResourltFlag, Timestamp), 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage(APResourltErrorType("扫频配置", Resoult, ResourltFlag, Timestamp), 16);
                }).Start();
            }
        }

        /// <summary>
        /// 配置GPS信息
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <param name="Enable"></param>
        /// <param name="FrequencyOffset"></param>
        /// <returns></returns>
        public static string APGPSConfigrationRequest(string domainFullPathName, string deviceName, string IP, int Port, string InnerType, string SN, int Enable, string FrequencyOffset)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GPSParam = new Dictionary<string, object>();
                GPSParam.Add("Enable", Enable.ToString());
                GPSParam.Add("BandOffset", FrequencyOffset);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //GPSParam.Add("AllNum", GPSParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.set_system_request, GPSParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = Port;
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 配置GPS信息响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APGPSConfigrationResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    ResourltFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            if (Resoult.Trim().Equals("0"))
            {
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_GPSConfigrationResponse, 0, 0);

                new Thread(() =>
                {
                    ShowMessage(APResourltErrorType("GPS配置", Resoult, ResourltFlag, Timestamp), 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage(APResourltErrorType("GPS配置", Resoult, ResourltFlag, Timestamp), 16);
                }).Start();
            }
        }

        /// <summary>
        /// NTP信息配置
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <param name="NTPServerIP"></param>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static string NTPConfigrationRequest(string domainFullPathName, string deviceName, string IP, int Port, string InnerType, string SN, string NTPServerIP, string Level)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> NTPParam = new Dictionary<string, object>();
                NTPParam.Add("NTP", NTPServerIP);
                NTPParam.Add("Pri", Level);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //NTPParam.Add("AllNum", NTPParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.set_system_request, NTPParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = Port;
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// NTP信息配置响应
        /// </summary>
        /// <returns></returns>
        public static void NTPConfigrationResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    ResourltFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            if (Resoult.Trim().Equals("0"))
            {
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_NTPConfigrationResponse, 0, 0);

                new Thread(() =>
                {
                    ShowMessage(APResourltErrorType("NTP配置", Resoult, ResourltFlag, Timestamp), 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage(APResourltErrorType("NTP配置", Resoult, ResourltFlag, Timestamp), 16);
                }).Start();
            }
        }

        /// <summary>
        /// 同步源配置
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <param name="NTPServerIP"></param>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static string APSyncinfoSettingRequest(string domainFullPathName, string deviceName, string IP, int Port, string InnerType, string SN, int CNMSyncpriority, int ManualEnable, string ManualEarfcn, string ManualPci, string ManualBw, string ScanEnable)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> SyncSourceParam = new Dictionary<string, object>();
                SyncSourceParam.Add("CNMSyncpriority", CNMSyncpriority);
                SyncSourceParam.Add("ScanEnable", ScanEnable);
                SyncSourceParam.Add("ManualEnable", ManualEnable);
                SyncSourceParam.Add("ManualEarfcn", ManualEarfcn);
                SyncSourceParam.Add("ManualPci", ManualPci);
                SyncSourceParam.Add("ManualBw", ManualBw);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //SyncSourceParam.Add("AllNum", SyncSourceParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.Syncinfo_set, SyncSourceParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = Port;
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 同步源配置响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APSyncinfoSettingResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    ResourltFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            if (Resoult.Trim().Equals("0"))
            {
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_SyncSourceConfigrationResponse, 0, 0);

                new Thread(() =>
                {
                    ShowMessage(APResourltErrorType("同步优先级更新", Resoult, ResourltFlag, Timestamp), 64);
                }).Start();
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage(APResourltErrorType("同步优先级更新", Resoult, ResourltFlag, Timestamp), 16);
                }).Start();
            }
        }

        /// <summary>
        /// 时间段控制信息设置请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <param name="APPeriodTimeList"></param>
        public static string APPeriodTimeConrolRequest(string domainFullPathName, string deviceName, Dictionary<string, string> APPeriodTimeList)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> APPeriodTimeParam = new Dictionary<string, object>();
                APPeriodTimeParam.Add("parentFullPathName", domainFullPathName);
                APPeriodTimeParam.Add("name", deviceName);
                foreach (KeyValuePair<string, string> item in APPeriodTimeList)
                {
                    APPeriodTimeParam.Add(item.Key, item.Value);
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                APPeriodTimeParam.Add("AllNum", APPeriodTimeParam.Count + 1);

                MsgStruct.Msg_Body_Struct APPeriodTimeParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_set_GenPara_ActiveTime_Request, APPeriodTimeParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.ApInfo.Type = string.Empty;
                msgStruct.Body = APPeriodTimeParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 时间段控制信息设置请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <param name="Carry"></param>
        /// <param name="APPeriodTimeList"></param>
        public static string GSMPeriodTimeConrolRequest(string domainFullPathName, string deviceName, string Carry, Dictionary<string, string> APPeriodTimeList)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> APPeriodTimeParam = new Dictionary<string, object>();
                APPeriodTimeParam.Add("parentFullPathName", domainFullPathName);
                APPeriodTimeParam.Add("name", deviceName);
                APPeriodTimeParam.Add("carry", Carry);
                foreach (KeyValuePair<string, string> item in APPeriodTimeList)
                {
                    APPeriodTimeParam.Add(item.Key, item.Value);
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                APPeriodTimeParam.Add("AllNum", APPeriodTimeParam.Count + 1);

                MsgStruct.Msg_Body_Struct APPeriodTimeParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_set_GenPara_ActiveTime_Request, APPeriodTimeParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.ApInfo.Type = string.Empty;
                msgStruct.Body = APPeriodTimeParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 时间段控制信息设置响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APPeriodTimeConrolResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("ReturnCode"))
                {
                    ReturnCode = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("ReturnStr"))
                {
                    ReturnStr = Item.Value.ToString();
                }
            }

            if (ReturnCode.Trim().Equals("0"))
            {
                try
                {
                    if (new Regex(DeviceType.LTE).Match(Parameters.ConfigType).Success)
                    {
                        for (int i = 0; i < JsonInterFace.APATTributesLists.Count; i++)
                        {
                            if (JsonInterFace.APATTributesLists[i].SelfID.Equals(JsonInterFace.LteDeviceAdvanceSettingParameter.SelfID)
                                && JsonInterFace.APATTributesLists[i].ParentID.Equals(JsonInterFace.LteDeviceAdvanceSettingParameter.ParentID))
                            {
                                JsonInterFace.APATTributesLists[i].FirstPeriodTimeStart = JsonInterFace.LteDeviceAdvanceSettingParameter.FirstPeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].FirstPeriodTimeEnd = JsonInterFace.LteDeviceAdvanceSettingParameter.FirstPeriodTimeEnd;
                                JsonInterFace.APATTributesLists[i].SecondPeriodTimeStart = JsonInterFace.LteDeviceAdvanceSettingParameter.SecondPeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].SecoondPeriodTimeEnd = JsonInterFace.LteDeviceAdvanceSettingParameter.SecoondPeriodTimeEnd;
                                JsonInterFace.APATTributesLists[i].ThreePeriodTimeStart = JsonInterFace.LteDeviceAdvanceSettingParameter.ThreePeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].ThreePeriodTimeEnd = JsonInterFace.LteDeviceAdvanceSettingParameter.ThreePeriodTimeEnd;
                                SystemLogsInfo.Input(DateTime.Now.ToString(), DeviceType.LTE + "时间段控制设置", "时间段设置", ReturnStr);
                                break;
                            }
                        }
                    }
                    else if (DeviceType.GSM == Parameters.ConfigType)
                    {
                        for (int i = 0; i < JsonInterFace.APATTributesLists.Count; i++)
                        {
                            if (JsonInterFace.APATTributesLists[i].SelfID.Equals(JsonInterFace.GSMDeviceParameter.SelfID)
                                && JsonInterFace.APATTributesLists[i].ParentID.Equals(JsonInterFace.GSMDeviceParameter.ParentID))
                            {
                                JsonInterFace.APATTributesLists[i].FirstPeriodTimeStart = JsonInterFace.GSMDeviceAdvanceSettingParameter.FirstPeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].FirstPeriodTimeEnd = JsonInterFace.GSMDeviceAdvanceSettingParameter.FirstPeriodTimeEnd;
                                JsonInterFace.APATTributesLists[i].SecondPeriodTimeStart = JsonInterFace.GSMDeviceAdvanceSettingParameter.SecondPeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].SecoondPeriodTimeEnd = JsonInterFace.GSMDeviceAdvanceSettingParameter.SecoondPeriodTimeEnd;
                                JsonInterFace.APATTributesLists[i].ThreePeriodTimeStart = JsonInterFace.GSMDeviceAdvanceSettingParameter.ThreePeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].ThreePeriodTimeEnd = JsonInterFace.GSMDeviceAdvanceSettingParameter.ThreePeriodTimeEnd;
                                SystemLogsInfo.Input(DateTime.Now.ToString(), DeviceType.GSM + "时间段控制设置", "时间段设置", ReturnStr);
                                break;
                            }
                        }
                    }
                    else if (DeviceType.CDMA == Parameters.ConfigType)
                    {
                        for (int i = 0; i < JsonInterFace.APATTributesLists.Count; i++)
                        {
                            if (JsonInterFace.APATTributesLists[i].SelfID.Equals(JsonInterFace.CDMADeviceParameter.SelfID)
                                && JsonInterFace.APATTributesLists[i].ParentID.Equals(JsonInterFace.CDMADeviceParameter.ParentID))
                            {
                                JsonInterFace.APATTributesLists[i].FirstPeriodTimeStart = JsonInterFace.CDMADeviceAdvanceSettingParameter.FirstPeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].FirstPeriodTimeEnd = JsonInterFace.CDMADeviceAdvanceSettingParameter.FirstPeriodTimeEnd;
                                JsonInterFace.APATTributesLists[i].SecondPeriodTimeStart = JsonInterFace.CDMADeviceAdvanceSettingParameter.SecondPeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].SecoondPeriodTimeEnd = JsonInterFace.CDMADeviceAdvanceSettingParameter.SecoondPeriodTimeEnd;
                                JsonInterFace.APATTributesLists[i].ThreePeriodTimeStart = JsonInterFace.CDMADeviceAdvanceSettingParameter.ThreePeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].ThreePeriodTimeEnd = JsonInterFace.CDMADeviceAdvanceSettingParameter.ThreePeriodTimeEnd;
                                SystemLogsInfo.Input(DateTime.Now.ToString(), DeviceType.CDMA + "时间段控制设置", "时间段设置", ReturnStr);
                                break;
                            }
                        }
                    }
                    else if (DeviceType.WCDMA == Parameters.ConfigType)
                    {
                        for (int i = 0; i < JsonInterFace.APATTributesLists.Count; i++)
                        {
                            if (JsonInterFace.APATTributesLists[i].SelfID.Equals(JsonInterFace.WCDMADeviceAdvanceSettingParameter.SelfID)
                                && JsonInterFace.APATTributesLists[i].ParentID.Equals(JsonInterFace.WCDMADeviceAdvanceSettingParameter.ParentID))
                            {
                                JsonInterFace.APATTributesLists[i].FirstPeriodTimeStart = JsonInterFace.WCDMADeviceAdvanceSettingParameter.FirstPeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].FirstPeriodTimeEnd = JsonInterFace.WCDMADeviceAdvanceSettingParameter.FirstPeriodTimeEnd;
                                JsonInterFace.APATTributesLists[i].SecondPeriodTimeStart = JsonInterFace.WCDMADeviceAdvanceSettingParameter.SecondPeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].SecoondPeriodTimeEnd = JsonInterFace.WCDMADeviceAdvanceSettingParameter.SecoondPeriodTimeEnd;
                                JsonInterFace.APATTributesLists[i].ThreePeriodTimeStart = JsonInterFace.WCDMADeviceAdvanceSettingParameter.ThreePeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].ThreePeriodTimeEnd = JsonInterFace.WCDMADeviceAdvanceSettingParameter.ThreePeriodTimeEnd;
                                SystemLogsInfo.Input(DateTime.Now.ToString(), DeviceType.WCDMA + "时间段控制设置", "时间段设置", ReturnStr);
                                break;
                            }
                        }
                    }
                    else if (DeviceType.GSMV2 == Parameters.ConfigType)
                    {
                        for (int i = 0; i < JsonInterFace.APATTributesLists.Count; i++)
                        {
                            if (JsonInterFace.APATTributesLists[i].SelfID.Equals(JsonInterFace.GSMV2DeviceParameter.SelfID)
                                && JsonInterFace.APATTributesLists[i].ParentID.Equals(JsonInterFace.GSMV2DeviceParameter.ParentID))
                            {
                                JsonInterFace.APATTributesLists[i].FirstPeriodTimeStart = JsonInterFace.GSMV2DeviceAdvanceSettingParameter.FirstPeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].FirstPeriodTimeEnd = JsonInterFace.GSMV2DeviceAdvanceSettingParameter.FirstPeriodTimeEnd;
                                JsonInterFace.APATTributesLists[i].SecondPeriodTimeStart = JsonInterFace.GSMV2DeviceAdvanceSettingParameter.SecondPeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].SecoondPeriodTimeEnd = JsonInterFace.GSMV2DeviceAdvanceSettingParameter.SecoondPeriodTimeEnd;
                                JsonInterFace.APATTributesLists[i].ThreePeriodTimeStart = JsonInterFace.GSMV2DeviceAdvanceSettingParameter.ThreePeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].ThreePeriodTimeEnd = JsonInterFace.GSMV2DeviceAdvanceSettingParameter.ThreePeriodTimeEnd;
                                SystemLogsInfo.Input(DateTime.Now.ToString(), DeviceType.GSMV2 + "时间段控制设置", "时间段设置", ReturnStr);
                                break;
                            }
                        }
                    }
                    else if (DeviceType.TD_SCDMA == Parameters.ConfigType)
                    {
                        for (int i = 0; i < JsonInterFace.APATTributesLists.Count; i++)
                        {
                            if (JsonInterFace.APATTributesLists[i].SelfID.Equals(JsonInterFace.TDSDeviceAdvanceSettingParameter.SelfID)
                                && JsonInterFace.APATTributesLists[i].ParentID.Equals(JsonInterFace.TDSDeviceAdvanceSettingParameter.ParentID))
                            {
                                JsonInterFace.APATTributesLists[i].FirstPeriodTimeStart = JsonInterFace.TDSDeviceAdvanceSettingParameter.FirstPeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].FirstPeriodTimeEnd = JsonInterFace.TDSDeviceAdvanceSettingParameter.FirstPeriodTimeEnd;
                                JsonInterFace.APATTributesLists[i].SecondPeriodTimeStart = JsonInterFace.TDSDeviceAdvanceSettingParameter.SecondPeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].SecoondPeriodTimeEnd = JsonInterFace.TDSDeviceAdvanceSettingParameter.SecoondPeriodTimeEnd;
                                JsonInterFace.APATTributesLists[i].ThreePeriodTimeStart = JsonInterFace.TDSDeviceAdvanceSettingParameter.ThreePeriodTimeStart;
                                JsonInterFace.APATTributesLists[i].ThreePeriodTimeEnd = JsonInterFace.TDSDeviceAdvanceSettingParameter.ThreePeriodTimeEnd;
                                SystemLogsInfo.Input(DateTime.Now.ToString(), DeviceType.TD_SCDMA + "时间段控制设置", "时间段设置", ReturnStr);
                                break;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
                }

                new Thread(() =>
                {
                    ShowMessage("时间段更新" + ReturnStr, 64);
                }).Start();
            }
            else
            {
                if (new Regex(DeviceType.LTE).Match(Parameters.ConfigType).Success)
                {
                    SystemLogsInfo.Input(DateTime.Now.ToString(), DeviceType.LTE + "时间段控制设置", "时间段设置", ReturnStr);
                }
                else if (DeviceType.GSM == Parameters.ConfigType)
                {
                    SystemLogsInfo.Input(DateTime.Now.ToString(), DeviceType.GSM + "时间段控制设置", "时间段设置", ReturnStr);
                }
                else if (DeviceType.CDMA == Parameters.ConfigType)
                {
                    SystemLogsInfo.Input(DateTime.Now.ToString(), DeviceType.CDMA + "时间段控制设置", "时间段设置", ReturnStr);
                }
                else if (DeviceType.WCDMA == Parameters.ConfigType)
                {
                    SystemLogsInfo.Input(DateTime.Now.ToString(), DeviceType.WCDMA + "时间段控制设置", "时间段设置", ReturnStr);
                }
                else if (DeviceType.GSMV2 == Parameters.ConfigType)
                {
                    SystemLogsInfo.Input(DateTime.Now.ToString(), DeviceType.GSMV2 + "时间段控制设置", "时间段设置", ReturnStr);
                }
                else if (DeviceType.TD_SCDMA == Parameters.ConfigType)
                {
                    SystemLogsInfo.Input(DateTime.Now.ToString(), DeviceType.TD_SCDMA + "时间段控制设置", "时间段设置", ReturnStr);
                }

                new Thread(() =>
                {
                    ShowMessage("时间段更新" + ReturnStr, 16);
                }).Start();
            }
        }

        /// <summary>
        /// CDMA小区参数设置请求( TO AP)
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <param name="APCellNeighConfiguration"></param>
        /// <returns></returns>
        public static string CDMAConfigurationFAPRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, Dictionary<string, string> APCellNeighConfiguration)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> CDMACellNeighParam = new Dictionary<string, object>();
                CDMACellNeighParam.Add("sys", "0");

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //CellNeighParam.Add("AllNum", CellNeighParam.Count + 1);

                MsgStruct.Msg_Body_Struct CDMACellNeighParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, CDMACellNeighParam);
                CDMACellNeighParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct n_dic = new MsgStruct.Name_DIC_Struct();
                n_dic.name = CDMAMsgType.CONFIG_FAP_MSG.ToString();
                foreach (KeyValuePair<string, string> item in APCellNeighConfiguration)
                {
                    n_dic.dic.Add(item.Key, item.Value);
                }
                CDMACellNeighParamBody.n_dic.Add(n_dic);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }
                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }
                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }

                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }

                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = CDMACellNeighParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// CDMA邻小区信息查询请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string CDMANeighCellInfoQueryRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> CDMACellInfoQueryParam = new Dictionary<string, object>();
                CDMACellInfoQueryParam.Add("sys", "0");

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //CellNeighParam.Add("AllNum", CellNeighParam.Count + 1);

                MsgStruct.Msg_Body_Struct CDMACellInfoQueryParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, CDMACellInfoQueryParam);
                CDMACellInfoQueryParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct n_dic = new MsgStruct.Name_DIC_Struct();
                n_dic.name = "QUERY_NB_CELL_INFO_MSG";
                CDMACellInfoQueryParamBody.n_dic.Add(n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();

                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }

                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }

                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }
                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }
                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = CDMACellInfoQueryParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// AP系统升级请求
        /// </summary>
        /// <param name="FileName"></param>
        /// <param name="FileMD5"></param>
        /// <param name="DeviceList"></param>
        /// <returns></returns>
        public static string APUpgradeSystemRequest(string FileName, string FileVertion, string FileMD5, string ApAddr, string SN, string InnerType, int Port, string DomainFullPathName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> UpgradeSystemParam = new Dictionary<string, object>();
                UpgradeSystemParam.Add("md5", FileMD5);
                UpgradeSystemParam.Add("fileName", FileName);
                UpgradeSystemParam.Add("version", FileVertion);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //UpgradeSystemParam.Add("AllNum", UpgradeSystemParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_ftp_oper_request, UpgradeSystemParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = ApAddr;
                msgStruct.ApInfo.Port = Port;
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = DomainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);

                //打印请求升级信息
                StringBuilder UpdateRequestMsg = new StringBuilder();
                UpdateRequestMsg.AppendLine("------------ 系统升级请求 [" + DateTime.Now.ToString() + "]------------");
                UpdateRequestMsg.AppendLine("File MD5:" + FileMD5);
                UpdateRequestMsg.AppendLine("File Name:" + FileName);
                UpdateRequestMsg.AppendLine("File Version:" + FileVertion);
                UpdateRequestMsg.AppendLine("SN:" + SN);
                UpdateRequestMsg.AppendLine("Ap Name:" + DomainFullPathName);
                UpdateRequestMsg.AppendLine("IP:" + ApAddr);
                UpdateRequestMsg.AppendLine("Port:" + Port.ToString());
                UpdateRequestMsg.AppendLine("---------------------------------------------------------------------");
                IntPtr UpdateRequestMsgHandle = Marshal.StringToBSTR(UpdateRequestMsg.ToString());
                Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_AP_SytemUpgrade_MESSAGE, 0, (int)UpdateRequestMsgHandle);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// AP系统升级请求响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APUpgradeSystemResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key == ("ReturnCode"))
                {
                    ReturnCode = Item.Value.ToString();
                }
                else if (Item.Key == ("ReturnStr"))
                {
                    ReturnStr = Item.Value.ToString();
                }
                if (ReturnCode != ("") && ReturnStr != ("")) { break; }
            }

            if (ReturnCode == ("0"))
            {
                try
                {
                    foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                    {
                        if (Item.Key.Trim().Equals("ftpUsrName"))
                        {
                            FTPServerConnection.FTPUserName = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpPwd"))
                        {
                            FTPServerConnection.FTPPassWord = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpRootDir"))
                        {
                            FTPServerConnection.FTPRootDir = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpServerIp"))
                        {
                            FTPServerConnection.FTPAddr = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpPort"))
                        {
                            FTPServerConnection.FTPPort = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("needToUpdate"))
                        {
                            FTPServerConnection.UploadFileStatus = Item.Value.ToString();
                        }
                    }

                    //打印请求升级响应信息
                    StringBuilder UpdateRequestMsg = new StringBuilder();
                    UpdateRequestMsg.AppendLine("------------ AP系统升级请求响应信息 [" + DateTime.Now.ToString() + "]------------");
                    UpdateRequestMsg.AppendLine("ReturnCode:" + ReturnCode);
                    UpdateRequestMsg.AppendLine("ReturnStr:" + ((ReturnStr == "") ? ("无") : (ReturnStr)));
                    UpdateRequestMsg.AppendLine("FTPUserName:" + FTPServerConnection.FTPUserName);
                    UpdateRequestMsg.AppendLine("FTPPassWord:" + "********");
                    UpdateRequestMsg.AppendLine("FTPRootDir:" + FTPServerConnection.FTPRootDir);
                    UpdateRequestMsg.AppendLine("FtpServerIp:" + FTPServerConnection.FTPAddr);
                    UpdateRequestMsg.AppendLine("FTPServerPort:" + FTPServerConnection.FTPPort);
                    UpdateRequestMsg.AppendLine("NeedToUpdate:" + ((FTPServerConnection.UploadFileStatus == "0") ? ("不需要上传升级包(" + FTPServerConnection.UploadFileStatus + ")") : ("需要上传升级包(" + FTPServerConnection.UploadFileStatus + ")")));
                    UpdateRequestMsg.AppendLine("---------------------------------------------------------------------");
                    IntPtr UpdateRequestMsgHandle = Marshal.StringToBSTR(UpdateRequestMsg.ToString());
                    Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_UpgradeAPSystemResponse, 0, (int)UpdateRequestMsgHandle);
                }
                catch (Exception Ex)
                {
                    Parameters.PrintfLogsExtended("系统升级响应解析异常", Ex.Message, Ex.StackTrace);
                }
            }
            else
            {
                new Thread(() =>
                {
                    ShowMessage("执行系统升级" + ReturnStr, 16);
                }).Start();
            }
        }

        /// <summary>
        /// 上传升级包完成通知报务器
        /// </summary>
        /// <returns></returns>
        public static string UploadFinishedAckServerRequest(string canUpdateFlag, string FileName, List<string> DeviceList)
        {
            string jsonStr = string.Empty;
            int number = 1;
            try
            {
                Dictionary<string, object> UploadFinishedParam = new Dictionary<string, object>();
                UploadFinishedParam.Add("canUpdateFlag", canUpdateFlag);
                UploadFinishedParam.Add("fileName", FileName);
                UploadFinishedParam.Add("deviceCnt", DeviceList.Count);
                foreach (string item in DeviceList)
                {
                    string deviceLable = "device" + number.ToString();
                    UploadFinishedParam.Add(deviceLable, item);
                    number++;
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //UploadFinishedParam.Add("AllNum", UploadFinishedParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_ftp_update_request, UploadFinishedParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// AP升级完成响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APUpgradeSystemFinishedResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Rebootflag = string.Empty;
            string Result = string.Empty;
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string Timestamp = string.Empty;
            StringBuilder UpdateRequestMsg = new StringBuilder();
            string SN = string.Empty;
            string FullName = string.Empty;
            string IP = string.Empty;
            string Port = string.Empty;
            string SelfType = string.Empty;

            try
            {
                SN = resultData.ApInfo.SN;
                FullName = resultData.ApInfo.Fullname;
                IP = resultData.ApInfo.IP;
                Port = resultData.ApInfo.Port.ToString();
                SelfType = resultData.ApInfo.Type;

                JsonInterFace.ProgressBarInfo.StepValue = JsonInterFace.ProgressBarInfo.MaxValue;

                //升级过程完成
                ProgressBarInfo.RunProgressBar = false;

                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key == "rebootflag")
                    {
                        Rebootflag = Item.Value.ToString();
                    }
                    else if (Item.Key == "result")
                    {
                        Result = Item.Value.ToString();
                    }
                    else if (Item.Key == ("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key == ("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key == ("timestamp"))
                    {
                        Timestamp = Item.Value.ToString();
                    }
                }


                if (Result == string.Empty && ReturnCode != string.Empty)
                {
                    UpdateRequestMsg.Clear();
                    UpdateRequestMsg.AppendLine("------------ AP系统升级结束 [" + DateTime.Now.ToString() + "] -----------");
                    UpdateRequestMsg.AppendLine("SN：" + SN);
                    UpdateRequestMsg.AppendLine("设备名称：" + FullName);
                    UpdateRequestMsg.AppendLine("升级结果：(" + ReturnCode + ")" + " ------ [" + (ReturnCode == "0" ? "成功" : "失败") + "]");
                    UpdateRequestMsg.AppendLine("服务器消息：(" + (ReturnStr == "" ? "无" : ReturnStr) + ")");
                    UpdateRequestMsg.AppendLine("-----------------------------------------------------------------------");
                    JsonInterFace.ProgressBarInfo.ResoultMessage += (UpdateRequestMsg.ToString());

                    new Thread(() =>
                    {
                        if (ReturnCode == "0")
                        {
                            if (Parameters.DeviceManageWinHandle != IntPtr.Zero)
                            {
                                MessageBox.Show("设备[" + FullName + "]系统升级成功！", "提示", MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                            else
                            {
                                SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + FullName + "]系统升级成功！", "系统升级", "成功");
                            }
                        }
                        else
                        {
                            if (Parameters.DeviceManageWinHandle != IntPtr.Zero)
                            {
                                MessageBox.Show("设备[" + FullName + "]系统升级失败," + (ReturnStr == "" ? "无" : ReturnStr), "提示", MessageBoxButton.OK, MessageBoxImage.Error);
                            }
                            else
                            {
                                SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + FullName + "]系统升级失败！", "系统升级", "失败");
                            }
                        }

                        JsonInterFace.ProgressBarInfo.StepValue = 0;
                        JsonInterFace.ProgressBarInfo.ProgressBarShow = Visibility.Collapsed;
                        JsonInterFace.ProgressBarInfo.UpdateStart = true;
                        //倒记时
                        JsonInterFace.ProgressBarInfo.UpgradeTimer.Stop();
                        JsonInterFace.ProgressBarInfo.UpgradeTimed = "00:00:00";

                    }).Start();
                }
                else
                {
                    UpdateRequestMsg.Clear();
                    UpdateRequestMsg.AppendLine("------------ AP系统升级结束 [" + DateTime.Now.ToString() + "] -----------");
                    UpdateRequestMsg.AppendLine("SN：" + SN);
                    UpdateRequestMsg.AppendLine("设备名称：" + FullName);
                    UpdateRequestMsg.AppendLine("IP：" + IP);
                    UpdateRequestMsg.AppendLine("Port：" + Port);
                    UpdateRequestMsg.AppendLine("Type：" + SelfType);
                    UpdateRequestMsg.AppendLine("升级结果：(" + Result + ")" + " ------ [" + (Result == "0" ? "成功" : "失败") + "]");
                    UpdateRequestMsg.AppendLine("需要重启：(" + (Rebootflag == "0" ? "不需要重启" : Rebootflag == "1" ? "立即重启" : "需要重启") + ")");
                    UpdateRequestMsg.AppendLine("-----------------------------------------------------------------------");
                    JsonInterFace.ProgressBarInfo.ResoultMessage += (UpdateRequestMsg.ToString());

                    new Thread(() =>
                    {
                        if (Result == "0")
                        {
                            if (Parameters.DeviceManageWinHandle != IntPtr.Zero)
                            {
                                MessageBox.Show("设备[" + FullName + "]系统升级成功！", "提示", MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                            else
                            {
                                SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + FullName + "]系统升级成功！", "系统升级", "成功");
                            }
                        }
                        else
                        {
                            if (Parameters.DeviceManageWinHandle != IntPtr.Zero)
                            {
                                MessageBox.Show("设备[" + FullName + "]系统升级失败," + (ReturnStr == "" ? "无" : ReturnStr), "提示", MessageBoxButton.OK, MessageBoxImage.Error);
                            }
                            else
                            {
                                SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + FullName + "]系统升级失败！", "系统升级", "失败");
                            }
                        }

                        JsonInterFace.ProgressBarInfo.StepValue = 0;
                        JsonInterFace.ProgressBarInfo.ProgressBarShow = Visibility.Collapsed;
                        JsonInterFace.ProgressBarInfo.UpdateStart = true;
                        //倒记时
                        JsonInterFace.ProgressBarInfo.UpgradeTimer.Stop();
                        JsonInterFace.ProgressBarInfo.UpgradeTimed = "00:00:00";
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("AP升级结束(解析)", ex.Message, ex.StackTrace);
            }
        }

        #endregion

        #region 特殊名单管理
        /// <summary>
        /// 黑名单查询请求
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="DeviceFullPathName"></param>
        /// <param name="DomainFullPathName"></param>
        /// <returns></returns>
        public static string APBlackListRequest(string Type, string DeviceFullPathName, string DomainFullPathName, string UserType, string IMSI, string IMEI, string Res, string timeStart, string timeEnded)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> BlackListParam = new Dictionary<string, object>();
                BlackListParam.Add("bwListApplyTo", Type);
                if (DeviceFullPathName != null && DeviceFullPathName != "")
                {
                    BlackListParam.Add("deviceFullPathName", DeviceFullPathName);
                }
                else
                {
                    BlackListParam.Add("deviceFullPathName", "");
                }

                if (DomainFullPathName != null && DomainFullPathName != "")
                {
                    BlackListParam.Add("domainFullPathName", DomainFullPathName);
                }
                else
                {
                    BlackListParam.Add("domainFullPathName", "");
                }

                if (IMSI != "" && IMSI != null)
                {
                    BlackListParam.Add("imsi", IMSI);
                }
                else
                {
                    BlackListParam.Add("imsi", "");
                }
                if (IMEI != "" && IMEI != null)
                {
                    BlackListParam.Add("imei", IMEI);
                }
                else
                {
                    BlackListParam.Add("imei", "");
                }
                if (Res != "" && Res != null)
                {
                    BlackListParam.Add("des", Res);
                }
                else
                {
                    BlackListParam.Add("des", "");
                }
                if (UserType != "" && UserType != null)
                {
                    BlackListParam.Add("bwFlag", UserType);
                }
                else
                {
                    BlackListParam.Add("bwFlag", "");
                }
                if (timeStart != "" && timeStart != null)
                {
                    BlackListParam.Add("timeStart", timeStart);
                }
                else
                {
                    BlackListParam.Add("timeStart", "");
                }
                if (timeEnded != "" && timeEnded != null)
                {
                    BlackListParam.Add("timeEnded", timeEnded);
                }
                else
                {
                    BlackListParam.Add("timeEnded", "");
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                BlackListParam.Add("AllNum", BlackListParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_bwlist_request, BlackListParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 黑名单查询响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APBlackListResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            string domainId = string.Empty;
            string domainParentId = string.Empty;
            string parentFullPathName = string.Empty;
            string name = string.Empty;
            string imsi = string.Empty;
            string imei = string.Empty;
            string bwFlag = string.Empty;
            string rbStart = string.Empty;
            string rbEnd = string.Empty;
            string time = string.Empty;
            string des = string.Empty;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("TotalRecords"))
                    {
                        BlackList.TotalRecords = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("CurPageIndex"))
                    {
                        BlackList.CurPageIndex = Item.Value.ToString();
                        BlackList.CurPageFirstIndexCaption = BlackList.CurPageIndex.Split(new char[] { ':' })[0];
                        BlackList.CurPageIndexCaption = "/" + BlackList.CurPageIndex.Split(new char[] { ':' })[1] + "页";
                    }
                    else if (Item.Key.Trim().Equals("PageSize"))
                    {
                        BlackList.PageSize = Item.Value.ToString();
                    }
                }

                //成功
                if (ReturnCode.Trim().Equals("0"))
                {
                    foreach (MsgStruct.Name_DIC_Struct recorde in resultData.Body.n_dic)
                    {
                        foreach (KeyValuePair<string, object> item in recorde.dic)
                        {
                            if (item.Key.Trim().Equals("domainId"))
                            {
                                domainId = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("domainParentId"))
                            {
                                domainParentId = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("parentFullPathName"))
                            {
                                parentFullPathName = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("name"))
                            {
                                name = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("imsi"))
                            {
                                imsi = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("imei"))
                            {
                                imei = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("bwFlag"))
                            {
                                bwFlag = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("rbStart"))
                            {
                                rbStart = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("rbEnd"))
                            {
                                rbEnd = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("time"))
                            {
                                time = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("des"))
                            {
                                des = item.Value.ToString();
                            }
                        }

                        BlackList.BlackListInput(imsi, imei, des, rbStart + "-" + rbEnd, name);
                    }

                    if (new Regex("0").Match(BlackList.CurPageIndexCaption.Split(new char[] { '/' })[1]).Success)
                    {
                        Parameters.SendMessage(Parameters.SpeciallistWinHandle, Parameters.WM_BlackListQueryResponse, 0, 0);

                        new Thread(() =>
                        {
                            ShowMessage("黑名单内容为空！", 48);
                        }).Start();
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("解析黑名单数据：", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 自定义名单查询请求
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="DeviceFullPathName"></param>
        /// <param name="DomainFullPathName"></param>
        /// <param name="UserType"></param>
        /// <param name="IMSI"></param>
        /// <param name="IMEI"></param>
        /// <param name="Res"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnded"></param>
        /// <returns></returns>
        public static string APCustomListRequest(string Type, string DeviceFullPathName, string DomainFullPathName, string UserType, string IMSI, string IMEI, string Res, string timeStart, string timeEnded)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> CustomListParam = new Dictionary<string, object>();
                CustomListParam.Add("bwListApplyTo", Type);
                if (DeviceFullPathName != null && DeviceFullPathName != "")
                {
                    CustomListParam.Add("deviceFullPathName", DeviceFullPathName);
                }
                else
                {
                    CustomListParam.Add("deviceFullPathName", "");
                }

                if (DomainFullPathName != null && DomainFullPathName != "")
                {
                    CustomListParam.Add("domainFullPathName", DomainFullPathName);
                }
                else
                {
                    CustomListParam.Add("domainFullPathName", "");
                }

                if (IMSI != "" && IMSI != null)
                {
                    CustomListParam.Add("imsi", IMSI);
                }
                else
                {
                    CustomListParam.Add("imsi", "");
                }
                if (IMEI != "" && IMEI != null)
                {
                    CustomListParam.Add("imei", IMEI);
                }
                else
                {
                    CustomListParam.Add("imei", "");
                }
                if (Res != "" && Res != null)
                {
                    CustomListParam.Add("des", Res);
                }
                else
                {
                    CustomListParam.Add("des", "");
                }
                if (UserType != "" && UserType != null)
                {
                    CustomListParam.Add("bwFlag", UserType);
                }
                else
                {
                    CustomListParam.Add("bwFlag", "");
                }
                if (timeStart != "" && timeStart != null)
                {
                    CustomListParam.Add("timeStart", timeStart);
                }
                else
                {
                    CustomListParam.Add("timeStart", "");
                }
                if (timeEnded != "" && timeEnded != null)
                {
                    CustomListParam.Add("timeEnded", timeEnded);
                }
                else
                {
                    CustomListParam.Add("timeEnded", "");
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                CustomListParam.Add("AllNum", CustomListParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_bwlist_request, CustomListParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 自定义单查询响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APCustomListResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            string domainId = string.Empty;
            string domainParentId = string.Empty;
            string parentFullPathName = string.Empty;
            string name = string.Empty;
            string imsi = string.Empty;
            string imei = string.Empty;
            string bwFlag = string.Empty;
            string rbStart = string.Empty;
            string rbEnd = string.Empty;
            string time = string.Empty;
            string des = string.Empty;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("TotalRecords"))
                    {
                        CustomList.TotalRecords = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("CurPageIndex"))
                    {
                        CustomList.CurPageIndex = Item.Value.ToString();
                        CustomList.CurPageFirstIndexCaption = CustomList.CurPageIndex.Split(new char[] { ':' })[0];
                        CustomList.CurPageIndexCaption = "/" + CustomList.CurPageIndex.Split(new char[] { ':' })[1] + "页";
                    }
                    else if (Item.Key.Trim().Equals("PageSize"))
                    {
                        CustomList.PageSize = Item.Value.ToString();
                    }
                }

                //成功
                if (ReturnCode.Trim().Equals("0"))
                {
                    foreach (MsgStruct.Name_DIC_Struct recorde in resultData.Body.n_dic)
                    {
                        foreach (KeyValuePair<string, object> item in recorde.dic)
                        {
                            if (item.Key.Trim().Equals("domainId"))
                            {
                                domainId = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("domainParentId"))
                            {
                                domainParentId = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("parentFullPathName"))
                            {
                                parentFullPathName = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("name"))
                            {
                                name = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("imsi"))
                            {
                                imsi = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("imei"))
                            {
                                imei = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("bwFlag"))
                            {
                                bwFlag = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("rbStart"))
                            {
                                rbStart = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("rbEnd"))
                            {
                                rbEnd = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("time"))
                            {
                                time = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("des"))
                            {
                                des = item.Value.ToString();
                            }
                        }

                        CustomList.CustomListInput(imsi, imei, des, rbStart + "-" + rbEnd, name);
                    }

                    if (new Regex("0").Match(CustomList.CurPageIndexCaption.Split(new char[] { '/' })[1]).Success)
                    {
                        Parameters.SendMessage(Parameters.SpeciallistWinHandle, Parameters.WM_CustomListQueryResponse, 0, 0);
                        new Thread(() =>
                        {
                            ShowMessage("普通用户内容为空！", 48);
                        }).Start();
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("自定义名单查询", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 白名单查询请求
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="DeviceFullPathName"></param>
        /// <param name="DomainFullPathName"></param>
        /// <returns></returns>
        public static string APWhiteListRequest(string Type, string DeviceFullPathName, string DomainFullPathName, string UserType, string IMSI, string IMEI, string Res, string timeStart, string timeEnded)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> WhiteListParam = new Dictionary<string, object>();
                WhiteListParam.Add("bwListApplyTo", Type);
                if (DeviceFullPathName != null && DeviceFullPathName != "")
                {
                    WhiteListParam.Add("deviceFullPathName", DeviceFullPathName);
                }
                else
                {
                    WhiteListParam.Add("deviceFullPathName", "");
                }

                if (DomainFullPathName != null && DomainFullPathName != "")
                {
                    WhiteListParam.Add("domainFullPathName", DomainFullPathName);
                }
                else
                {
                    WhiteListParam.Add("domainFullPathName", "");
                }

                if (IMSI != "" && IMSI != null)
                {
                    WhiteListParam.Add("imsi", IMSI);
                }
                else
                {
                    WhiteListParam.Add("imsi", "");
                }
                if (IMEI != "" && IMEI != null)
                {
                    WhiteListParam.Add("imei", IMEI);
                }
                else
                {
                    WhiteListParam.Add("imei", "");
                }
                if (Res != "" && Res != null)
                {
                    WhiteListParam.Add("des", Res);
                }
                else
                {
                    WhiteListParam.Add("des", "");
                }
                if (UserType != "" && UserType != null)
                {
                    WhiteListParam.Add("bwFlag", UserType);
                }
                else
                {
                    WhiteListParam.Add("bwFlag", "");
                }
                if (timeStart != "" && timeStart != null)
                {
                    WhiteListParam.Add("timeStart", timeStart);
                }
                else
                {
                    WhiteListParam.Add("timeStart", "");
                }
                if (timeEnded != "" && timeEnded != null)
                {
                    WhiteListParam.Add("timeEnded", timeEnded);
                }
                else
                {
                    WhiteListParam.Add("timeEnded", "");
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                WhiteListParam.Add("AllNum", WhiteListParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_bwlist_request, WhiteListParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 白名单查询查响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APWhiteListResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            string domainId = string.Empty;
            string domainParentId = string.Empty;
            string parentFullPathName = string.Empty;
            string name = string.Empty;
            string imsi = string.Empty;
            string imei = string.Empty;
            string bwFlag = string.Empty;
            string rbStart = string.Empty;
            string rbEnd = string.Empty;
            string time = string.Empty;
            string des = string.Empty;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("TotalRecords"))
                    {
                        WhiteList.TotalRecords = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("CurPageIndex"))
                    {
                        WhiteList.CurPageIndex = Item.Value.ToString();
                        WhiteList.CurPageFirstIndexCaption = WhiteList.CurPageIndex.Split(new char[] { ':' })[0];
                        WhiteList.CurPageIndexCaption = "/" + WhiteList.CurPageIndex.Split(new char[] { ':' })[1] + "页";
                    }
                    else if (Item.Key.Trim().Equals("PageSize"))
                    {
                        WhiteList.PageSize = Item.Value.ToString();
                    }
                }

                //成功
                if (ReturnCode.Trim().Equals("0"))
                {
                    foreach (MsgStruct.Name_DIC_Struct recorde in resultData.Body.n_dic)
                    {
                        foreach (KeyValuePair<string, object> item in recorde.dic)
                        {
                            if (item.Key.Trim().Equals("domainId"))
                            {
                                domainId = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("domainParentId"))
                            {
                                domainParentId = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("parentFullPathName"))
                            {
                                parentFullPathName = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("name"))
                            {
                                name = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("imsi"))
                            {
                                imsi = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("imei"))
                            {
                                imei = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("bwFlag"))
                            {
                                bwFlag = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("rbStart"))
                            {
                                rbStart = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("rbEnd"))
                            {
                                rbEnd = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("time"))
                            {
                                time = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("des"))
                            {
                                des = item.Value.ToString();
                            }
                        }
                        WhiteList.WhiteListInput(imsi, imei, des, name);
                    }

                    if (new Regex("0").Match(WhiteList.CurPageIndexCaption.Split(new char[] { '/' })[1]).Success)
                    {
                        Parameters.SendMessage(Parameters.SpeciallistWinHandle, Parameters.WM_WhiteListQueryResponse, 0, 0);

                        new Thread(() =>
                        {
                            ShowMessage("白名单内容为空！", 48);
                        }).Start();
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("解析白名单数据：", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 黑白名单,普通用户 上下页 请求
        /// </summary>
        /// <param name="PageIndex"></param>
        /// <returns></returns>
        public static string APBWListDataPageRequest(string PageIndex)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> BWListBackPageParam = new Dictionary<string, object>();
                BWListBackPageParam.Add("CurPageIndex", PageIndex);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                BWListBackPageParam.Add("AllNum", BWListBackPageParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_all_next_page_bwlist_request, BWListBackPageParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 添加黑白名单,普通用户请求
        /// </summary>
        /// <returns></returns>
        public static string APBWListDataAddRequest(string Type, string DeviceFullPathName, string DomainFullPathName, List<Dictionary<string, string>> BWListParaList)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> BlackListParam = new Dictionary<string, object>();
                BlackListParam.Add("bwListApplyTo", Type);
                if (DeviceFullPathName != null)
                {
                    BlackListParam.Add("deviceFullPathName", DeviceFullPathName);
                }
                if (DomainFullPathName != null)
                {
                    BlackListParam.Add("domainFullPathName", DomainFullPathName);
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                BlackListParam.Add("AllNum", BlackListParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_add_bwlist_request, BlackListParam);

                deviceListsParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();

                foreach (Dictionary<string, string> BWListPara in BWListParaList)
                {
                    MsgStruct.Name_DIC_Struct Para = new MsgStruct.Name_DIC_Struct();
                    foreach (KeyValuePair<string, string> item in BWListPara)
                    {
                        if (!item.Value.Trim().Equals(""))
                        {
                            Para.name = string.Empty;
                            Para.dic.Add(item.Key, item.Value);
                        }
                    }
                    deviceListsParamBody.n_dic.Add(Para);
                }

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 添加黑名单响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APBlackListDataAddResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string result = string.Empty;
            string rebootflag = string.Empty;
            string Timestamp = string.Empty;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("result"))
                    {
                        result = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("rebootflag"))
                    {
                        rebootflag = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("timestamp"))
                    {
                        Timestamp = Item.Value.ToString();
                    }
                }

                JsonInterFace.ActionResultStatus.ResoultStatus = result;
                lock (JsonInterFace.ActionResultStatus.FinishedLock)
                {
                    JsonInterFace.ActionResultStatus.Finished = true;
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("添加黑名单响应处理异常", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 添加白名单响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APWhiteListDataAddResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string result = string.Empty;
            string rebootflag = string.Empty;
            string Timestamp = string.Empty;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("result"))
                    {
                        result = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("rebootflag"))
                    {
                        rebootflag = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("timestamp"))
                    {
                        Timestamp = Item.Value.ToString();
                    }
                }

                JsonInterFace.ActionResultStatus.ResoultStatus = result;
                lock (JsonInterFace.ActionResultStatus.FinishedLock)
                {
                    JsonInterFace.ActionResultStatus.Finished = true;
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("添加白名单响应处理异常", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 添加普通用户响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APCustomListDataAddResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string result = string.Empty;
            string rebootflag = string.Empty;
            string Timestamp = string.Empty;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("result"))
                    {
                        result = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("rebootflag"))
                    {
                        rebootflag = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("timestamp"))
                    {
                        Timestamp = Item.Value.ToString();
                    }
                }

                JsonInterFace.ActionResultStatus.ResoultStatus = result;
                lock (JsonInterFace.ActionResultStatus.FinishedLock)
                {
                    JsonInterFace.ActionResultStatus.Finished = true;
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("添加普通用户响应处理异常", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 黑名单删除请求
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="DeviceFullPathName"></param>
        /// <param name="DomainFullPathName"></param>
        /// <param name="imsi"></param>
        /// <param name="imei"></param>
        /// <param name="bwFlag"></param>
        /// <returns></returns>
        public static string APBlackListDataDeleteRequest(string Type, string DeviceFullPathName, string DomainFullPathName, List<Dictionary<string, string>> WhiteLists)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> BlackListParam = new Dictionary<string, object>();
                BlackListParam.Add("bwListApplyTo", Type);
                if (DeviceFullPathName != null)
                {
                    BlackListParam.Add("deviceFullPathName", DeviceFullPathName);
                }
                if (DomainFullPathName != null)
                {
                    BlackListParam.Add("domainFullPathName", DomainFullPathName);
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                BlackListParam.Add("AllNum", BlackListParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_bwlist_request, BlackListParam);

                deviceListsParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();

                foreach (Dictionary<string, string> Item in WhiteLists)
                {
                    MsgStruct.Name_DIC_Struct Para = new MsgStruct.Name_DIC_Struct();
                    foreach (KeyValuePair<string, string> SubItem in Item)
                    {
                        if (SubItem.Value != "" && SubItem.Value != null)
                        {
                            Para.name = string.Empty;
                            Para.dic.Add(SubItem.Key, SubItem.Value);
                        }
                    }
                    Para.dic.Add("bwFlag", "black");
                    deviceListsParamBody.n_dic.Add(Para);
                }

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 黑名单删除响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APBlackListDataDeleteResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Result = string.Empty;
            string ResultType = string.Empty;
            string Rebootflag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Result = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    Rebootflag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            JsonInterFace.ActionResultStatus.ResoultStatus = Result;
            lock (JsonInterFace.ActionResultStatus.FinishedLock)
            {
                JsonInterFace.ActionResultStatus.Finished = true;
            }
        }

        /// <summary>
        /// 黑名单清空请求
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="DeviceFullPathName"></param>
        /// <param name="DomainFullPathName"></param>
        /// <param name="imsi"></param>
        /// <param name="imei"></param>
        /// <param name="bwFlag"></param>
        /// <returns></returns>
        public static string APBlackListDataClearRequest(string Type, string DeviceFullPathName, string IMSI)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> WhiteListParam = new Dictionary<string, object>();
                WhiteListParam.Add("bwListApplyTo", Type);
                WhiteListParam.Add("deviceFullPathName", DeviceFullPathName);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                WhiteListParam.Add("AllNum", WhiteListParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_bwlist_request, WhiteListParam);

                deviceListsParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();

                MsgStruct.Name_DIC_Struct itemParam = new MsgStruct.Name_DIC_Struct();
                itemParam.dic.Add("imsi", IMSI);
                itemParam.dic.Add("imei", "");
                itemParam.dic.Add("bwFlag", "black");
                deviceListsParamBody.n_dic.Add(itemParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 黑名单清空响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APBlackListDataClearResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Result = string.Empty;
            string ResultType = string.Empty;
            string Rebootflag = string.Empty;
            string Timestamp = string.Empty;
            string FullName = resultData.ApInfo.Fullname;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Result = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    Rebootflag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }
            JsonInterFace.ActionResultStatus.ResoultStatus = Result;
            lock (JsonInterFace.ActionResultStatus.FinishedLock)
            {
                JsonInterFace.ActionResultStatus.Finished = true;
            }
            //if (Result == ("0"))
            //{
            //    ResultType = "成功";
            //}
            //else if (Result == ("1"))
            //{
            //    ResultType = "失败";
            //}


            //if (Result == ("0"))
            //{
            //    Parameters.SendMessage(Parameters.SpeciallistWinHandle, Parameters.WM_BlackListDeleteResponse, 0, 0);
            //    JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), (FullName != "" ? "设备[" + FullName + "]清空黑名单成功" : ""), "清空黑名单", "成功");

            //    new Thread(() =>
            //    {
            //        ShowMessage("清空黑名单" + ResultType, 64);
            //    }).Start();
            //}
            //else
            //{
            //    new Thread(() =>
            //    {
            //        ShowMessage("清空黑名单" + ResultType, 48);
            //    }).Start();
            //}
        }

        /// <summary>
        /// 白名单删除请求
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="DeviceFullPathName"></param>
        /// <param name="DomainFullPathName"></param>
        /// <param name="imsi"></param>
        /// <param name="imei"></param>
        /// <param name="bwFlag"></param>
        /// <returns></returns>
        public static string APWhiteListDataDeleteRequest(string Type, string DeviceFullPathName, string DomainFullPathName, List<Dictionary<string, string>> WhiteLists)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> WhiteListParam = new Dictionary<string, object>();
                WhiteListParam.Add("bwListApplyTo", Type);
                if (DeviceFullPathName != null)
                {
                    WhiteListParam.Add("deviceFullPathName", DeviceFullPathName);
                }
                if (DomainFullPathName != null)
                {
                    WhiteListParam.Add("domainFullPathName", DomainFullPathName);
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                WhiteListParam.Add("AllNum", WhiteListParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_bwlist_request, WhiteListParam);

                deviceListsParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();

                foreach (Dictionary<string, string> Item in WhiteLists)
                {
                    MsgStruct.Name_DIC_Struct Para = new MsgStruct.Name_DIC_Struct();
                    foreach (KeyValuePair<string, string> SubItem in Item)
                    {
                        if (SubItem.Value != "" && SubItem.Value != null)
                        {
                            Para.name = string.Empty;
                            Para.dic.Add(SubItem.Key, SubItem.Value);
                        }
                    }
                    Para.dic.Add("bwFlag", "white");
                    deviceListsParamBody.n_dic.Add(Para);
                }

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 白名单删除响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APWhiteListDataDeleteResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Result = string.Empty;
            string ResultType = string.Empty;
            string Rebootflag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Result = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    Rebootflag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            JsonInterFace.ActionResultStatus.ResoultStatus = Result;
            lock (JsonInterFace.ActionResultStatus.FinishedLock)
            {
                JsonInterFace.ActionResultStatus.Finished = true;
            }
        }

        /// <summary>
        /// 白名单清空请求
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="DeviceFullPathName"></param>
        /// <param name="DomainFullPathName"></param>
        /// <param name="imsi"></param>
        /// <param name="imei"></param>
        /// <param name="bwFlag"></param>
        /// <returns></returns>
        public static string APWhiteListDataClearRequest(string Type, string DeviceFullPathName, string IMSI)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> WhiteListParam = new Dictionary<string, object>();
                WhiteListParam.Add("bwListApplyTo", Type);
                WhiteListParam.Add("deviceFullPathName", DeviceFullPathName);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                WhiteListParam.Add("AllNum", WhiteListParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_bwlist_request, WhiteListParam);

                deviceListsParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();

                MsgStruct.Name_DIC_Struct itemParam = new MsgStruct.Name_DIC_Struct();
                itemParam.dic.Add("imsi", IMSI);
                itemParam.dic.Add("imei", "");
                itemParam.dic.Add("bwFlag", "white");
                deviceListsParamBody.n_dic.Add(itemParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 白名单清空响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APWhiteListDataClearResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Result = string.Empty;
            string ResultType = string.Empty;
            string Rebootflag = string.Empty;
            string Timestamp = string.Empty;
            string FullName = resultData.ApInfo.Fullname;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Result = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    Rebootflag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }
            JsonInterFace.ActionResultStatus.ResoultStatus = Result;
            lock (JsonInterFace.ActionResultStatus.FinishedLock)
            {
                JsonInterFace.ActionResultStatus.Finished = true;
            }
            //if (Result == ("0"))
            //{
            //    ResultType = "成功";
            //}
            //else if (Result == ("1"))
            //{
            //    ResultType = "失败";
            //}


            //if (Result == ("0"))
            //{
            //    Parameters.SendMessage(Parameters.SpeciallistWinHandle, Parameters.WM_WhiteListDeleteResponse, 0, 0);
            //    JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), (FullName != "" ? "设备[" + FullName + "]清空白名单成功" : ""), "清空白名单", "成功");

            //    new Thread(() =>
            //    {
            //        ShowMessage("清空白名单" + ResultType, 64);
            //    }).Start();
            //}
            //else
            //{
            //    new Thread(() =>
            //    {
            //        ShowMessage("清空白名单" + ResultType, 48);
            //    }).Start();
            //}
        }

        /// <summary>
        /// 自定义名单删除请求
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="DeviceFullPathName"></param>
        /// <param name="DomainFullPathName"></param>
        /// <param name="WhiteLists"></param>
        /// <returns></returns>
        public static string APCustomListDataDeleteRequest(string Type, string DeviceFullPathName, string DomainFullPathName, List<Dictionary<string, string>> CustomLists)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> CustomListParam = new Dictionary<string, object>();
                CustomListParam.Add("bwListApplyTo", Type);
                if (DeviceFullPathName != null)
                {
                    CustomListParam.Add("deviceFullPathName", DeviceFullPathName);
                }
                if (DomainFullPathName != null)
                {
                    CustomListParam.Add("domainFullPathName", DomainFullPathName);
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                CustomListParam.Add("AllNum", CustomListParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_bwlist_request, CustomListParam);

                deviceListsParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();

                foreach (Dictionary<string, string> Item in CustomLists)
                {
                    MsgStruct.Name_DIC_Struct Para = new MsgStruct.Name_DIC_Struct();
                    foreach (KeyValuePair<string, string> SubItem in Item)
                    {
                        if (SubItem.Value != "" && SubItem.Value != null)
                        {
                            Para.name = string.Empty;
                            Para.dic.Add(SubItem.Key, SubItem.Value);
                        }
                    }
                    Para.dic.Add("bwFlag", "other");
                    deviceListsParamBody.n_dic.Add(Para);
                }

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 自定义名单删除响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APCustomListDataDeleteResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Result = string.Empty;
            string ResultType = string.Empty;
            string Rebootflag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Result = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    Rebootflag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            JsonInterFace.ActionResultStatus.ResoultStatus = Result;
            lock (JsonInterFace.ActionResultStatus.FinishedLock)
            {
                JsonInterFace.ActionResultStatus.Finished = true;
            }
        }

        /// <summary>
        /// 自定义名单清空请求
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="DeviceFullPathName"></param>
        /// <param name="DomainFullPathName"></param>
        /// <param name="imsi"></param>
        /// <param name="imei"></param>
        /// <param name="bwFlag"></param>
        /// <returns></returns>
        public static string APCustomListDataClearRequest(string Type, string DeviceFullPathName, string IMSI)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> WhiteListParam = new Dictionary<string, object>();
                WhiteListParam.Add("bwListApplyTo", Type);
                WhiteListParam.Add("deviceFullPathName", DeviceFullPathName);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                WhiteListParam.Add("AllNum", WhiteListParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_del_bwlist_request, WhiteListParam);

                deviceListsParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();

                MsgStruct.Name_DIC_Struct itemParam = new MsgStruct.Name_DIC_Struct();
                itemParam.dic.Add("imsi", IMSI);
                itemParam.dic.Add("imei", "");
                itemParam.dic.Add("bwFlag", "other");
                deviceListsParamBody.n_dic.Add(itemParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 自定义名单清空响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APCustomListDataClearResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Result = string.Empty;
            string ResultType = string.Empty;
            string Rebootflag = string.Empty;
            string Timestamp = string.Empty;
            string FullName = resultData.ApInfo.Fullname;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Result = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    Rebootflag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            JsonInterFace.ActionResultStatus.ResoultStatus = Result;
            lock (JsonInterFace.ActionResultStatus.FinishedLock)
            {
                JsonInterFace.ActionResultStatus.Finished = true;
            }
            //if (Result == ("0"))
            //{
            //    ResultType = "成功";
            //}
            //else if (Result == ("1"))
            //{
            //    ResultType = "失败";
            //}


            //if (Result == ("0"))
            //{
            //    Parameters.SendMessage(Parameters.SpeciallistWinHandle, Parameters.WM_CustomListDeleteResponse, 0, 0);
            //    JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), (FullName != "" ? "设备[" + FullName + "]清空自定义名单成功" : ""), "清空自定义名单", "成功");

            //    new Thread(() =>
            //    {
            //        ShowMessage("清空自定义名单" + ResultType, 64);
            //    }).Start();
            //}
            //else
            //{
            //    new Thread(() =>
            //    {
            //        ShowMessage("清空自定义名单" + ResultType, 48);
            //    }).Start();
            //}
        }

        #endregion

        #region 右键属性相关

        /// <summary>
        /// AP激活请求
        /// </summary>
        /// <param name="domainFullPathName">设备全名</param>
        /// <param name="deviceName">保留</param>
        /// <param name="IP">IP地址</param>
        /// <param name="Port">端口</param>
        /// <param name="InnerType">内部类型</param>
        /// <param name="SN">设备SN号</param>
        /// <returns></returns>
        public static string APActiveRequest(string domainFullPathName, string deviceName, string IP, int Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> APRebootParam = new Dictionary<string, object>();
                APRebootParam.Add("active_mode", 1);
                APRebootParam.Add("mode", 1);
                APRebootParam.Add("timeout", 3);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                APRebootParam.Add("AllNum", APRebootParam.Count + 1);

                MsgStruct.Msg_Body_Struct APRebootParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.activate_nodeb_request, APRebootParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = Port;
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = APRebootParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// AP去激活请求
        /// </summary>
        /// <param name="domainFullPathName">设备全名</param>
        /// <param name="deviceName">保留</param>
        /// <param name="IP">IP地址</param>
        /// <param name="Port">端口</param>
        /// <param name="InnerType">内部类型</param>
        /// <param name="SN">设备SN号</param>
        /// <returns></returns>
        public static string APUnActiveRequest(string domainFullPathName, string deviceName, string IP, int Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> APRebootParam = new Dictionary<string, object>();
                APRebootParam.Add("active_mode", 2);
                APRebootParam.Add("mode", 1);
                APRebootParam.Add("timeout", 3);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                APRebootParam.Add("AllNum", APRebootParam.Count + 1);

                MsgStruct.Msg_Body_Struct APRebootParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.activate_nodeb_request, APRebootParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = Port;
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = APRebootParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// AP重启动请求
        /// </summary>
        public static string APRestartRequest(string domainFullPathName, string deviceName, string IP, int Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> APRebootParam = new Dictionary<string, object>();
                APRebootParam.Add("active_mode", 3);
                APRebootParam.Add("mode", 1);
                APRebootParam.Add("timeout", 3);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                APRebootParam.Add("AllNum", APRebootParam.Count + 1);

                MsgStruct.Msg_Body_Struct APRebootParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.activate_nodeb_request, APRebootParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = Port;
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = APRebootParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// AP(LTE,WCDMA)激活响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APActiveRespone(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;
            string FullName = string.Empty;

            FullName = resultData.ApInfo.Fullname;
            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    ResourltFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            if (Resoult.Trim().Equals("0"))
            {
                new Thread(() =>
                {
                    if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                    {
                        ShowMessage(APResourltErrorType("设备[" + FullName + "]激活", Resoult, ResourltFlag, Timestamp), 64);
                    }
                    else
                    {
                        lock (JsonInterFace.ActionResultStatus.FinishedLock)
                        {
                            JsonInterFace.ActionResultStatus.Finished = true;
                        }
                        SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + FullName + "]激活", "激活", ResourltFlag == "0" ? "成功" : "失败");
                    }
                }).Start();

                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_APActiveResponse, 0, 0);
            }
            else
            {
                new Thread(() =>
                {
                    if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                    {
                        ShowMessage(APResourltErrorType("设备[" + FullName + "]激活", Resoult, ResourltFlag, Timestamp), 16);
                    }
                    else
                    {
                        lock (JsonInterFace.ActionResultStatus.FinishedLock)
                        {
                            JsonInterFace.ActionResultStatus.Finished = true;
                        }
                        SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + FullName + "]激活", "激活", ResourltFlag);
                    }
                }).Start();
            }
        }

        /// <summary>
        /// AP(LTE,WCDMA)去激活响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APUnActiveRespone(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;
            string FullName = string.Empty;

            FullName = resultData.ApInfo.Fullname;
            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    ResourltFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            if (Resoult.Trim().Equals("0"))
            {
                new Thread(() =>
                {
                    if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                    {
                        ShowMessage(APResourltErrorType("设备[" + FullName + "]去激活", Resoult, ResourltFlag, Timestamp), 64);
                    }
                    else
                    {
                        lock (JsonInterFace.ActionResultStatus.FinishedLock)
                        {
                            JsonInterFace.ActionResultStatus.Finished = true;
                        }
                        SystemLogsInfo.Input(DateTime.Now.ToString(), APResourltErrorType("设备[" + FullName + "]去激活", Resoult, ResourltFlag, Timestamp), "去激活", ResourltFlag == "0" ? "成功" : "失败");
                    }
                }).Start();

                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_APNoActiveResponse, 0, 0);
            }
            else
            {
                new Thread(() =>
                {
                    if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                    {
                        ShowMessage(APResourltErrorType("设备[" + FullName + "]去激活", Resoult, ResourltFlag, Timestamp), 16);
                    }
                    else
                    {
                        lock (JsonInterFace.ActionResultStatus.FinishedLock)
                        {
                            JsonInterFace.ActionResultStatus.Finished = true;
                        }
                        SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + FullName + "]去激活", "去激活", ResourltFlag);
                    }

                }).Start();
            }
        }

        /// <summary>
        /// AP重启响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APRestartResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;
            string ApFullName = resultData.ApInfo.Fullname + "(" + resultData.ApInfo.SN + ")";

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("result"))
                    {
                        Resoult = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("rebootflag"))
                    {
                        ResourltFlag = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("timestamp"))
                    {
                        Timestamp = Item.Value.ToString();
                    }
                }

                if (Resoult.Trim().Equals("0"))
                {
                    if (Parameters.ConfigType == "BatchApReboot")
                    {
                        string ResultStr = APResourltErrorType("设备[" + ApFullName + "]重启", Resoult, ResourltFlag, Timestamp);
                        IntPtr ReSultStrHandle = Marshal.StringToBSTR(ResultStr);
                        Parameters.SendMessage(Parameters.BatchRebootApWinHandle, Parameters.WM_BatchApRebootCompleteMessage, 0, ReSultStrHandle.ToInt32());
                    }
                    else if (Parameters.ConfigType == "APReboot")
                    {
                        new Thread(() =>
                        {
                            ShowMessage(APResourltErrorType("设备[" + ApFullName + "]重启", Resoult, ResourltFlag, Timestamp), 64);
                        }).Start();
                    }
                }
                else
                {
                    if (Parameters.ConfigType == "BatchApReboot")
                    {
                        string ResultStr = APResourltErrorType("设备[" + ApFullName + "]重启", Resoult, ResourltFlag, Timestamp);
                        IntPtr ReSultStrHandle = Marshal.StringToBSTR(ResultStr);
                        Parameters.SendMessage(Parameters.BatchRebootApWinHandle, Parameters.WM_BatchApRebootCompleteMessage, 0, ReSultStrHandle.ToInt32());
                    }
                    else if (Parameters.ConfigType == "APReboot")
                    {
                        new Thread(() =>
                        {
                            ShowMessage(APResourltErrorType("设备[" + ApFullName + "]重启", Resoult, ResourltFlag, Timestamp), 16);
                        }).Start();
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// AP统计信息
        /// </summary>
        public static string APStatisticalInfoRequest()
        {
            return "";
        }

        /// <summary>
        /// 设备详细信息请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <returns></returns>
        public static string GetDeviceDetailRequest(string domainFullPathName, string deviceName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> getDeviceDetailParam = new Dictionary<string, object>();
                getDeviceDetailParam.Add("parentFullPathName", domainFullPathName);
                getDeviceDetailParam.Add("name", deviceName);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                getDeviceDetailParam.Add("AllNum", getDeviceDetailParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_device_detail_request, getDeviceDetailParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.ApInfo.Type = string.Empty;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 设备详细信息响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void GetDeviceDetailResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string SelfID = string.Empty;
            string ParentID = string.Empty;
            string parentFullPathName = string.Empty;
            string SelfName = string.Empty;
            string MOdel = string.Empty;

            Regex regexAutoDitail = new Regex("Auto");
            Regex regexManulDitail = new Regex("Manul");
            Regex regexLoadDeviceDitail = new Regex("LoadedDevice");

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("ReturnCode"))
                {
                    ReturnCode = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("ReturnStr"))
                {
                    ReturnStr = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("domainId"))
                {
                    SelfID = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("domainParentId"))
                {
                    ParentID = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("parentFullPathName"))
                {
                    parentFullPathName = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("name"))
                {
                    SelfName = Item.Value.ToString();
                }
            }
            parentFullPathName += "." + SelfName;

            try
            {
                //成功
                if (ReturnCode == "0")
                {
                    //获取制式
                    for (int i = 0; i < APATTributesLists.Count; i++)
                    {
                        if (APATTributesLists[i].ParentID.Equals(SelfID)
                            && APATTributesLists[i].SelfName.Equals(SelfName))
                        {
                            MOdel = APATTributesLists[i].Mode;
                            break;
                        }
                    }

                    //数据不存在退出
                    if (resultData.Body.n_dic == null)
                    {
                        return;
                    }

                    if (resultData.Body.n_dic.Count > 0)
                    {
                        #region LTE
                        if (new Regex(DeviceType.LTE).Match(MOdel).Success)
                        {
                            LTEDeviceDetail.DeviceNameInfo = parentFullPathName;
                            //取值
                            foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                            {
                                string _Name = x.name;
                                foreach (KeyValuePair<string, object> Item in x.dic)
                                {
                                    if (Item.Key.Trim().Equals("SCTP"))
                                    {

                                    }
                                    else if (Item.Key.Trim().Equals("S1"))
                                    {

                                    }
                                    else if (Item.Key.Trim().Equals("GPS"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.GPSStatusInfo = "Desable";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.GPSStatusInfo = "关闭";
                                                }
                                            }
                                            else if (Item.Value.ToString() == "1")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.GPSStatusInfo = "Enable";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.GPSStatusInfo = "开启";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.GPSStatusInfo = "Desable";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.GPSStatusInfo = "关闭";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                LTEDeviceDetail.GPSStatusInfo = "Desable";
                                            }
                                            else
                                            {
                                                LTEDeviceDetail.GPSStatusInfo = "关闭";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("CELL"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.CellStatusInfo = "Started";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.CellStatusInfo = "就绪状态";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("2"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.CellStatusInfo = "Stopped";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.CellStatusInfo = "未就绪状态";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("4"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.CellStatusInfo = "Not Active";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.CellStatusInfo = "小区建立中";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.CellStatusInfo = "Stopped";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.CellStatusInfo = "未就绪状态";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                LTEDeviceDetail.CellStatusInfo = "Stopped";
                                            }
                                            else
                                            {
                                                LTEDeviceDetail.CellStatusInfo = "未就绪状态";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("SYNC"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == ("0"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.SyncStatusInfo = "Desynchronizing";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.SyncStatusInfo = "失步";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.SyncStatusInfo = "Synchronizing";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.SyncStatusInfo = "同步";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.SyncStatusInfo = "Desynchronizing";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.SyncStatusInfo = "失步";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                LTEDeviceDetail.SyncStatusInfo = "Desynchronizing";
                                            }
                                            else
                                            {
                                                LTEDeviceDetail.SyncStatusInfo = "失步";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("LICENSE"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.LicenseStatusInfo = "Invalid";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.LicenseStatusInfo = "无效";
                                                }
                                            }
                                            else if (Item.Value.ToString() == "1")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.LicenseStatusInfo = "Valid";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.LicenseStatusInfo = "有效";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.LicenseStatusInfo = "Invalid";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.LicenseStatusInfo = "无效";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                LTEDeviceDetail.LicenseStatusInfo = "Invalid";
                                            }
                                            else
                                            {
                                                LTEDeviceDetail.LicenseStatusInfo = "无效";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("ALIGN"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                LTEDeviceDetail.AlignStatusInfo = "数据未对齐";
                                            }
                                            else
                                            {
                                                LTEDeviceDetail.AlignStatusInfo = "数据已对齐";
                                            }
                                        }
                                        else
                                        {
                                            LTEDeviceDetail.AlignStatusInfo = "数据未对齐";
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("RADIO"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.ScannerStatusInfo = "Start";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.ScannerStatusInfo = "激活";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("0"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.ScannerStatusInfo = "Stop";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.ScannerStatusInfo = "未激活";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.ScannerStatusInfo = "Stop";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.ScannerStatusInfo = "未激活";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                LTEDeviceDetail.ScannerStatusInfo = "Stop";
                                            }
                                            else
                                            {
                                                LTEDeviceDetail.ScannerStatusInfo = "未激活";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("wSelfStudy"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString().Equals("0"))
                                            {
                                                LTEDeviceDetail.Command = "已停止";
                                            }
                                            else if (Item.Value.ToString().Equals("1"))
                                            {
                                                LTEDeviceDetail.Command = "已启动";
                                            }
                                            else
                                            {
                                                LTEDeviceDetail.Command = "已停止";
                                            }
                                        }
                                        else
                                        {
                                            LTEDeviceDetail.Command = "已停止";
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("ApReadySt"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            LTEDeviceDetail.ApReadySt = Item.Value.ToString();
                                        }
                                        else
                                        {
                                            LTEDeviceDetail.ApReadySt = null;
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("source"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                LTEDeviceDetail.Source = "GPS同步";
                                            }
                                            else if (Item.Value.ToString() == "1")
                                            {
                                                LTEDeviceDetail.Source = "空口同步";
                                            }
                                            else if (Item.Value.ToString() == "3")
                                            {
                                                LTEDeviceDetail.Source = "1588同步";
                                            }
                                            else
                                            {
                                                LTEDeviceDetail.Source = "未同步";
                                            }
                                        }
                                        else
                                        {
                                            LTEDeviceDetail.Source = "未同步";
                                        }
                                    }
                                }
                            }

                            //同步状态
                            if (LTEDeviceDetail.SyncStatusInfo != "失步")
                            {
                                LTEDeviceDetail.SyncStatusInfo += "(" + LTEDeviceDetail.Source + ")";
                            }
                        }
                        #endregion
                        #region WCDMA
                        else if (DeviceType.WCDMA == MOdel)
                        {
                            WCDMADeviceDetail.DeviceNameInfo = parentFullPathName;
                            //取值
                            foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                            {
                                string _Name = x.name;
                                foreach (KeyValuePair<string, object> Item in x.dic)
                                {
                                    if (Item.Key.Trim().Equals("SCTP"))
                                    {

                                    }
                                    else if (Item.Key.Trim().Equals("S1"))
                                    {

                                    }
                                    else if (Item.Key.Trim().Equals("GPS"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.GPSStatusInfo = "Desable";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.GPSStatusInfo = "关闭";
                                                }
                                            }
                                            else if (Item.Value.ToString() == "1")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.GPSStatusInfo = "Enable";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.GPSStatusInfo = "开启";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.GPSStatusInfo = "Desable";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.GPSStatusInfo = "关闭";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                WCDMADeviceDetail.GPSStatusInfo = "Desable";
                                            }
                                            else
                                            {
                                                WCDMADeviceDetail.GPSStatusInfo = "关闭";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("CELL"))
                                    {
                                        if (Item.Key != null)
                                        {
                                            if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.CellStatusInfo = "Started";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.CellStatusInfo = "就绪状态";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("2"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.CellStatusInfo = "Stopped";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.CellStatusInfo = "未就绪状态";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("4"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.CellStatusInfo = "Not Active";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.CellStatusInfo = "小区建立中";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.CellStatusInfo = "Stopped";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.CellStatusInfo = "未就绪状态";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                WCDMADeviceDetail.CellStatusInfo = "Stopped";
                                            }
                                            else
                                            {
                                                WCDMADeviceDetail.CellStatusInfo = "未就绪状态";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("SYNC"))
                                    {
                                        if (Item.Key != null)
                                        {
                                            if (Item.Value.ToString() == ("0"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.SyncStatusInfo = "Desynchronizing";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.SyncStatusInfo = "失步";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.SyncStatusInfo = "Synchronizing";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.SyncStatusInfo = "同步";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.SyncStatusInfo = "Desynchronizing";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.SyncStatusInfo = "失步";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                WCDMADeviceDetail.SyncStatusInfo = "Desynchronizing";
                                            }
                                            else
                                            {
                                                WCDMADeviceDetail.SyncStatusInfo = "失步";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("LICENSE"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.LicenseStatusInfo = "Invalid";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.LicenseStatusInfo = "无效";
                                                }
                                            }
                                            else if (Item.Value.ToString() == "1")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.LicenseStatusInfo = "Valid";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.LicenseStatusInfo = "有效";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.LicenseStatusInfo = "Invalid";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.LicenseStatusInfo = "无效";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                WCDMADeviceDetail.LicenseStatusInfo = "Invalid";
                                            }
                                            else
                                            {
                                                WCDMADeviceDetail.LicenseStatusInfo = "无效";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("ALIGN"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                WCDMADeviceDetail.AlignStatusInfo = "数据未对齐";
                                            }
                                            else
                                            {
                                                WCDMADeviceDetail.AlignStatusInfo = "数据已对齐";
                                            }
                                        }
                                        else
                                        {
                                            WCDMADeviceDetail.AlignStatusInfo = "数据未对齐";
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("RADIO"))
                                    {
                                        if (Item.Key != null)
                                        {
                                            if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.ScannerStatusInfo = "Start";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.ScannerStatusInfo = "激活";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("0"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.ScannerStatusInfo = "Stop";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.ScannerStatusInfo = "未激活";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.ScannerStatusInfo = "Stop";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.ScannerStatusInfo = "未激活";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                WCDMADeviceDetail.ScannerStatusInfo = "Stop";
                                            }
                                            else
                                            {
                                                WCDMADeviceDetail.ScannerStatusInfo = "未激活";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("wSelfStudy"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString().Equals("0"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.Command = "Stoped";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.Command = "已停止";
                                                }
                                            }
                                            else if (Item.Value.ToString().Equals("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.Command = "Startting";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.Command = "已启动";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.Command = "Stoped";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.Command = "已停止";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                WCDMADeviceDetail.Command = "Stoped";
                                            }
                                            else
                                            {
                                                WCDMADeviceDetail.Command = "已停止";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        #region GSM
                        else if (DeviceType.GSM == MOdel)
                        {
                            //由通用参数确认信息
                        }
                        #endregion
                        #region CDMA
                        else if (MOdel == DeviceType.CDMA)
                        {
                            CDMADeviceDetail.DeviceNameInfo = parentFullPathName;
                            //取值
                            foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                            {

                                string _Name = x.name;
                                foreach (KeyValuePair<string, object> Item in x.dic)
                                {
                                    if (Item.Key.Trim().Equals("SCTP"))
                                    {

                                    }
                                    else if (Item.Key.Trim().Equals("S1"))
                                    {

                                    }
                                    else if (Item.Key.Trim().Equals("GPS"))
                                    {
                                        if (Item.Value.ToString() == "0")
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.GPSStatusInfo = "Desable";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.GPSStatusInfo = "关闭";
                                            }
                                        }
                                        else if (Item.Value.ToString() == "1")
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.GPSStatusInfo = "Enable";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.GPSStatusInfo = "开启";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("CELL"))
                                    {
                                        if (Item.Value.ToString() == ("1"))
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.CellStatusInfo = "Started";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.CellStatusInfo = "就绪状态";
                                            }
                                        }
                                        else if (Item.Value.ToString() == ("2"))
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.CellStatusInfo = "Stopped";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.CellStatusInfo = "未就绪状态";
                                            }
                                        }
                                        else if (Item.Value.ToString() == ("4"))
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.CellStatusInfo = "Not Active";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.CellStatusInfo = "小区建立中";
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.CellStatusInfo = "Stopped";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.CellStatusInfo = "未就绪状态";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("SYNC"))
                                    {
                                        if (Item.Value.ToString() == ("0"))
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.SyncStatusInfo = "Desynchronizing";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.SyncStatusInfo = "失步";
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.SyncStatusInfo = "Synchronizing";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.SyncStatusInfo = "同步";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("LICENSE"))
                                    {
                                        if (Item.Value.ToString() == "0")
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.LicenseStatusInfo = "Invalid";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.LicenseStatusInfo = "无效";
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.LicenseStatusInfo = "Valid";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.LicenseStatusInfo = "有效";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("ALIGN"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                CDMADeviceDetail.AlignStatusInfo = "数据未对齐";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.AlignStatusInfo = "数据已对齐";
                                            }
                                        }
                                        else
                                        {
                                            CDMADeviceDetail.AlignStatusInfo = "数据未对齐";
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("RADIO"))
                                    {
                                        if (Item.Value.ToString() == ("1"))
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.ScannerStatusInfo = "Start";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.ScannerStatusInfo = "激活";
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.ScannerStatusInfo = "Stop";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.ScannerStatusInfo = "未激活";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("wSelfStudy"))
                                    {
                                        if (Item.Value.ToString().Equals("0"))
                                        {
                                            CDMADeviceDetail.Command = "已停止";
                                        }
                                        else
                                        {
                                            CDMADeviceDetail.Command = "已启动";
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("source"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                CDMADeviceDetail.Source = "GPS同步";
                                            }
                                            else if (Item.Value.ToString() == "1")
                                            {
                                                CDMADeviceDetail.Source = "空口同步";
                                            }
                                            else if (Item.Value.ToString() == "3")
                                            {
                                                CDMADeviceDetail.Source = "1588同步";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.Source = "未同步";
                                            }
                                        }
                                        else
                                        {
                                            CDMADeviceDetail.Source = "未同步";
                                        }
                                    }
                                }
                            }
                            //同步状态
                            if (CDMADeviceDetail.SyncStatusInfo != "失步")
                            {
                                CDMADeviceDetail.SyncStatusInfo += "(" + CDMADeviceDetail.Source + ")";
                            }
                        }
                        #endregion
                        #region GSMV2
                        else if (MOdel == DeviceType.GSMV2)
                        {
                            //取值
                            foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                            {
                                string _Name = x.name;
                                if (_Name.Equals("carry0"))
                                {
                                    GSMV2SelfCarrierOneDetailInfo.DeviceNameInfo = parentFullPathName;
                                    foreach (KeyValuePair<string, object> Item in x.dic)
                                    {
                                        if (Item.Key.Trim().Equals("SCTP"))
                                        {

                                        }
                                        else if (Item.Key.Trim().Equals("S1"))
                                        {

                                        }
                                        else if (Item.Key.Trim().Equals("GPS"))
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.GPSStatusInfo = "Desable";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.GPSStatusInfo = "关闭";
                                                }
                                            }
                                            else if (Item.Value.ToString() == "1")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.GPSStatusInfo = "Enable";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.GPSStatusInfo = "开启";
                                                }
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("CELL"))
                                        {
                                            if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.CellStatusInfo = "Started";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.CellStatusInfo = "就绪状态";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("2"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.CellStatusInfo = "Stopped";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.CellStatusInfo = "未就绪状态";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("4"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.CellStatusInfo = "Not Active";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.CellStatusInfo = "小区建立中";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.CellStatusInfo = "Stopped";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.CellStatusInfo = "未就绪状态";
                                                }
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("SYNC"))
                                        {
                                            if (Item.Value.ToString() == ("0"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.SyncStatusInfo = "Desynchronizing";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.SyncStatusInfo = "失步";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.SyncStatusInfo = "Synchronizing";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.SyncStatusInfo = "同步";
                                                }
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("LICENSE"))
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.LicenseStatusInfo = "Invalid";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.LicenseStatusInfo = "无效";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.LicenseStatusInfo = "Valid";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.LicenseStatusInfo = "有效";
                                                }
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("ALIGN"))
                                        {
                                            if (Item.Value != null)
                                            {
                                                if (Item.Value.ToString() == "0")
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.AlignStatusInfo = "数据未对齐";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.AlignStatusInfo = "数据已对齐";
                                                }
                                            }
                                            else
                                            {
                                                GSMV2SelfCarrierOneDetailInfo.AlignStatusInfo = "数据未对齐";
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("RADIO"))
                                        {
                                            if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.ScannerStatusInfo = "Start";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.ScannerStatusInfo = "激活";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.ScannerStatusInfo = "Stop";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.ScannerStatusInfo = "未激活";
                                                }
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("wSelfStudy"))
                                        {
                                            if (Item.Value.ToString().Equals("0"))
                                            {
                                                GSMV2SelfCarrierOneDetailInfo.Command = "已停止";
                                            }
                                            else
                                            {
                                                GSMV2SelfCarrierOneDetailInfo.Command = "已启动";
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("source"))
                                        {
                                            if (Item.Value != null)
                                            {
                                                if (Item.Value.ToString() == "0")
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.Source = "GPS同步";
                                                }
                                                else if (Item.Value.ToString() == "1")
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.Source = "空口同步";
                                                }
                                                else if (Item.Value.ToString() == "3")
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.Source = "1588同步";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierOneDetailInfo.Source = "未同步";
                                                }
                                            }
                                            else
                                            {
                                                GSMV2SelfCarrierOneDetailInfo.Source = "未同步";
                                            }
                                        }

                                        GSMV2SelfCarrierOneDetailInfo.VersionInfo = "无";
                                    }
                                    //同步状态
                                    if (GSMV2SelfCarrierOneDetailInfo.SyncStatusInfo != "失步")
                                    {
                                        GSMV2SelfCarrierOneDetailInfo.SyncStatusInfo += "(" + GSMV2SelfCarrierOneDetailInfo.Source + ")";
                                    }
                                }
                                else
                                {
                                    GSMV2SelfCarrierTwoDetailInfo.DeviceNameInfo = parentFullPathName;
                                    foreach (KeyValuePair<string, object> Item in x.dic)
                                    {
                                        if (Item.Key.Trim().Equals("SCTP"))
                                        {

                                        }
                                        else if (Item.Key.Trim().Equals("S1"))
                                        {

                                        }
                                        else if (Item.Key.Trim().Equals("GPS"))
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.GPSStatusInfo = "Desable";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.GPSStatusInfo = "关闭";
                                                }
                                            }
                                            else if (Item.Value.ToString() == "1")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.GPSStatusInfo = "Enable";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.GPSStatusInfo = "开启";
                                                }
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("CELL"))
                                        {
                                            if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.CellStatusInfo = "Started";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.CellStatusInfo = "就绪状态";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("2"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.CellStatusInfo = "Stopped";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.CellStatusInfo = "未就绪状态";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("4"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.CellStatusInfo = "Not Active";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.CellStatusInfo = "小区建立中";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.CellStatusInfo = "Stopped";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.CellStatusInfo = "未就绪状态";
                                                }
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("SYNC"))
                                        {
                                            if (Item.Value.ToString() == ("0"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.SyncStatusInfo = "Desynchronizing";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.SyncStatusInfo = "失步";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.SyncStatusInfo = "Synchronizing";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.SyncStatusInfo = "同步";
                                                }
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("LICENSE"))
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.LicenseStatusInfo = "Invalid";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.LicenseStatusInfo = "无效";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.LicenseStatusInfo = "Valid";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.LicenseStatusInfo = "有效";
                                                }
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("ALIGN"))
                                        {
                                            if (Item.Value != null)
                                            {
                                                if (Item.Value.ToString() == "0")
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.AlignStatusInfo = "数据未对齐";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.AlignStatusInfo = "数据已对齐";
                                                }
                                            }
                                            else
                                            {
                                                GSMV2SelfCarrierTwoDetailInfo.AlignStatusInfo = "数据未对齐";
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("RADIO"))
                                        {
                                            if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.ScannerStatusInfo = "Start";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.ScannerStatusInfo = "激活";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.ScannerStatusInfo = "Stop";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.ScannerStatusInfo = "未激活";
                                                }
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("wSelfStudy"))
                                        {
                                            if (Item.Value.ToString().Equals("0"))
                                            {
                                                GSMV2SelfCarrierTwoDetailInfo.Command = "已停止";
                                            }
                                            else
                                            {
                                                GSMV2SelfCarrierTwoDetailInfo.Command = "已启动";
                                            }
                                        }
                                        else if (Item.Key.Trim().Equals("source"))
                                        {
                                            if (Item.Value != null)
                                            {
                                                if (Item.Value.ToString() == "0")
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.Source = "GPS同步";
                                                }
                                                else if (Item.Value.ToString() == "1")
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.Source = "空口同步";
                                                }
                                                else if (Item.Value.ToString() == "3")
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.Source = "1588同步";
                                                }
                                                else
                                                {
                                                    GSMV2SelfCarrierTwoDetailInfo.Source = "未同步";
                                                }
                                            }
                                            else
                                            {
                                                GSMV2SelfCarrierTwoDetailInfo.Source = "未同步";
                                            }
                                        }
                                    }
                                    //同步状态
                                    if (GSMV2SelfCarrierTwoDetailInfo.SyncStatusInfo != "失步")
                                    {
                                        GSMV2SelfCarrierTwoDetailInfo.SyncStatusInfo += "(" + GSMV2SelfCarrierTwoDetailInfo.Source + ")";
                                    }
                                }
                            }
                        }
                        #endregion
                        #region TDS
                        else if (DeviceType.TD_SCDMA == MOdel)
                        {
                            TDSDeviceDetail.DeviceNameInfo = parentFullPathName;
                            //取值
                            foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                            {
                                string _Name = x.name;
                                foreach (KeyValuePair<string, object> Item in x.dic)
                                {
                                    if (Item.Key.Trim().Equals("SCTP"))
                                    {

                                    }
                                    else if (Item.Key.Trim().Equals("S1"))
                                    {

                                    }
                                    else if (Item.Key.Trim().Equals("GPS"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.GPSStatusInfo = "Desable";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.GPSStatusInfo = "关闭";
                                                }
                                            }
                                            else if (Item.Value.ToString() == "1")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.GPSStatusInfo = "Enable";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.GPSStatusInfo = "开启";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.GPSStatusInfo = "Desable";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.GPSStatusInfo = "关闭";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                TDSDeviceDetail.GPSStatusInfo = "Desable";
                                            }
                                            else
                                            {
                                                TDSDeviceDetail.GPSStatusInfo = "关闭";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("CELL"))
                                    {
                                        if (Item.Key != null)
                                        {
                                            if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.CellStatusInfo = "Started";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.CellStatusInfo = "就绪状态";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("2"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.CellStatusInfo = "Stopped";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.CellStatusInfo = "未就绪状态";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("4"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.CellStatusInfo = "Not Active";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.CellStatusInfo = "小区建立中";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.CellStatusInfo = "Stopped";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.CellStatusInfo = "未就绪状态";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                TDSDeviceDetail.CellStatusInfo = "Stopped";
                                            }
                                            else
                                            {
                                                TDSDeviceDetail.CellStatusInfo = "未就绪状态";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("SYNC"))
                                    {
                                        if (Item.Key != null)
                                        {
                                            if (Item.Value.ToString() == ("0"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.SyncStatusInfo = "Desynchronizing";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.SyncStatusInfo = "失步";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.SyncStatusInfo = "Synchronizing";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.SyncStatusInfo = "同步";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.SyncStatusInfo = "Desynchronizing";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.SyncStatusInfo = "失步";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                TDSDeviceDetail.SyncStatusInfo = "Desynchronizing";
                                            }
                                            else
                                            {
                                                TDSDeviceDetail.SyncStatusInfo = "失步";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("LICENSE"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.LicenseStatusInfo = "Invalid";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.LicenseStatusInfo = "无效";
                                                }
                                            }
                                            else if (Item.Value.ToString() == "1")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.LicenseStatusInfo = "Valid";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.LicenseStatusInfo = "有效";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.LicenseStatusInfo = "Invalid";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.LicenseStatusInfo = "无效";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                TDSDeviceDetail.LicenseStatusInfo = "Invalid";
                                            }
                                            else
                                            {
                                                TDSDeviceDetail.LicenseStatusInfo = "无效";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("ALIGN"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString() == "0")
                                            {
                                                TDSDeviceDetail.AlignStatusInfo = "数据未对齐";
                                            }
                                            else
                                            {
                                                TDSDeviceDetail.AlignStatusInfo = "数据已对齐";
                                            }
                                        }
                                        else
                                        {
                                            TDSDeviceDetail.AlignStatusInfo = "数据未对齐";
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("RADIO"))
                                    {
                                        if (Item.Key != null)
                                        {
                                            if (Item.Value.ToString() == ("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.ScannerStatusInfo = "Start";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.ScannerStatusInfo = "激活";
                                                }
                                            }
                                            else if (Item.Value.ToString() == ("0"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.ScannerStatusInfo = "Stop";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.ScannerStatusInfo = "未激活";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.ScannerStatusInfo = "Stop";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.ScannerStatusInfo = "未激活";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                TDSDeviceDetail.ScannerStatusInfo = "Stop";
                                            }
                                            else
                                            {
                                                TDSDeviceDetail.ScannerStatusInfo = "未激活";
                                            }
                                        }
                                    }
                                    else if (Item.Key.Trim().Equals("wSelfStudy"))
                                    {
                                        if (Item.Value != null)
                                        {
                                            if (Item.Value.ToString().Equals("0"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.Command = "Stoped";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.Command = "已停止";
                                                }
                                            }
                                            else if (Item.Value.ToString().Equals("1"))
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.Command = "Startting";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.Command = "已启动";
                                                }
                                            }
                                            else
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.Command = "Stoped";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.Command = "已停止";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                TDSDeviceDetail.Command = "Stoped";
                                            }
                                            else
                                            {
                                                TDSDeviceDetail.Command = "已停止";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        #region 加裁时自动获取详细信息，则更新到每一个对应的AP属性
                        if (regexLoadDeviceDitail.Match(Parameters.ConfigType).Success)
                        {
                            for (int i = 0; i < JsonInterFace.APATTributesLists.Count; i++)
                            {
                                if (parentFullPathName == JsonInterFace.APATTributesLists[i].FullName)
                                {
                                    if (new Regex(DeviceType.LTE).Match(JsonInterFace.APATTributesLists[i].Mode).Success)
                                    {
                                        if (APATTributesLists[i].OnLine.Equals("1"))
                                        {
                                            if (LTEDeviceDetail.ScannerStatusInfo == null || LTEDeviceDetail.ScannerStatusInfo == "未激活")
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, null, new NodeIcon().LeafNoActiveNodeIcon, null, null);
                                            }
                                            else
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, null, new NodeIcon().LeafAllReadyNodeIcon, null, null);
                                            }
                                        }
                                        else if (JsonInterFace.APATTributesLists[i].OnLine.Equals("0"))
                                        {
                                            SettingDeviceActiveStatus(parentFullPathName, null, new NodeIcon().LeafNoConnectNodeIcon, null, null);
                                        }

                                        //对齐状态
                                        if (LTEDeviceDetail.AlignStatusInfo != null)
                                        {
                                            if (LTEDeviceDetail.AlignStatusInfo == "数据未对齐")
                                            {
                                                APATTributesLists[i].AlertIcon = new NodeIcon().AlignAlertIcon;
                                                APATTributesLists[i].AlertText = LTEDeviceDetail.AlignStatusInfo;
                                            }
                                            else if (LTEDeviceDetail.AlignStatusInfo == "数据已对齐")
                                            {
                                                APATTributesLists[i].AlertIcon = "";
                                                APATTributesLists[i].AlertText = LTEDeviceDetail.AlignStatusInfo;
                                            }
                                        }
                                        else
                                        {
                                            APATTributesLists[i].AlertIcon = new NodeIcon().AlignAlertIcon;
                                            APATTributesLists[i].AlertText = "数据未对齐";
                                        }
                                    }
                                    else if (DeviceType.WCDMA == JsonInterFace.APATTributesLists[i].Mode)
                                    {
                                        if (APATTributesLists[i].OnLine.Equals("1"))
                                        {
                                            if (WCDMADeviceDetail.ScannerStatusInfo == null || WCDMADeviceDetail.ScannerStatusInfo == "未激活")
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, null, new NodeIcon().LeafNoActiveNodeIcon, null, null);
                                            }
                                            else
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, null, new NodeIcon().LeafAllReadyNodeIcon, null, null);
                                            }
                                        }
                                        else if (JsonInterFace.APATTributesLists[i].OnLine.Equals("0"))
                                        {
                                            SettingDeviceActiveStatus(parentFullPathName, null, new NodeIcon().LeafNoConnectNodeIcon, null, null);
                                        }

                                        //对齐状态
                                        if (WCDMADeviceDetail.AlignStatusInfo != null)
                                        {
                                            if (WCDMADeviceDetail.AlignStatusInfo == "数据未对齐")
                                            {
                                                APATTributesLists[i].AlertIcon = new NodeIcon().AlignAlertIcon;
                                                APATTributesLists[i].AlertText = WCDMADeviceDetail.AlignStatusInfo;
                                            }
                                            else if (WCDMADeviceDetail.AlignStatusInfo == "数据已对齐")
                                            {
                                                APATTributesLists[i].AlertIcon = "";
                                                APATTributesLists[i].AlertText = WCDMADeviceDetail.AlignStatusInfo;
                                            }
                                        }
                                        else
                                        {
                                            APATTributesLists[i].AlertIcon = new NodeIcon().AlignAlertIcon;
                                            APATTributesLists[i].AlertText = "数据未对齐";
                                        }
                                    }
                                    else if (DeviceType.CDMA == JsonInterFace.APATTributesLists[i].Mode)
                                    {
                                        if (APATTributesLists[i].OnLine.Equals("1"))
                                        {
                                            if (CDMADeviceDetail.ScannerStatusInfo == null || CDMADeviceDetail.ScannerStatusInfo == "未激活")
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, null, new NodeIcon().LeafNoActiveNodeIcon, null, null);
                                            }
                                            else
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, null, new NodeIcon().LeafAllReadyNodeIcon, null, null);
                                            }
                                        }
                                        else if (JsonInterFace.APATTributesLists[i].OnLine.Equals("0"))
                                        {
                                            SettingDeviceActiveStatus(parentFullPathName, null, new NodeIcon().LeafNoConnectNodeIcon, null, null);
                                        }

                                        //对齐状态
                                        if (CDMADeviceDetail.AlignStatusInfo != null)
                                        {
                                            if (CDMADeviceDetail.AlignStatusInfo == "数据未对齐")
                                            {
                                                APATTributesLists[i].AlertIcon = new NodeIcon().AlignAlertIcon;
                                                APATTributesLists[i].AlertText = CDMADeviceDetail.AlignStatusInfo;
                                            }
                                            else if (CDMADeviceDetail.AlignStatusInfo == "数据已对齐")
                                            {
                                                APATTributesLists[i].AlertIcon = "";
                                                APATTributesLists[i].AlertText = CDMADeviceDetail.AlignStatusInfo;
                                            }
                                        }
                                        else
                                        {
                                            APATTributesLists[i].AlertIcon = new NodeIcon().AlignAlertIcon;
                                            APATTributesLists[i].AlertText = "数据未对齐";
                                        }
                                    }
                                    else if (DeviceType.GSMV2 == JsonInterFace.APATTributesLists[i].Mode)
                                    {
                                        if (APATTributesLists[i].OnLine.Equals("1"))
                                        {
                                            //载波一,载波二 全关
                                            if ((GSMV2SelfCarrierOneDetailInfo.ScannerStatusInfo == null || GSMV2SelfCarrierOneDetailInfo.ScannerStatusInfo == "未激活")
                                                && (GSMV2SelfCarrierTwoDetailInfo.ScannerStatusInfo == null || GSMV2SelfCarrierTwoDetailInfo.ScannerStatusInfo == "未激活"))
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, "2", new NodeIcon().LeafNoActiveNodeIcon, null, null);
                                            }
                                            //载波一开启 载波二关闭
                                            else if ((GSMV2SelfCarrierOneDetailInfo.ScannerStatusInfo == null || GSMV2SelfCarrierOneDetailInfo.ScannerStatusInfo == "激活")
                                                && (GSMV2SelfCarrierTwoDetailInfo.ScannerStatusInfo == null || GSMV2SelfCarrierTwoDetailInfo.ScannerStatusInfo == "未激活"))
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, "0", null, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon);
                                            }
                                            //载波二开启 载波一关闭
                                            else if ((GSMV2SelfCarrierOneDetailInfo.ScannerStatusInfo == null || GSMV2SelfCarrierOneDetailInfo.ScannerStatusInfo == "未激活")
                                                && (GSMV2SelfCarrierTwoDetailInfo.ScannerStatusInfo == null || GSMV2SelfCarrierTwoDetailInfo.ScannerStatusInfo == "激活"))
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, "1", null, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon);
                                            }
                                            //载波一,载波二 全开
                                            else if ((GSMV2SelfCarrierOneDetailInfo.ScannerStatusInfo == null || GSMV2SelfCarrierOneDetailInfo.ScannerStatusInfo == "激活")
                                                && (GSMV2SelfCarrierTwoDetailInfo.ScannerStatusInfo == null || GSMV2SelfCarrierTwoDetailInfo.ScannerStatusInfo == "激活"))
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, "2", new NodeIcon().LeafAllReadyNodeIcon, null, null);
                                            }
                                        }
                                        else if (JsonInterFace.APATTributesLists[i].OnLine.Equals("0"))
                                        {
                                            SettingDeviceActiveStatus(parentFullPathName, "2", new NodeIcon().LeafNoConnectNodeIcon, null, null);
                                        }

                                        //对齐状态(载波1)
                                        if (GSMV2SelfCarrierOneDetailInfo.AlignStatusInfo != null)
                                        {
                                            if (GSMV2SelfCarrierOneDetailInfo.AlignStatusInfo == "数据未对齐")
                                            {
                                                APATTributesLists[i].AlertIcon = new NodeIcon().AlignAlertIcon;
                                                APATTributesLists[i].AlertText = GSMV2SelfCarrierOneDetailInfo.AlignStatusInfo;
                                            }
                                            else if (GSMV2SelfCarrierOneDetailInfo.AlignStatusInfo == "数据已对齐")
                                            {
                                                APATTributesLists[i].AlertIcon = "";
                                                APATTributesLists[i].AlertText = GSMV2SelfCarrierOneDetailInfo.AlignStatusInfo;
                                            }
                                        }
                                        else
                                        {
                                            APATTributesLists[i].AlertIcon = new NodeIcon().AlignAlertIcon;
                                            APATTributesLists[i].AlertText = "数据未对齐";
                                        }

                                        //对齐状态(载波2)
                                        if (GSMV2SelfCarrierTwoDetailInfo.AlignStatusInfo != null)
                                        {
                                            if (GSMV2SelfCarrierTwoDetailInfo.AlignStatusInfo == "数据未对齐")
                                            {
                                                APATTributesLists[i].AlertIcon = new NodeIcon().AlignAlertIcon;
                                                APATTributesLists[i].AlertText = GSMV2SelfCarrierTwoDetailInfo.AlignStatusInfo;
                                            }
                                            else if (GSMV2SelfCarrierTwoDetailInfo.AlignStatusInfo == "数据已对齐")
                                            {
                                                APATTributesLists[i].AlertIcon = "";
                                                APATTributesLists[i].AlertText = GSMV2SelfCarrierTwoDetailInfo.AlignStatusInfo;
                                            }
                                        }
                                        else
                                        {
                                            APATTributesLists[i].AlertIcon = new NodeIcon().AlignAlertIcon;
                                            APATTributesLists[i].AlertText = "数据未对齐";
                                        }
                                    }
                                    else if (DeviceType.GSM == JsonInterFace.APATTributesLists[i].Mode)
                                    {
                                        if (GSMSelfCarrierOneDetailInfo.RfEnable == "未激活")
                                        {
                                            GSMSelfCarrierOneDetailInfo.RfEnable = "0";
                                        }
                                        else if (GSMSelfCarrierOneDetailInfo.RfEnable == "激活")
                                        {
                                            GSMSelfCarrierOneDetailInfo.RfEnable = "1";
                                        }

                                        if (GSMSelfCarrierTwoDetailInfo.RfEnable == "未激活")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.RfEnable = "0";
                                        }
                                        else if (GSMSelfCarrierTwoDetailInfo.RfEnable == "激活")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.RfEnable = "1";
                                        }

                                        if (APATTributesLists[i].OnLine.Equals("1"))
                                        {
                                            //载波一,载波二 全关
                                            if ((GSMSelfCarrierOneDetailInfo.RfEnable == null || GSMSelfCarrierOneDetailInfo.RfEnable == "0")
                                                && (GSMSelfCarrierTwoDetailInfo.RfEnable == null || GSMSelfCarrierTwoDetailInfo.RfEnable == "0"))
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, "2", new NodeIcon().LeafNoActiveNodeIcon, null, null);
                                            }
                                            //载波一开启 载波二关闭
                                            else if ((GSMSelfCarrierOneDetailInfo.RfEnable == null || GSMSelfCarrierOneDetailInfo.RfEnable == "1")
                                                && (GSMSelfCarrierTwoDetailInfo.RfEnable == null || GSMSelfCarrierTwoDetailInfo.RfEnable == "0"))
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, "0", null, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon);
                                            }
                                            //载波一关闭 载波二开启 
                                            else if ((GSMSelfCarrierOneDetailInfo.RfEnable == null || GSMSelfCarrierOneDetailInfo.RfEnable == "0")
                                                && (GSMSelfCarrierTwoDetailInfo.RfEnable == null || GSMSelfCarrierTwoDetailInfo.RfEnable == "1"))
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, "1", null, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon);
                                            }
                                            //载波一,载波二 全开
                                            else if ((GSMSelfCarrierOneDetailInfo.RfEnable == null || GSMSelfCarrierOneDetailInfo.RfEnable == "1")
                                                && (GSMSelfCarrierTwoDetailInfo.RfEnable == null || GSMSelfCarrierTwoDetailInfo.RfEnable == "1"))
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, "2", new NodeIcon().LeafAllReadyNodeIcon, null, null);
                                            }
                                        }
                                        else if (JsonInterFace.APATTributesLists[i].OnLine.Equals("0"))
                                        {
                                            SettingDeviceActiveStatus(parentFullPathName, "2", new NodeIcon().LeafNoConnectNodeIcon, null, null);
                                        }
                                    }
                                    else if (DeviceType.TD_SCDMA == JsonInterFace.APATTributesLists[i].Mode)
                                    {
                                        if (APATTributesLists[i].OnLine.Equals("1"))
                                        {
                                            if (TDSDeviceDetail.ScannerStatusInfo == null || TDSDeviceDetail.ScannerStatusInfo == "未激活")
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, null, new NodeIcon().LeafNoActiveNodeIcon, null, null);
                                            }
                                            else
                                            {
                                                SettingDeviceActiveStatus(parentFullPathName, null, new NodeIcon().LeafAllReadyNodeIcon, null, null);
                                            }
                                        }
                                        else if (JsonInterFace.APATTributesLists[i].OnLine.Equals("0"))
                                        {
                                            SettingDeviceActiveStatus(parentFullPathName, null, new NodeIcon().LeafNoConnectNodeIcon, null, null);
                                        }

                                        //对齐状态
                                        if (TDSDeviceDetail.AlignStatusInfo != null)
                                        {
                                            if (TDSDeviceDetail.AlignStatusInfo == "数据未对齐")
                                            {
                                                APATTributesLists[i].AlertIcon = new NodeIcon().AlignAlertIcon;
                                                APATTributesLists[i].AlertText = TDSDeviceDetail.AlignStatusInfo;
                                            }
                                            else if (TDSDeviceDetail.AlignStatusInfo == "数据已对齐")
                                            {
                                                APATTributesLists[i].AlertIcon = "";
                                                APATTributesLists[i].AlertText = TDSDeviceDetail.AlignStatusInfo;
                                            }
                                        }
                                        else
                                        {
                                            APATTributesLists[i].AlertIcon = new NodeIcon().AlignAlertIcon;
                                            APATTributesLists[i].AlertText = "数据未对齐";
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        #region 手动
                        if (regexManulDitail.Match(Parameters.ConfigType).Success)
                        {
                            //其它信息值在通用参数
                            for (int i = 0; i < JsonInterFace.APATTributesLists.Count; i++)
                            {
                                if (JsonInterFace.APATTributesLists[i].SelfName.Trim().Equals(SelfName.Trim())
                                    && JsonInterFace.APATTributesLists[i].ParentID.Trim().Equals(SelfID.Trim()))
                                {
                                    if (new Regex(DeviceType.LTE).Match(JsonInterFace.APATTributesLists[i].Mode).Success || new Regex(DeviceType.GSM).Match(JsonInterFace.APATTributesLists[i].Mode).Success)
                                    {
                                        LTEDeviceDetail.PLMNInfo = JsonInterFace.APATTributesLists[i].PLMN + "-" + OperatorsList.GetOperators(JsonInterFace.APATTributesLists[i].PLMN);
                                        LTEDeviceDetail.FreqPCIInfo = JsonInterFace.APATTributesLists[i].FrequencyPoint + "/" + JsonInterFace.APATTributesLists[i].Scrambler;

                                        if (LTEDeviceDetail.GPSStatusInfo.Equals("开启") || LTEDeviceDetail.GPSStatusInfo.Equals("Enable"))
                                        {
                                            if (LTEDeviceDetail.GPSDetailInfo == null || LTEDeviceDetail.GPSDetailInfo == "")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    LTEDeviceDetail.GPSDetailInfo = "Not getting";
                                                }
                                                else
                                                {
                                                    LTEDeviceDetail.GPSDetailInfo = "未获取";
                                                }
                                            }
                                            else
                                            {
                                                LTEDeviceDetail.GPSDetailInfo = "-/-";
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                LTEDeviceDetail.GPSDetailInfo = "None";
                                            }
                                            else
                                            {
                                                LTEDeviceDetail.GPSDetailInfo = "未获取";
                                            }
                                        }

                                        LTEDeviceDetail.SyncSourceInfo = JsonInterFace.APATTributesLists[i].AppointNeighList + "," + JsonInterFace.APATTributesLists[i].AppointNeighPci + "," + JsonInterFace.APATTributesLists[i].AppointNeighBandWidth;
                                        break;
                                    }
                                    else if (DeviceType.WCDMA == JsonInterFace.APATTributesLists[i].Mode)
                                    {
                                        WCDMADeviceDetail.PLMNInfo = JsonInterFace.APATTributesLists[i].PLMN + "-" + OperatorsList.GetOperators(JsonInterFace.APATTributesLists[i].PLMN);
                                        WCDMADeviceDetail.FreqPCIInfo = JsonInterFace.APATTributesLists[i].FrequencyPoint + "/" + JsonInterFace.APATTributesLists[i].Scrambler;

                                        if (WCDMADeviceDetail.GPSStatusInfo.Equals("开启") || WCDMADeviceDetail.GPSStatusInfo.Equals("Enable"))
                                        {
                                            if (WCDMADeviceDetail.GPSDetailInfo == null || WCDMADeviceDetail.GPSDetailInfo == "")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    WCDMADeviceDetail.GPSDetailInfo = "Not getting";
                                                }
                                                else
                                                {
                                                    WCDMADeviceDetail.GPSDetailInfo = "未获取";
                                                }
                                            }
                                            else
                                            {
                                                WCDMADeviceDetail.GPSDetailInfo = "-/-";
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                WCDMADeviceDetail.GPSDetailInfo = "None";
                                            }
                                            else
                                            {
                                                WCDMADeviceDetail.GPSDetailInfo = "未获取";
                                            }
                                        }

                                        WCDMADeviceDetail.SyncSourceInfo = JsonInterFace.APATTributesLists[i].AppointNeighList + "," + JsonInterFace.APATTributesLists[i].AppointNeighPci + "," + JsonInterFace.APATTributesLists[i].AppointNeighBandWidth;
                                        break;
                                    }
                                    else if (DeviceType.CDMA == JsonInterFace.APATTributesLists[i].Mode)
                                    {
                                        CDMADeviceDetail.PLMNInfo = JsonInterFace.APATTributesLists[i].PLMN + "-" + OperatorsList.GetOperators(JsonInterFace.APATTributesLists[i].PLMN);
                                        CDMADeviceDetail.FreqPCIInfo = JsonInterFace.APATTributesLists[i].FrequencyPoint + "/" + JsonInterFace.APATTributesLists[i].Scrambler;

                                        if (CDMADeviceDetail.GPSStatusInfo.Equals("开启") || CDMADeviceDetail.GPSStatusInfo.Equals("Enable"))
                                        {
                                            if (CDMADeviceDetail.GPSDetailInfo == null || CDMADeviceDetail.GPSDetailInfo == "")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    CDMADeviceDetail.GPSDetailInfo = "Not getting";
                                                }
                                                else
                                                {
                                                    CDMADeviceDetail.GPSDetailInfo = "未获取";
                                                }
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.GPSDetailInfo = "-/-";
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                CDMADeviceDetail.GPSDetailInfo = "None";
                                            }
                                            else
                                            {
                                                CDMADeviceDetail.GPSDetailInfo = "未获取";
                                            }
                                        }

                                        CDMADeviceDetail.SyncSourceInfo = JsonInterFace.APATTributesLists[i].AppointNeighList + "," + JsonInterFace.APATTributesLists[i].AppointNeighPci + "," + JsonInterFace.APATTributesLists[i].AppointNeighBandWidth;
                                        break;
                                    }
                                    else if (DeviceType.TD_SCDMA == JsonInterFace.APATTributesLists[i].Mode)
                                    {
                                        TDSDeviceDetail.PLMNInfo = JsonInterFace.APATTributesLists[i].PLMN + "-" + OperatorsList.GetOperators(JsonInterFace.APATTributesLists[i].PLMN);
                                        TDSDeviceDetail.FreqPCIInfo = JsonInterFace.APATTributesLists[i].FrequencyPoint + "/" + JsonInterFace.APATTributesLists[i].Scrambler;

                                        if (TDSDeviceDetail.GPSStatusInfo.Equals("开启") || TDSDeviceDetail.GPSStatusInfo.Equals("Enable"))
                                        {
                                            if (TDSDeviceDetail.GPSDetailInfo == null || TDSDeviceDetail.GPSDetailInfo == "")
                                            {
                                                if (Parameters.LanguageType.Equals("EN"))
                                                {
                                                    TDSDeviceDetail.GPSDetailInfo = "Not getting";
                                                }
                                                else
                                                {
                                                    TDSDeviceDetail.GPSDetailInfo = "未获取";
                                                }
                                            }
                                            else
                                            {
                                                TDSDeviceDetail.GPSDetailInfo = "-/-";
                                            }
                                        }
                                        else
                                        {
                                            if (Parameters.LanguageType.Equals("EN"))
                                            {
                                                TDSDeviceDetail.GPSDetailInfo = "None";
                                            }
                                            else
                                            {
                                                TDSDeviceDetail.GPSDetailInfo = "未获取";
                                            }
                                        }

                                        TDSDeviceDetail.SyncSourceInfo = JsonInterFace.APATTributesLists[i].AppointNeighList + "," + JsonInterFace.APATTributesLists[i].AppointNeighPci + "," + JsonInterFace.APATTributesLists[i].AppointNeighBandWidth;
                                        break;
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                }

                if (Parameters.ConfigType == "LoadedDevice")
                {
                    JsonInterFace.ActionResultStatus.ResoultStatus = ReturnStr;
                    lock (JsonInterFace.ActionResultStatus.FinishedLock)
                    {
                        JsonInterFace.ActionResultStatus.Finished = true;
                    }
                }
                else
                {
                    SystemLogsInfo.Input(DateTime.Now.ToString(), "获取[" + parentFullPathName + "]设备详细信息" + ReturnStr, "获取设备详细信息", ReturnStr);
                }
            }
            catch (Exception ex)
            {
                SystemLogsInfo.Input(DateTime.Now.ToString(), "获取[" + parentFullPathName + "]设备详细信息," + ex.Message, "获取设备详细信息", "解析异常" + ex.StackTrace);
                Parameters.PrintfLogsExtended("解析设备详细信息", ex.Message, ex.StackTrace);
                DeviceListRequestCompleteStatus.LoadingWindowStatu = Visibility.Collapsed;
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_DeviceListInfoLoad, 0, 0);
            }
        }

        /// <summary>
        /// 递归根据设备详细信息设置设备树是否激活状态(用于手动操作或上报状态改变)
        /// </summary>
        /// <param name="DeviceTree"></param>
        /// <param name="FullName"></param>
        /// <param name="ActiveStatus"></param>
        public static void SettingDeviceActiveStatus(IList<CheckBoxTreeModel> DeviceTree, string FullName, string Carrier, string ActiveStatusIcon, string CarrierOneIcon, string CarrierTwoIcon, bool Active)
        {
            try
            {
                if (DeviceTree != null)
                {
                    foreach (CheckBoxTreeModel itemChild in DeviceTree)
                    {
                        if (itemChild.Children.Count > 0)
                        {
                            SettingDeviceActiveStatus(itemChild.Children, FullName, Carrier, ActiveStatusIcon, CarrierOneIcon, CarrierTwoIcon, Active);
                        }
                        else
                        {
                            if ((itemChild.SelfNodeType == NodeType.LeafNode.ToString()) && (FullName == itemChild.FullName))
                            {
                                //LTE CDMA WCDMA TDS
                                if (new Regex(DeviceType.LTE).Match(itemChild.Mode).Success || itemChild.Mode == DeviceType.CDMA || itemChild.Mode == DeviceType.WCDMA || itemChild.Mode == DeviceType.TD_SCDMA)
                                {
                                    itemChild.Icon = ActiveStatusIcon;
                                    for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                                    {
                                        if (BindTreeViewClass.DeviceTreeTable.Rows[i]["PathName"].ToString() == FullName)
                                        {
                                            BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = itemChild.Icon;
                                            break;
                                        }
                                    }
                                }
                                //GSM, GSM-V2
                                else if (itemChild.Mode == DeviceType.GSM || itemChild.Mode == DeviceType.GSMV2)
                                {
                                    if (Carrier == "0")
                                    {
                                        //激活
                                        if (Active)
                                        {
                                            if (itemChild.Icon == new NodeIcon().LeafNoActiveNodeIcon)
                                            {
                                                itemChild.Icon = CarrierOneIcon;
                                                for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                                                {
                                                    if (BindTreeViewClass.DeviceTreeTable.Rows[i]["PathName"].ToString() == FullName)
                                                    {
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = itemChild.Icon;
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = itemChild.Icon;
                                                        break;
                                                    }
                                                }
                                            }
                                            else if (itemChild.Icon == new NodeIcon().Carrier_Two_ActiveIcon)
                                            {
                                                itemChild.Icon = new NodeIcon().LeafAllReadyNodeIcon;
                                                for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                                                {
                                                    if (BindTreeViewClass.DeviceTreeTable.Rows[i]["PathName"].ToString() == FullName)
                                                    {
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = itemChild.Icon;
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = itemChild.Icon;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        //去激活
                                        else
                                        {
                                            if (itemChild.Icon == new NodeIcon().LeafAllReadyNodeIcon)
                                            {
                                                itemChild.Icon = CarrierTwoIcon;
                                                for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                                                {
                                                    if (BindTreeViewClass.DeviceTreeTable.Rows[i]["PathName"].ToString() == FullName)
                                                    {
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = itemChild.Icon;
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = itemChild.Icon;
                                                        break;
                                                    }
                                                }
                                            }
                                            else if (itemChild.Icon == new NodeIcon().Carrier_One_ActiveIcon)
                                            {
                                                itemChild.Icon = new NodeIcon().LeafNoActiveNodeIcon;
                                                for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                                                {
                                                    if (BindTreeViewClass.DeviceTreeTable.Rows[i]["PathName"].ToString() == FullName)
                                                    {
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = itemChild.Icon;
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = itemChild.Icon;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (Carrier == "1")
                                    {
                                        //激活
                                        if (Active)
                                        {
                                            if (itemChild.Icon == new NodeIcon().LeafNoActiveNodeIcon)
                                            {
                                                itemChild.Icon = CarrierTwoIcon;
                                                for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                                                {
                                                    if (BindTreeViewClass.DeviceTreeTable.Rows[i]["PathName"].ToString() == FullName)
                                                    {
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = itemChild.Icon;
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = itemChild.Icon;
                                                        break;
                                                    }
                                                }
                                            }
                                            else if (itemChild.Icon == new NodeIcon().Carrier_One_ActiveIcon)
                                            {
                                                itemChild.Icon = new NodeIcon().LeafAllReadyNodeIcon;
                                                for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                                                {
                                                    if (BindTreeViewClass.DeviceTreeTable.Rows[i]["PathName"].ToString() == FullName)
                                                    {
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = itemChild.Icon;
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = itemChild.Icon;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        //去激活
                                        else
                                        {
                                            if (itemChild.Icon == new NodeIcon().LeafAllReadyNodeIcon)
                                            {
                                                itemChild.Icon = CarrierOneIcon;
                                                for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                                                {
                                                    if (BindTreeViewClass.DeviceTreeTable.Rows[i]["PathName"].ToString() == FullName)
                                                    {
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = itemChild.Icon;
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = itemChild.Icon;
                                                        break;
                                                    }
                                                }
                                            }
                                            else if (itemChild.Icon == new NodeIcon().Carrier_Two_ActiveIcon)
                                            {
                                                itemChild.Icon = new NodeIcon().LeafNoActiveNodeIcon;
                                                for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                                                {
                                                    if (BindTreeViewClass.DeviceTreeTable.Rows[i]["PathName"].ToString() == FullName)
                                                    {
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = itemChild.Icon;
                                                        BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = itemChild.Icon;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (Carrier == "2")
                                    {
                                        itemChild.Icon = ActiveStatusIcon;
                                        for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                                        {
                                            if (BindTreeViewClass.DeviceTreeTable.Rows[i]["PathName"].ToString() == FullName)
                                            {
                                                BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = itemChild.Icon;
                                                BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = itemChild.Icon;
                                                break;
                                            }
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("设备状态改变处理", ex.Message, ex.StackTrace);
            }

            JsonInterFace.UsrdomainData = DeviceTree;
        }

        /// <summary>
        /// 递归根据设备详细信息设置设备树是否激活状态(用于加载配置)
        /// </summary>
        /// <param name="DeviceList"></param>
        /// <param name="FullName"></param>
        /// <param name="Carrier"></param>
        /// <param name="ActiveStatusIcon"></param>
        /// <param name="CarrierOneIcon"></param>
        /// <param name="CarrierTwoIcon"></param>
        public static void SettingDeviceActiveStatus(string FullName, string Carrier, string ActiveStatusIcon, string CarrierOneIcon, string CarrierTwoIcon)
        {
            if (BindTreeViewClass.DeviceTreeTable != null)
            {
                for (int i = 0; i < BindTreeViewClass.DeviceTreeTable.Rows.Count; i++)
                {
                    string SelfFullName = BindTreeViewClass.DeviceTreeTable.Rows[i][0].ToString();
                    if (SelfFullName == FullName)
                    {
                        //制式
                        string Mode = string.Empty;
                        for (int j = 0; j < APATTributesLists.Count; j++)
                        {
                            if (APATTributesLists[j].FullName == FullName)
                            {
                                Mode = APATTributesLists[j].Mode;
                                break;
                            }
                        }

                        //LTE CDMA WCDMA TDS
                        if (new Regex(DeviceType.LTE).Match(Mode).Success || Mode == DeviceType.CDMA || Mode == DeviceType.WCDMA || Mode == DeviceType.TD_SCDMA)
                        {
                            BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = ActiveStatusIcon;
                            break;
                        }
                        //GSM
                        else if (Mode == DeviceType.GSM)
                        {
                            if (Carrier == "0")
                            {
                                BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = CarrierOneIcon;
                                BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = Carrier;
                                break;
                            }
                            else if (Carrier == "1")
                            {
                                BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = CarrierTwoIcon;
                                BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = Carrier;
                                break;
                            }
                            else
                            {
                                BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = ActiveStatusIcon;
                                BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = "2";
                                break;
                            }
                        }
                        //GSMV2
                        else if (Mode == DeviceType.GSMV2)
                        {
                            if (Carrier == "0")
                            {
                                BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = CarrierOneIcon;
                                BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = Carrier;
                                break;
                            }
                            else if (Carrier == "1")
                            {
                                BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = CarrierTwoIcon;
                                BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = Carrier;
                                break;
                            }
                            else
                            {
                                BindTreeViewClass.DeviceTreeTable.Rows[i]["NodeIcon"] = ActiveStatusIcon;
                                BindTreeViewClass.DeviceTreeTable.Rows[i]["CarrierStatus"] = "2";
                                break;
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 递归根据设备名改变数据对齐状态,或高温告警呈现
        /// </summary>
        /// <param name="DeviceTree">设备列表</param>
        /// <param name="DeviceFullName">设备名称</param>
        /// <param name="Carrier">载</param>
        /// <param name="AlertType">告警类型</param>
        public static void SettingDeviceAlignStatus(IList<CheckBoxTreeModel> DeviceTree, string DeviceFullName, string Carrier, int AlertType, bool Status, ref string[] StatusInfo)
        {
            foreach (CheckBoxTreeModel itemChild in DeviceTree)
            {
                if (itemChild.Children.Count > 0)
                {
                    SettingDeviceAlignStatus(itemChild.Children, DeviceFullName, Carrier, AlertType, Status, ref StatusInfo);
                }
                else
                {
                    if (itemChild.FullName == DeviceFullName)
                    {
                        //数据未对齐: 0
                        if (AlertType == 0)
                        {
                            if (Status)
                            {
                                StatusInfo[0] = new NodeIcon().AlignAlertIcon;
                                StatusInfo[1] = "该设备数据未对齐";
                            }
                            else
                            {
                                StatusInfo[0] = "";
                                StatusInfo[1] = "数据已对齐";
                            }
                        }
                        //高温告警: 1
                        else if (AlertType == 1)
                        {
                            if (Status)
                            {
                                StatusInfo[0] = new NodeIcon().TmpAlertIcon;
                                StatusInfo[1] = "该设备温度过高";
                            }
                            else
                            {
                                StatusInfo[0] = "";
                                StatusInfo[1] = "温度正常";
                            }
                        }
                        break;
                    }
                }
            }
        }

        #endregion

        #region AP配置响应信息
        /// <summary>
        /// AP配置响应状态
        /// </summary>
        /// <param name="Action"></param>
        /// <param name="ResourltCode"></param>
        /// <param name="Timestamp"></param>
        /// <returns></returns>
        public static string APResourltErrorType(string Action, string ResourltCode, string rebootFlag, string Timestamp)
        {
            string Msg = string.Empty;
            if (ResourltCode.Trim().Equals("0"))
            {
                Msg = Action + ":" + Parameters.APResoultMsgType.Resoult_0 + ", " + Parameters.APResoultRebootMsgType.RebootFlag(rebootFlag) + "! [ " + Timestamp + " ]";
            }
            else if (ResourltCode.Trim().Equals("1"))
            {
                Msg = Action + ":" + Parameters.APResoultMsgType.Resoult_1 + ", " + Parameters.APResoultRebootMsgType.RebootFlag(rebootFlag) + "! [ " + Timestamp + " ]";
            }
            else if (ResourltCode.Trim().Equals("2"))
            {
                Msg = Action + ":" + Parameters.APResoultMsgType.Resoult_2 + ", " + Parameters.APResoultRebootMsgType.RebootFlag(rebootFlag) + "! [ " + Timestamp + " ]";
            }
            else if (ResourltCode.Trim().Equals("3"))
            {
                Msg = Action + ":" + Parameters.APResoultMsgType.Resoult_3 + ", " + Parameters.APResoultRebootMsgType.RebootFlag(rebootFlag) + "! [ " + Timestamp + " ]";
            }
            else if (ResourltCode.Trim().Equals("4"))
            {
                Msg = Action + ":" + Parameters.APResoultMsgType.Resoult_4 + ", " + Parameters.APResoultRebootMsgType.RebootFlag(rebootFlag) + "! [ " + Timestamp + " ]";
            }
            else if (ResourltCode.Trim().Equals("5"))
            {
                Msg = Action + ":" + Parameters.APResoultMsgType.Resoult_5 + ", " + Parameters.APResoultRebootMsgType.RebootFlag(rebootFlag) + "! [ " + Timestamp + " ]";
            }
            return Msg;
        }
        #endregion

        #region 历史记录搜索
        ///<summary>
        ///请求历史记录搜索
        ///</summary>
        /// <param bwListApplyTo="device"></param>
        /// <param deviceFullPathName="设备.深圳.福田.中心广场.西北监控.电信TDD"></param>
        /// <param domainFullPathName="设备.深圳.福田"></param>
        /// <param imsi="46000xxxxxxxxx"></param>
        /// <param imei="46000xxxxxxxxx"></param>
        /// <param bwFlag="black"></param>
        /// <param timeStart="2018-05-23 12:34:56"></param>
        /// <param timeEnded="2018-05-23 12:34:56"></param>
        /// <param RmDupFlag="0"></param>
        public static string App_history_record__Request(string bwListApplyTo, string deviceFullPathName, string domainFullPathName,
                                                         string imsi, string imei, string bwFlag,
                                                         string timeStart, string timeEnded, string RmDupFlag)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> historyrecordParam = new Dictionary<string, object>();
                historyrecordParam.Add("bwListApplyTo", bwListApplyTo);
                historyrecordParam.Add("deviceFullPathName", deviceFullPathName);
                historyrecordParam.Add("domainFullPathName", domainFullPathName);
                historyrecordParam.Add("imsi", imsi);
                historyrecordParam.Add("imei", imei);
                historyrecordParam.Add("bwFlag", bwFlag);
                historyrecordParam.Add("timeStart", timeStart);
                historyrecordParam.Add("timeEnded", timeEnded);
                historyrecordParam.Add("RmDupFlag", RmDupFlag);
                MsgStruct.Msg_Body_Struct historyrecordParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_history_record_request, historyrecordParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = historyrecordParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        ///<summary>
        ///请求历史记录搜索相应
        ///</summary>
        public static void App_history_record_response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string imsi = string.Empty;
            string tmsi = string.Empty;
            string device = string.Empty;
            string time = string.Empty;
            string userType = string.Empty;
            string sn = string.Empty;
            string id = string.Empty;
            string operators = string.Empty;
            string domain = string.Empty;
            string des = string.Empty;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        HistoryDataList.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        HistoryDataList.ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("TotalRecords"))
                    {
                        HistoryDataList.TotalRecords = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("CurPageIndex"))
                    {
                        HistoryDataList.CurPageIndex = Item.Value.ToString();
                        HistoryDataList.CurPageIndexCaption = "/" + HistoryDataList.CurPageIndex.Split(new char[] { ':' })[1] + "页";
                        HistoryDataList.PageIndex = HistoryDataList.CurPageIndex.Split(new char[] { ':' })[0];
                    }
                    else if (Item.Key.Trim().Equals("PageSize"))
                    {
                        HistoryDataList.PageSize = Item.Value.ToString();
                    }
                }

                //成功
                if (HistoryDataList.ReturnCode.Trim().Equals("0"))
                {
                    HistoryDataList.HistoryDataTable.Rows.Clear();
                    foreach (MsgStruct.Name_DIC_Struct recorde in resultData.Body.n_dic)
                    {
                        DataRow rw = HistoryDataList.HistoryDataTable.NewRow();

                        id = recorde.name.Trim();
                        foreach (KeyValuePair<string, object> item in recorde.dic)
                        {
                            if (item.Key.Trim().Equals("imsi"))
                            {
                                imsi = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("tmsi"))
                            {
                                tmsi = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("name"))
                            {
                                device = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("time"))
                            {
                                time = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("bwFlag"))
                            {
                                userType = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("sn"))
                            {
                                sn = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("des"))
                            {
                                des = item.Value.ToString();
                            }
                        }
                        if (userType.Equals("white"))
                        {
                            userType = "白名单";
                        }
                        else if (userType.Equals("black"))
                        {
                            userType = "黑名单";
                        }
                        else
                        {
                            userType = "普通用户";
                        }
                        PhoneAreaConvertion.Get(imsi);
                        operators = PhoneAreaConvertion.Country + PhoneAreaConvertion.Operators;
                        domain = PhoneAreaConvertion.Location;
                        rw[0] = id;
                        rw[1] = imsi;
                        rw[2] = time;
                        rw[3] = userType;
                        rw[4] = tmsi;
                        rw[5] = operators;
                        rw[6] = domain;
                        rw[7] = device;
                        rw[8] = des;

                        HistoryDataList.HistoryDataTable.Rows.Add(rw);
                    }
                    if (HistoryDataList.PageIndex.Equals("0") || HistoryDataList.PageIndex.Equals("1"))
                    {
                        new Thread(() =>
                        {
                            ShowMessage("总共获取到" + HistoryDataList.TotalRecords.ToString() + "条历史数据", 64);
                        }).Start();
                    }
                }
                Parameters.SendMessage(Parameters.HistoryDataWinHandle, Parameters.WM_GetHistoryDataResponse, 0, 0);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("历史数据查询：", ex.Message, ex.StackTrace);
            }
        }


        /// <summary>
        /// 历史记录搜索单页的请求
        /// </summary>
        /// <param name="PageIndex"></param>
        /// <returns></returns>
        public static string App_history_record_next_page_Request(string CurPageIndex)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> HistoryRecordNextPageParam = new Dictionary<string, object>();
                HistoryRecordNextPageParam.Add("CurPageIndex", CurPageIndex);

                MsgStruct.Msg_Body_Struct HistoryRecordParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_history_record_next_page_request, HistoryRecordNextPageParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = HistoryRecordParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        ///<summary>
        ///获取历史记录搜索导出csv文件的请求
        /// </summary>
        /// <param fileName="abc.csv"></param>
        public static string App_history_record_export_csv__Request(string FileName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> historyrecordCSVParam = new Dictionary<string, object>();
                historyrecordCSVParam.Add("fileName", FileName);
                MsgStruct.Msg_Body_Struct historyrecordCSVParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_history_record_export_csv_request, historyrecordCSVParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = historyrecordCSVParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        ///<summary>
        ///获取历史记录搜索导出csv文件的响应
        ///</summary>
        public static void App_history_record_export_csv_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                }
                if (ReturnCode.Trim().Equals("0"))
                {
                    HistoryDataToCSVClass csvFileInfo = new HistoryDataToCSVClass();
                    foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                    {
                        if (Item.Key.Trim().Equals("ftpUsrName"))
                        {
                            csvFileInfo.FtpUsrName = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpPwd"))
                        {
                            csvFileInfo.FtpPwd = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpRootDir"))
                        {
                            csvFileInfo.FtpRootDir = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpServerIp"))
                        {
                            csvFileInfo.FtpServerIp = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpPort"))
                        {
                            csvFileInfo.FtpPort = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("fileName"))
                        {
                            csvFileInfo.FileName = Item.Value.ToString();
                        }
                    }
                    HistoryDataToCSVFile = csvFileInfo;
                    Parameters.SendMessage(Parameters.HistoryDataWinHandle, Parameters.WM_GetHistoryDataToCSVResponse, 0, 0);
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("历史数据导出CSV：", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 通话记录请求
        /// </summary>
        public static string App_get_MsCall_Request__Request(string parentFullPathName, string name, string carry, string imsi, string number, string timeStart, string timeEnded)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> MsCallHistoryrecordParam = new Dictionary<string, object>();
                MsCallHistoryrecordParam.Add("parentFullPathName", parentFullPathName);
                MsCallHistoryrecordParam.Add("name", name);
                MsCallHistoryrecordParam.Add("carry", carry);
                MsCallHistoryrecordParam.Add("imsi", imsi);
                MsCallHistoryrecordParam.Add("number", number);
                MsCallHistoryrecordParam.Add("timeStart", timeStart);
                MsCallHistoryrecordParam.Add("timeEnded", timeEnded);
                MsgStruct.Msg_Body_Struct MsCallHistoryrecordParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_MsCall_Request, MsCallHistoryrecordParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = MsCallHistoryrecordParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 单页通话记录请求
        /// </summary>
        /// <param name="CurPageIndex"></param>
        public static string App_get_MsCall_NextPage_Request(string CurPageIndex)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> MsCallNextPageParam = new Dictionary<string, object>();
                MsCallNextPageParam.Add("CurPageIndex", CurPageIndex);

                MsgStruct.Msg_Body_Struct MsCallNextPageParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_MsCall_NextPage_Request, MsCallNextPageParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = MsCallNextPageParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求通话记录响应
        /// </summary>
        public static void App_get_MsCall_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string id = string.Empty;
            string device = string.Empty;
            string imsi = string.Empty;
            string number = string.Empty;
            string time = string.Empty;
            string parentFullPathName = string.Empty;
            string fullName = string.Empty;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        PhoneHistoryData.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        PhoneHistoryData.ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("TotalRecords"))
                    {
                        PhoneHistoryData.TotalRecords = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("CurPageIndex"))
                    {
                        PhoneHistoryData.CurPageIndex = Item.Value.ToString();
                        PhoneHistoryData.CurPageIndexCaption = "/" + PhoneHistoryData.CurPageIndex.Split(new char[] { ':' })[1] + "页";
                        PhoneHistoryData.PageIndex = PhoneHistoryData.CurPageIndex.Split(new char[] { ':' })[0];
                    }
                    else if (Item.Key.Trim().Equals("PageSize"))
                    {
                        PhoneHistoryData.PageSize = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("parentFullPathName"))
                    {
                        parentFullPathName = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("name"))
                    {
                        device = Item.Value.ToString();
                    }
                }

                //成功
                if (PhoneHistoryData.ReturnCode.Trim().Equals("0"))
                {
                    fullName = parentFullPathName + "." + device;
                    PhoneHistoryData.PhoneHistoryDataTable.Rows.Clear();
                    foreach (MsgStruct.Name_DIC_Struct recorde in resultData.Body.n_dic)
                    {
                        id = recorde.name.Trim();
                        foreach (KeyValuePair<string, object> item in recorde.dic)
                        {
                            if (item.Key.Trim().Equals("imsi"))
                            {
                                imsi = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("number"))
                            {
                                number = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("time"))
                            {
                                time = item.Value.ToString();
                            }
                        }
                        PhoneHistoryData.PhoneHistoryItmeInput(id, imsi, number, time, fullName);
                    }
                    if (PhoneHistoryData.PageIndex.Equals("0") || PhoneHistoryData.PageIndex.Equals("1"))
                    {
                        new Thread(() =>
                        {
                            ShowMessage("总共获取到" + PhoneHistoryData.TotalRecords.ToString() + "条通话记录", 64);
                        }).Start();
                    }
                }
                Parameters.SendMessage(Parameters.HistoryDataWinHandle, Parameters.WM_GetHistoryDataResponse, 0, 0);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("通话记录查询：", ex.Message, ex.StackTrace);
            }
        }

        ///<summary>
        ///获取通话记录导出csv文件的请求
        /// </summary>
        /// <param fileName="abc.csv"></param>
        public static string App_get_MsCall_ExportCSV_Request(string FileName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> historyrecordCSVParam = new Dictionary<string, object>();
                historyrecordCSVParam.Add("fileName", FileName);
                MsgStruct.Msg_Body_Struct historyrecordCSVParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_MsCall_ExportCSV_Request, historyrecordCSVParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = historyrecordCSVParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        ///<summary>
        ///获取历史记录搜索导出csv文件的响应
        ///</summary>
        public static void App_get_MsCall_ExportCSV_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                }
                if (ReturnCode.Trim().Equals("0"))
                {
                    PhoneHistoryDataToCSVClass phonecsvFileInfo = new PhoneHistoryDataToCSVClass();
                    foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                    {
                        if (Item.Key.Trim().Equals("ftpUsrName"))
                        {
                            phonecsvFileInfo.FtpUsrName = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpPwd"))
                        {
                            phonecsvFileInfo.FtpPwd = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpRootDir"))
                        {
                            phonecsvFileInfo.FtpRootDir = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpServerIp"))
                        {
                            phonecsvFileInfo.FtpServerIp = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpPort"))
                        {
                            phonecsvFileInfo.FtpPort = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("fileName"))
                        {
                            phonecsvFileInfo.FileName = Item.Value.ToString();
                        }
                    }
                    HistoryDataToCSVFile = phonecsvFileInfo;
                    Parameters.SendMessage(Parameters.HistoryDataWinHandle, Parameters.WM_GetHistoryDataToCSVResponse, 0, 0);
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("历史数据导出CSV：", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 短信记录请求
        /// </summary>
        public static string App_get_MsSms_Request__Request(string parentFullPathName, string name, string carry, string imsi, string number, string data, string timeStart, string timeEnded)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> MsSmsHistoryrecordParam = new Dictionary<string, object>();
                MsSmsHistoryrecordParam.Add("parentFullPathName", parentFullPathName);
                MsSmsHistoryrecordParam.Add("name", name);
                MsSmsHistoryrecordParam.Add("carry", carry);
                MsSmsHistoryrecordParam.Add("imsi", imsi);
                MsSmsHistoryrecordParam.Add("number", number);
                MsSmsHistoryrecordParam.Add("data", data);
                MsSmsHistoryrecordParam.Add("timeStart", timeStart);
                MsSmsHistoryrecordParam.Add("timeEnded", timeEnded);
                MsgStruct.Msg_Body_Struct MMsSmsHistoryrecordParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_MsSms_Request, MsSmsHistoryrecordParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = MMsSmsHistoryrecordParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 单页短信记录请求
        /// </summary>
        /// <param name="CurPageIndex"></param>
        public static string App_get_MsSms_NextPage_Request(string CurPageIndex)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> MsSmsNextPageParam = new Dictionary<string, object>();
                MsSmsNextPageParam.Add("CurPageIndex", CurPageIndex);

                MsgStruct.Msg_Body_Struct MsSmsNextPageParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_MsSms_NextPage_Request, MsSmsNextPageParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = MsSmsNextPageParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 请求短信记录响应
        /// </summary>
        public static void App_get_MsSms_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string id = string.Empty;
            string device = string.Empty;
            string imsi = string.Empty;
            string number = string.Empty;
            string codetype = string.Empty;
            string data = string.Empty;
            string time = string.Empty;
            string parentFullPathName = string.Empty;
            string fullName = string.Empty;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        SMSHistoryData.ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        SMSHistoryData.ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("TotalRecords"))
                    {
                        SMSHistoryData.TotalRecords = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("CurPageIndex"))
                    {
                        SMSHistoryData.CurPageIndex = Item.Value.ToString();
                        SMSHistoryData.CurPageIndexCaption = "/" + SMSHistoryData.CurPageIndex.Split(new char[] { ':' })[1] + "页";
                        SMSHistoryData.PageIndex = SMSHistoryData.CurPageIndex.Split(new char[] { ':' })[0];
                    }
                    else if (Item.Key.Trim().Equals("PageSize"))
                    {
                        SMSHistoryData.PageSize = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("parentFullPathName"))
                    {
                        parentFullPathName = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("name"))
                    {
                        device = Item.Value.ToString();
                    }
                }

                //成功
                if (SMSHistoryData.ReturnCode.Trim().Equals("0"))
                {
                    fullName = parentFullPathName + "." + device;
                    SMSHistoryData.PhoneHistoryDataTable.Rows.Clear();
                    foreach (MsgStruct.Name_DIC_Struct recorde in resultData.Body.n_dic)
                    {
                        id = recorde.name.Trim();
                        foreach (KeyValuePair<string, object> item in recorde.dic)
                        {
                            if (item.Key.Trim().Equals("imsi"))
                            {
                                imsi = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("number"))
                            {
                                number = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("codetype"))
                            {
                                codetype = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("data"))
                            {
                                data = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("time"))
                            {
                                time = item.Value.ToString();
                            }
                        }
                        SMSHistoryData.SMSHistoryItmeInput(id, imsi, number, codetype, data, time, fullName);
                    }
                    if (SMSHistoryData.PageIndex.Equals("0") || SMSHistoryData.PageIndex.Equals("1"))
                    {
                        new Thread(() =>
                        {
                            ShowMessage("总共获取到" + SMSHistoryData.TotalRecords.ToString() + "条短信记录", 64);
                        }).Start();
                    }
                }
                Parameters.SendMessage(Parameters.HistoryDataWinHandle, Parameters.WM_GetHistoryDataResponse, 0, 0);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("通话记录查询：", ex.Message, ex.StackTrace);
            }
        }

        ///<summary>
        ///获取短信记录导出csv文件的请求
        /// </summary>
        /// <param fileName="abc.csv"></param>
        public static string App_get_MsSms_ExportCSV_Request(string FileName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> historyrecordCSVParam = new Dictionary<string, object>();
                historyrecordCSVParam.Add("fileName", FileName);
                MsgStruct.Msg_Body_Struct historyrecordCSVParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_MsSms_ExportCSV_Request, historyrecordCSVParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = historyrecordCSVParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        ///<summary>
        ///获取短信记录搜索导出csv文件的响应
        ///</summary>
        public static void App_get_MsSms_ExportCSV_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                }
                if (ReturnCode.Trim().Equals("0"))
                {
                    PhoneHistoryDataToCSVClass phonecsvFileInfo = new PhoneHistoryDataToCSVClass();
                    foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                    {
                        if (Item.Key.Trim().Equals("ftpUsrName"))
                        {
                            phonecsvFileInfo.FtpUsrName = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpPwd"))
                        {
                            phonecsvFileInfo.FtpPwd = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpRootDir"))
                        {
                            phonecsvFileInfo.FtpRootDir = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpServerIp"))
                        {
                            phonecsvFileInfo.FtpServerIp = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("ftpPort"))
                        {
                            phonecsvFileInfo.FtpPort = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("fileName"))
                        {
                            phonecsvFileInfo.FileName = Item.Value.ToString();
                        }
                    }
                    HistoryDataToCSVFile = phonecsvFileInfo;
                    Parameters.SendMessage(Parameters.HistoryDataWinHandle, Parameters.WM_GetHistoryDataToCSVResponse, 0, 0);
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("历史数据导出CSV：", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 退出历史查询
        /// </summary>
        /// <returns></returns>
        public static string HistoryRecordQueryExit()
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> HistoryRecordQueryQuitParam = new Dictionary<string, object>();

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                HistoryRecordQueryQuitParam.Add("AllNum", HistoryRecordQueryQuitParam.Count + 1);

                MsgStruct.Msg_Body_Struct HistoryRecordQueryQuitParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_history_record_exit_request, HistoryRecordQueryQuitParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "2.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = HistoryRecordQueryQuitParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        ///<summary>
        ///请求删除IMSI历史记录
        ///</summary>
        /// <param timeStart="2018-05-23 12:34:56"></param>
        /// <param timeEnded="2018-05-23 12:34:56"></param>
        public static string App_history_record_delete_request(string timeStart, string timeEnded)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> historyDeleteParam = new Dictionary<string, object>();
                historyDeleteParam.Add("timeStart", timeStart);
                historyDeleteParam.Add("timeEnded", timeEnded);
                MsgStruct.Msg_Body_Struct historyDeleteParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_history_record_delete_request, historyDeleteParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = historyDeleteParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        ///<summary>
        ///请求删除IMSI历史记录相应
        ///</summary>
        public static void App_history_record_delete_response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string queryTime = string.Empty;
            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("queryTime"))
                    {
                        queryTime = Item.Value.ToString();
                    }
                }

                //成功
                if (ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        ShowMessage("删除IMSI历史数据" + ReturnStr + "，耗时：" + queryTime + "毫秒", 64);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("删除IMSI历史数据" + ReturnStr + "，耗时：" + queryTime + "毫秒", 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("历史数据查询：", ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 捕号上报
        public static void APScannerReportResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            //解析
            try
            {
                //捕号数量
                ScannerData.ReportTotal += 1;
                sbyte SelfUserType = -1;
                DataRow dr = ScannerData.ScannerDataTable.NewRow();
                ScannerData.ScannerDataCapture.SN = resultData.ApInfo.SN;
                ScannerData.ScannerDataCapture.FullName = resultData.ApInfo.Fullname;
                ScannerData.ScannerDataCapture.IP = resultData.ApInfo.IP;
                ScannerData.ScannerDataCapture.Port = resultData.ApInfo.Port.ToString();
                ScannerData.ScannerDataCapture.Type = resultData.ApInfo.Type;

                ScannerData.ScannerDataCapture.Imsi = "";
                ScannerData.ScannerDataCapture.Timestamp = "";
                ScannerData.ScannerDataCapture.UserType = "";
                ScannerData.ScannerDataCapture.Tmsi = "";
                ScannerData.ScannerDataCapture.Imei = "";
                ScannerData.ScannerDataCapture.Rsrp = "";
                ScannerData.ScannerDataCapture.Des = "";

                //判断是否为用户可访问的站点
                string[] _deviceFullName = resultData.ApInfo.Fullname.ToString().Split(new char[] { '.' });
                string _domainName = string.Empty;
                if (_deviceFullName.Length > 0)
                {
                    for (int i = 0; i < _deviceFullName.Length - 1; i++)
                    {
                        if (_domainName.Equals(""))
                        {
                            _domainName = _deviceFullName[i];
                        }
                        else
                        {
                            _domainName += "." + _deviceFullName[i];
                        }
                    }
                }
                //DataRow[] tempdr = BindTreeViewClass.DeviceTreeTable.Select("NodeType='LeafNode' and IsStation='1' and PathName='" + resultData.ApInfo.Fullname + "'");//判断设备
                DataRow[] tempdr = BindTreeViewClass.DeviceTreeTable.Select("NodeType='StructureNode' and IsStation='1' and PathName='" + _domainName + "'");//判断站点
                if (tempdr.Length <= 0) return;
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("id"))
                    {
                        ScannerData.ScannerDataCapture.ID = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("userType"))
                    {
                        if (Item.Value.ToString().Equals("0"))
                        {
                            SelfUserType = 0;
                            ScannerData.ScannerDataCapture.UserType = "白名单";
                        }
                        else if (Item.Value.ToString().Equals("1"))
                        {
                            SelfUserType = 1;
                            ScannerData.ScannerDataCapture.UserType = "黑名单";
                        }
                        else if (Item.Value.ToString().Equals("2"))
                        {
                            SelfUserType = 2;
                            ScannerData.ScannerDataCapture.UserType = "普通用户";
                        }
                    }
                    else if (Item.Key.Trim().Equals("imsi"))
                    {
                        ScannerData.ScannerDataCapture.Imsi = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("tmsi"))
                    {
                        //ScannerData.ScannerDataCapture.Tmsi = Convert.ToInt32(Item.Value.ToString(), 16).ToString();
                        ScannerData.ScannerDataCapture.Tmsi = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("imei"))
                    {
                        ScannerData.ScannerDataCapture.Imei = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("rsrp"))
                    {
                        ScannerData.ScannerDataCapture.Rsrp = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("timestamp"))
                    {
                        ScannerData.ScannerDataCapture.Timestamp = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("des"))
                    {
                        ScannerData.ScannerDataCapture.Des = Item.Value.ToString();
                    }
                }
                //获取号码归属地
                JsonInterFace.PhoneAreaConvertion.Get(JsonInterFace.ScannerData.ScannerDataCapture.Imsi);
                dr[1] = ScannerData.ScannerDataCapture.Imsi;
                dr[2] = ScannerData.ScannerDataCapture.Timestamp;
                dr[3] = ScannerData.ScannerDataCapture.UserType;
                dr[4] = ScannerData.ScannerDataCapture.Tmsi;
                dr[5] = ScannerData.ScannerDataCapture.Imei;
                dr[6] = ScannerData.ScannerDataCapture.Rsrp;
                dr[7] = PhoneAreaConvertion.Country + PhoneAreaConvertion.Operators;
                dr[8] = PhoneAreaConvertion.Country + PhoneAreaConvertion.Location;
                dr[9] = ScannerData.ScannerDataCapture.FullName.Split(new char[] { '.' })[ScannerData.ScannerDataCapture.FullName.Split(new char[] { '.' }).Length - 2] +
                        "." + ScannerData.ScannerDataCapture.FullName.Split(new char[] { '.' })[ScannerData.ScannerDataCapture.FullName.Split(new char[] { '.' }).Length - 1];
                dr[10] = ScannerData.ScannerDataCapture.Des;

                //入栈
                EnqueueInfo(dr);

                //状态机
                FSM.Input(SelfUserType);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 实时上报入栈
        public static void EnqueueInfo(DataRow tempdr)
        {
            lock (ScannerData.Mutex_DbHelper)
            {
                if (ScannerData.ScannerDataTable.Rows.Count < Parameters.ScannerDataControlParameter.Tatol)
                {
                    ScannerData.ScannerDataTable.Rows.Add(tempdr);
                }
                else
                {
                    ScannerData.ScannerDataTable.Rows.RemoveAt(0);
                    ScannerData.ScannerDataTable.Rows.Add(tempdr);
                }
            }
        }
        #endregion

        #region 黑名单追踪上报响应(类继承于ScannerData)
        public static void APMeasReportResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            //解析
            try
            {
                MeasReportBlackList.ScannerDataCapture.SN = resultData.ApInfo.SN;
                MeasReportBlackList.ScannerDataCapture.FullName = resultData.ApInfo.Fullname;
                MeasReportBlackList.ScannerDataCapture.IP = resultData.ApInfo.IP;
                MeasReportBlackList.ScannerDataCapture.Port = resultData.ApInfo.Port.ToString();
                MeasReportBlackList.ScannerDataCapture.SN = resultData.ApInfo.SN;
                MeasReportBlackList.ScannerDataCapture.Type = resultData.ApInfo.Type;

                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("imsi"))
                    {
                        MeasReportBlackList.ScannerDataCapture.Imsi = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("imei"))
                    {
                        MeasReportBlackList.ScannerDataCapture.Imei = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("rsrp"))
                    {
                        MeasReportBlackList.ScannerDataCapture.Rsrp = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("timestamp"))
                    {
                        MeasReportBlackList.ScannerDataCapture.Timestamp = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("direction"))
                    {
                        if (Item.Value.ToString().Equals("0"))
                        {
                            MeasReportBlackList.Direction = "UL";
                        }
                        else if (Item.Value.ToString().Equals("1"))
                        {
                            MeasReportBlackList.Direction = "DL";
                        }
                    }
                    else if (Item.Key.Trim().Equals("tmsi"))
                    {
                        MeasReportBlackList.ScannerDataCapture.Tmsi = Item.Value.ToString();
                    }
                }

                MeasReportBlackList.Input(
                                            MeasReportBlackList.ScannerDataCapture.Imsi,
                                            MeasReportBlackList.ScannerDataCapture.Timestamp,
                                            MeasReportBlackList.ScannerDataCapture.Tmsi,
                                            MeasReportBlackList.ScannerDataCapture.Imei,
                                            MeasReportBlackList.ScannerDataCapture.Rsrp,
                                            MeasReportBlackList.ScannerDataCapture.FullName
                                         );
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("黑名单追踪解析", ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 心跳到服务器
        public static string AppTOServerHeartRequest(string UserName, string WorkGroup)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> HeartParam = new Dictionary<string, object>();
                HeartParam.Add("user", UserName);
                HeartParam.Add("group", WorkGroup);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                HeartParam.Add("AllNum", HeartParam.Count + 1);

                MsgStruct.Msg_Body_Struct HeartParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_heartbeat_request, HeartParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = HeartParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 服务器心跳响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void AppTOServerHeartResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                Parameters.HeartStatu = 1;
                SystemLogsInfo.Input(DateTime.Now.ToString(), "收到服务端[" + RemoteHost + ":" + RemotePort + "]心跳消息", "接收心跳消息", "正常");
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 下载系统日志相关
        /// <summary>
        /// 下载日志请求
        /// </summary>
        /// <param name="UserName">用户名</param>
        /// <param name="PassWord">密码</param>
        /// <param name="timestamp">时间</param>
        /// <param name="InterActiveMode">交互方式(0:默认,1:App 作为FTP服务器)</param>
        /// <param name="ServerAddr">服务器地址，当交互方式为1时有效</param>
        /// <returns></returns>
        public static string APGetLogsRequest(string UserName, string PassWord, string timestamp, string InterActiveMode, string ServerAddr)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GetAPLogsParam = new Dictionary<string, object>();
                GetAPLogsParam.Add("User_name", UserName);
                GetAPLogsParam.Add("Password", PassWord);
                GetAPLogsParam.Add("timestamp", timestamp);
                GetAPLogsParam.Add("ftp_type", InterActiveMode);
                GetAPLogsParam.Add("serverAdd", ServerAddr);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GetAPLogsParam.Add("AllNum", GetAPLogsParam.Count + 1);

                MsgStruct.Msg_Body_Struct GetAPLogsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.Get_Log, GetAPLogsParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = GetAPLogsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        public static void APGetLogsResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string ResourltFlag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    ResourltFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            //授权，允许下载
            if (Resoult.Trim().Equals("0"))
            {
                Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_DownloadSystemLogsResponse, 0, 0);
                SystemLogsInfo.Input(DateTime.Now.ToString(), APResourltErrorType("获到系统日志列表", Resoult, ResourltFlag, Timestamp), "获到系统日志列表", "成功");
            }
            else
            {
                SystemLogsInfo.Input(DateTime.Now.ToString(), APResourltErrorType("获到系统日志列表", Resoult, ResourltFlag, Timestamp), "获到系统日志列表", "失败");
            }
        }
        #endregion

        #region GSM,CDMA设备管理相关

        /// <summary>
        /// GSM基本参数设置
        /// </summary>
        /// <returns></returns>
        public static string GSMAPSettingRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, Dictionary<string, string> ParametersLists, string MsgType, string Carrier)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMParameterSetting = new Dictionary<string, object>();
                GSMParameterSetting.Add("sys", Carrier);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMParameterSetting.Add("AllNum", GSMParameterSetting.Count + 1);

                MsgStruct.Msg_Body_Struct GSMParameterBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMParameterSetting);

                GSMParameterBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct ItemValue = new MsgStruct.Name_DIC_Struct();

                foreach (KeyValuePair<string, string> Item in ParametersLists)
                {
                    ItemValue.name = MsgType;
                    ItemValue.dic.Add(Item.Key, Item.Value);
                }

                GSMParameterBody.n_dic.Add(ItemValue);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMParameterBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSM,CDMA确认上报查询信息相关类
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        private class CellInfoPara
        {
            public string ID = string.Empty;
            public string bFapNbCellNum = string.Empty;
            public string bGCId = string.Empty;
            public string bPLMNId = string.Empty;
            public string cRSRP = string.Empty;
            public string wTac = string.Empty;
            public string wPhyCellId = string.Empty;
            public string wUARFCN = string.Empty;
            public string cRefTxPower = string.Empty;
            public string bNbCellNum = string.Empty;
            public string bC2 = string.Empty;
            public string bReserved1 = string.Empty;
            public string stNbCell = string.Empty;
            public List<ItemCellInfoPara> ItemCellInfo = null;

            public CellInfoPara()
            {
                if (ItemCellInfo == null)
                {
                    ItemCellInfo = new List<ItemCellInfoPara>();
                }
            }

            public class ItemCellInfoPara
            {
                public string ItemID = string.Empty;
                public string IndexPtr = string.Empty;
                public string ItemwUarfcn = string.Empty;
                public string ItemwPhyCellId = string.Empty;
                public string ItemcRSRP = string.Empty;
                public string ItemcC1 = string.Empty;
                public string ItembC2 = string.Empty;
            }
        }

        /// <summary>
        /// GSM,CDMA 上报，查询，设置，确认信息处理
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void GSMAPSettingResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string parentFullPathName = resultData.ApInfo.Fullname;
            string DeviceName = string.Empty;
            try
            {
                DeviceName = parentFullPathName.Split(new char[] { '.' })[parentFullPathName.Split(new char[] { '.' }).Length - 2] +
                    "." + parentFullPathName.Split(new char[] { '.' })[parentFullPathName.Split(new char[] { '.' }).Length - 1];
            }
            catch
            {
                DeviceName = "";
            }
            string InnerType = resultData.ApInfo.Type.Replace("_", "-");
            string carrier = string.Empty;
            string MsgType = string.Empty;
            string MsgTypeContent = string.Empty;
            string CnfInd = string.Empty;
            string CnflndContent = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key == "sys")
                {
                    carrier = Item.Value.ToString();
                    break;
                }
            }

            foreach (MsgStruct.Name_DIC_Struct Item in resultData.Body.n_dic)
            {
                //确认信息
                if (Item.name.Equals(SendPktType.SEND_REQ_CNF.ToString()))
                {
                    foreach (KeyValuePair<string, object> ItemValue in Item.dic)
                    {
                        if (ItemValue.Key == "cnfType")
                        {
                            MsgType = ItemValue.Value.ToString();
                        }
                        else if (ItemValue.Key == "cnfInd")
                        {
                            CnfInd = ItemValue.Value.ToString();
                            if (CnfInd == "0")
                            {
                                CnflndContent = "成功";
                            }
                            else
                            {
                                CnflndContent = "失败";
                            }
                        }
                    }

                    if (InnerType != DeviceType.CDMA && InnerType != DeviceType.GSMV2)
                    {
                        foreach (KeyValuePair<string, string> ItemValue in GetNEnumValueDes(typeof(RecvPktType)))
                        {
                            if (MsgType == ItemValue.Key)
                            {
                                MsgTypeContent = ItemValue.Value;
                                break;
                            }
                        }
                    }
                    else
                    {
                        MsgType = (Convert.ToInt32((CDMAMsgType)Enum.Parse(typeof(CDMAMsgType), MsgType))).ToString();

                        foreach (KeyValuePair<string, string> ItemValue in GetNEnumValueDes(typeof(CDMAMsgType)))
                        {
                            if (MsgType == ItemValue.Key)
                            {
                                MsgTypeContent = ItemValue.Value;
                                break;
                            }
                        }
                    }

                    if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_LIBRARY_REG_DELALL))
                    {
                        Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_GSMLibraryRegDelAllResponse, 0, 0);
                    }

                    //提示
                    if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_SYS_PARA) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]系统参数设置 ------------ [成功]");
                        return;
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_SYS_PARA) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]系统参数设置 ------------ [失败]");
                        return;
                    }

                    if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_SYS_OPTION) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]系统选项设置 ------------ [成功]");
                        return;
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_SYS_OPTION) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]系统选项设置 ------------ [失败]");
                        return;
                    }

                    if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_RF_PARA) && CnfInd == "0")
                    {
                        //GSM激活
                        if (Parameters.ConfigType == "Active")
                        {
                            switch (JsonInterFace.GSMCarrierParameter.CarrierTotal)
                            {
                                //载波一
                                case 0:
                                    carrier = "0";
                                    Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_GSMCarrierActionResponse, 0, 0);
                                    SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, null, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon, true);
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]载波(1)激活 ------------ [" + CnflndContent + "]", "设备激活", CnflndContent);
                                    new Thread(() =>
                                    {
                                        if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                        {
                                            ShowMessage("设备[" + parentFullPathName + "]载波(1)激活 ------------ [" + CnflndContent + "]", 64);
                                        }
                                    }).Start();
                                    break;
                                //载波二
                                case 1:
                                    carrier = "1";
                                    Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_GSMCarrierActionResponse, 0, 0);
                                    SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, null, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon, true);
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]载波(2)激活 ------------ [" + CnflndContent + "]", "设备激活", CnflndContent);
                                    new Thread(() =>
                                    {
                                        if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                        {
                                            ShowMessage("设备[" + parentFullPathName + "]载波(2)激活 ------------ [" + CnflndContent + "]", 64);
                                        }
                                    }).Start();
                                    break;
                                //两个载波同时
                                case 2:
                                    JsonInterFace.GSMCarrierParameter.SubmitCount++;
                                    if (JsonInterFace.GSMCarrierParameter.SubmitCount >= JsonInterFace.GSMCarrierParameter.CarrierTotal)
                                    {
                                        carrier = "2";
                                        Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_GSMCarrierActionResponse, 0, 0);
                                        SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, new NodeIcon().LeafAllReadyNodeIcon, null, null, true);
                                        SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]双载波激活 ------------ [" + CnflndContent + "]", "设备激活", CnflndContent);
                                        new Thread(() =>
                                        {
                                            if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                            {
                                                ShowMessage("设备[" + parentFullPathName + "]双载波激活 ------------ [" + CnflndContent + "]", 64);
                                            }
                                        }).Start();

                                    }
                                    break;
                            }

                            //修改属性
                            if (CnfInd == "0")
                            {
                                for (int i = 0; i < APATTributesLists.Count; i++)
                                {
                                    if (parentFullPathName == APATTributesLists[i].FullName)
                                    {
                                        JsonInterFace.APATTributesLists[i].Radio = "1";
                                        break;
                                    }
                                }
                            }

                            //GSM激活操作完成
                            lock (JsonInterFace.ActionResultStatus.FinishedLock)
                            {
                                JsonInterFace.ActionResultStatus.Finished = true;
                            }
                        }
                        //GSM去激活
                        else if (Parameters.ConfigType == "UnActive")
                        {
                            switch (JsonInterFace.GSMCarrierParameter.CarrierTotal)
                            {
                                //载波一
                                case 0:
                                    carrier = "0";
                                    SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, null, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon, false);
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]载波(1)去激活 ------------ [" + CnflndContent + "]", "设备去激活", CnflndContent);
                                    Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_GSMCarrierActionResponse, 0, 0);
                                    new Thread(() =>
                                    {
                                        if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                        {
                                            ShowMessage("设备[" + parentFullPathName + "]载波(1)去激活 ------------ [" + CnflndContent + "]", 64);
                                        }
                                    }).Start();
                                    break;
                                //载波二
                                case 1:
                                    carrier = "1";
                                    SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, null, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon, false);
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]载波(2)去激活 ------------ [" + CnflndContent + "]", "设备去激活", CnflndContent);
                                    Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_GSMCarrierActionResponse, 0, 0);

                                    new Thread(() =>
                                    {
                                        if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                        {
                                            ShowMessage("设备[" + parentFullPathName + "]载波(2)去激活 ------------ [" + CnflndContent + "]", 64);
                                        }
                                    }).Start();
                                    break;
                                //两个载波同时
                                case 2:
                                    JsonInterFace.GSMCarrierParameter.SubmitCount++;
                                    if (JsonInterFace.GSMCarrierParameter.SubmitCount >= JsonInterFace.GSMCarrierParameter.CarrierTotal)
                                    {
                                        carrier = "2";
                                        SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, new NodeIcon().LeafNoActiveNodeIcon, null, null, false);
                                        SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]双载波去激活 ------------ [" + CnflndContent + "]", "设备去激活", CnflndContent);
                                        Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_GSMCarrierActionResponse, 0, 0);
                                        new Thread(() =>
                                        {
                                            if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                            {
                                                ShowMessage("设备[" + parentFullPathName + "]双载波去激活 ------------ [" + CnflndContent + "]", 64);
                                            }
                                        }).Start();
                                    }
                                    break;
                            }

                            //修改属性
                            if (CnfInd == "0")
                            {
                                for (int i = 0; i < APATTributesLists.Count; i++)
                                {
                                    if (parentFullPathName == APATTributesLists[i].FullName)
                                    {
                                        JsonInterFace.APATTributesLists[i].Radio = "0";
                                        break;
                                    }
                                }
                            }

                            //GSM去激活操作完成
                            lock (JsonInterFace.ActionResultStatus.FinishedLock)
                            {
                                JsonInterFace.ActionResultStatus.Finished = true;
                            }
                        }
                        //常规配置
                        else if (Parameters.ConfigType == "ParameterSetting")
                        {
                            ResultMessageList.AppendLine("设备[" + parentFullPathName + "]射频参数设置 ------------ [成功]");
                            return;
                        }
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_RF_PARA) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]射频参数设置 ------------ [失败]");
                        return;
                    }

                    if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_REG_MODE) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]注册工作模式设置 ------------ [成功]");
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_REG_MODE) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]注册工作模式设置 ------------ [失败]");
                    }

                    if (JsonInterFace.GSMLibyraryRegAdd.ConfigType != "GSMIMSIMultiInput")
                    {
                        if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_LIBRARY_REG_ADD) && CnfInd == "0")
                        {
                            ResultMessageList.AppendLine("设备[" + parentFullPathName + "]添加白名单 ------------ [成功]");
                        }
                        else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_LIBRARY_REG_ADD) && CnfInd != "0")
                        {
                            ResultMessageList.AppendLine("设备[" + parentFullPathName + "]添加白名单 ------------ [重复]");
                        }
                    }
                    else if (JsonInterFace.GSMLibyraryRegAdd.ConfigType == "GSMIMSIMultiInput")
                    {
                        if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_LIBRARY_REG_ADD) && CnfInd == "0")
                        {
                            if (JsonInterFace.GSMLibyraryRegAdd.Flag == 1)
                            {
                                JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]添加白名单 IMSI:(" + JsonInterFace.GSMLibyraryRegAdd.IMSIList[JsonInterFace.GSMLibyraryRegAdd.StepValue].Split(new char[] { ',' })[0] + ") ------ [成功]", "添加白名单", "成功");
                            }
                            else if (JsonInterFace.GSMLibyraryRegAdd.Flag == 2)
                            {
                                JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]添加白名单 IMEI:(" + JsonInterFace.GSMLibyraryRegAdd.IMSIList[JsonInterFace.GSMLibyraryRegAdd.StepValue].Split(new char[] { ',' })[1] + ") ------ [成功]", "添加白名单", "成功");
                            }
                        }
                        else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_LIBRARY_REG_ADD) && CnfInd != "0")
                        {
                            if (JsonInterFace.GSMLibyraryRegAdd.Flag == 1)
                            {
                                JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]添加白名单 IMSI:(" + JsonInterFace.GSMLibyraryRegAdd.IMSIList[JsonInterFace.GSMLibyraryRegAdd.StepValue].Split(new char[] { ',' })[0] + ") ------ [重复]", "添加白名单", "重复");
                            }
                            else if (JsonInterFace.GSMLibyraryRegAdd.Flag == 2)
                            {
                                JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]添加白名单 IMEI:(" + JsonInterFace.GSMLibyraryRegAdd.IMSIList[JsonInterFace.GSMLibyraryRegAdd.StepValue].Split(new char[] { ',' })[1] + ") ------ [重复]", "添加白名单", "重复");
                            }
                        }
                        return;
                    }

                    if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_LIBRARY_REG_QUERY) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]查询白名单 ------------ [成功]");
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_LIBRARY_REG_QUERY) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]查询白名单 ------------ [失败]");
                    }

                    if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_LIBRARY_REG_DELALL) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]白名单清空 ------------ [成功]");
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_LIBRARY_REG_DELALL) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]白名单清空 ------------ [失败]");
                    }

                    //GSM 短信息设置响应
                    //短信息编码方案
                    if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_TEST_CMD) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]短信息编码方案设置 ------------ [成功]");
                        return;
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_TEST_CMD) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]短信息编码方案设置 ------------ [失败]");
                        return;
                    }

                    //短信中心号
                    if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_SMS_RPOA) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]短信息中心号码设置 ------------ [成功]");
                        return;
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_SMS_RPOA) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]短信息中心号码设置 ------------ [失败]");
                        return;
                    }

                    //短信原叫号
                    if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_SMS_TPOA) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]短信息原叫号码设置 ------------ [成功]");
                        return;
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_SMS_TPOA) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]短信息原叫号码设置 ------------ [失败]");
                        return;
                    }

                    //短信发送时间
                    if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_SMS_SCTS) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]短信息发送时间设置 ------------ [成功]");
                        return;
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_SMS_SCTS) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]短信息发送时间设置 ------------ [失败]");
                        return;
                    }

                    //短信息内容发送
                    if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_SMS_DATA) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]短信息发送 ------------ [成功]");

                        //恢复默认
                        JsonInterFace.GSMSMSParameter.CarrierOne = false;
                        JsonInterFace.GSMSMSParameter.CarrierTwo = false;
                        JsonInterFace.GSMSMSParameter.GSmsData = null;
                        JsonInterFace.GSMSMSParameter.GSmsRpoa = null;
                        JsonInterFace.GSMSMSParameter.GSmsTpoa = null;
                        JsonInterFace.GSMSMSParameter.GSmsScts = null;
                        JsonInterFace.GSMSMSParameter.AutoSendtiny = null;
                        JsonInterFace.GSMSMSParameter.AutoFilterSMStiny = null;
                        JsonInterFace.GSMSMSParameter.DelayTime = null;
                        JsonInterFace.GSMSMSParameter.SmsCodingtiny = null;
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(RecvPktType.RECV_SMS_DATA) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]短信息发送 ------------ [失败]");
                    }

                    //[CDMA GSMV2 确认消息]
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONTROL_FAP_REBOOT_MSG) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]重启 ------------ [成功]");
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONTROL_FAP_REBOOT_MSG) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]重启 ------------ [失败]");
                    }
                    //GSMV2,CDMA激话
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONTROL_FAP_RADIO_ON_MSG) && CnfInd == "0")
                    {
                        //CDMA 激活成功
                        if (resultData.ApInfo.Type == DeviceType.CDMA)
                        {
                            carrier = "0";
                            SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, new NodeIcon().LeafAllReadyNodeIcon, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon, true);
                            SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]激活 ------------ [" + CnflndContent + "]", "设备激活", CnflndContent);
                            new Thread(() =>
                            {
                                if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                {
                                    ShowMessage("设备[" + parentFullPathName + "]激活 ------------ [" + CnflndContent + "]", 64);
                                }
                            }).Start();

                            //修改属性
                            if (CnfInd == "0")
                            {
                                for (int i = 0; i < APATTributesLists.Count; i++)
                                {
                                    if (parentFullPathName == APATTributesLists[i].FullName)
                                    {
                                        JsonInterFace.APATTributesLists[i].Radio = "1";
                                        break;
                                    }
                                }
                            }

                            //CDMA激活操作完成
                            lock (JsonInterFace.ActionResultStatus.FinishedLock)
                            {
                                JsonInterFace.ActionResultStatus.Finished = true;
                            }
                        }
                        //GSM-V2 激活成功
                        else if (resultData.ApInfo.Type == DeviceType.GSM_V2)
                        {
                            switch (JsonInterFace.GSMV2CarrierParameter.CarrierTotal)
                            {
                                //载波一
                                case 0:
                                    carrier = "0";
                                    SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, null, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon, true);
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]载波(1)激活 ------------ [" + CnflndContent + "]", "设备激活", CnflndContent);

                                    //修改属性
                                    if (CnfInd == "0")
                                    {
                                        for (int i = 0; i < APATTributesLists.Count; i++)
                                        {
                                            if (parentFullPathName == APATTributesLists[i].FullName)
                                            {
                                                JsonInterFace.APATTributesLists[i].CarrierOne = true;
                                                break;
                                            }
                                        }
                                    }
                                    new Thread(() =>
                                    {
                                        if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                        {
                                            ShowMessage("设备[" + parentFullPathName + "]载波(1)激活 ------------ [" + CnflndContent + "]", 64);
                                        }
                                    }).Start();
                                    break;
                                //载波二
                                case 1:
                                    carrier = "1";
                                    SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, null, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon, true);
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]载波(2)激活 ------------ [" + CnflndContent + "]", "设备激活", CnflndContent);

                                    //修改属性
                                    if (CnfInd == "0")
                                    {
                                        for (int i = 0; i < APATTributesLists.Count; i++)
                                        {
                                            if (parentFullPathName == APATTributesLists[i].FullName)
                                            {
                                                JsonInterFace.APATTributesLists[i].CarrierTwo = true;
                                                break;
                                            }
                                        }
                                    }

                                    new Thread(() =>
                                    {
                                        if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                        {
                                            ShowMessage("设备[" + parentFullPathName + "]载波(2)激活 ------------ [" + CnflndContent + "]", 64);
                                        }
                                    }).Start();
                                    break;
                                //两个载波同时
                                case 2:
                                    JsonInterFace.GSMV2CarrierParameter.SubmitCount++;
                                    if (JsonInterFace.GSMV2CarrierParameter.SubmitCount >= JsonInterFace.GSMV2CarrierParameter.CarrierTotal)
                                    {
                                        carrier = "2";
                                        SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, new NodeIcon().LeafAllReadyNodeIcon, null, null, true);
                                        SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]双载波激活 ------------ [" + CnflndContent + "]", "设备激活", CnflndContent);

                                        //修改属性
                                        if (CnfInd == "0")
                                        {
                                            for (int i = 0; i < APATTributesLists.Count; i++)
                                            {
                                                if (parentFullPathName == APATTributesLists[i].FullName)
                                                {
                                                    JsonInterFace.APATTributesLists[i].CarrierOne = true;
                                                    JsonInterFace.APATTributesLists[i].CarrierTwo = true;
                                                    break;
                                                }
                                            }
                                        }

                                        new Thread(() =>
                                        {
                                            if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                            {
                                                ShowMessage("设备[" + parentFullPathName + "]双载波激活 ------------ [" + CnflndContent + "]", 64);
                                            }
                                        }).Start();
                                    }
                                    break;
                            }

                            //GSMV2激活操作完成
                            lock (JsonInterFace.ActionResultStatus.FinishedLock)
                            {
                                JsonInterFace.ActionResultStatus.Finished = true;
                            }
                        }
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONTROL_FAP_RADIO_ON_MSG) && CnfInd != "0")
                    {
                        //CDMA 激活失败
                        if (resultData.ApInfo.Type == DeviceType.CDMA)
                        {
                            SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]激活 ------------ [" + CnflndContent + "]", "设备激活", CnflndContent);
                            new Thread(() =>
                            {
                                if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                {
                                    ShowMessage("设备[" + parentFullPathName + "]激活 ------------ [" + CnflndContent + "]", 48);
                                }
                            }).Start();

                            //CDMA激活操作完成
                            lock (JsonInterFace.ActionResultStatus.FinishedLock)
                            {
                                JsonInterFace.ActionResultStatus.Finished = true;
                            }
                        }
                        //GSM-V2 激活失败
                        else if (resultData.ApInfo.Type == DeviceType.GSM_V2)
                        {
                            switch (JsonInterFace.GSMV2CarrierParameter.CarrierTotal)
                            {
                                //载波一
                                case 0:
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]载波(1)激活 ------------ [" + CnflndContent + "]", "设备激活", CnflndContent);
                                    new Thread(() =>
                                    {
                                        if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                        {
                                            ShowMessage("设备[" + parentFullPathName + "]载波(1)激活 ------------ [" + CnflndContent + "]", 48);
                                        }
                                    }).Start();
                                    break;
                                //载波二
                                case 1:
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]载波(2)激活 ------------ [" + CnflndContent + "]", "设备激活", CnflndContent);
                                    new Thread(() =>
                                    {
                                        if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                        {
                                            ShowMessage("设备[" + parentFullPathName + "]载波(2)激活 ------------ [" + CnflndContent + "]", 48);
                                        }
                                    }).Start();
                                    break;
                                //两个载波同时
                                case 2:
                                    JsonInterFace.GSMV2CarrierParameter.SubmitCount++;
                                    if (JsonInterFace.GSMV2CarrierParameter.SubmitCount >= JsonInterFace.GSMV2CarrierParameter.CarrierTotal)
                                    {
                                        SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]双载波激活 ------------ [" + CnflndContent + "]", "设备激活", CnflndContent);
                                        new Thread(() =>
                                        {
                                            if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                            {
                                                ShowMessage("设备[" + parentFullPathName + "]双载波激活 ------------ [" + CnflndContent + "]", 48);
                                            }
                                        }).Start();
                                    }
                                    break;
                            }

                            //GSMV2激活操作完成
                            lock (JsonInterFace.ActionResultStatus.FinishedLock)
                            {
                                JsonInterFace.ActionResultStatus.Finished = true;
                            }
                        }
                    }
                    //GSMV2,CDMA去激话
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONTROL_FAP_RADIO_OFF_MSG) && CnfInd == "0")
                    {
                        //CDMA 去激活成功
                        if (resultData.ApInfo.Type == DeviceType.CDMA)
                        {
                            carrier = "0";
                            SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, new NodeIcon().LeafNoActiveNodeIcon, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon, false);
                            SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]去激活 ------------ [" + CnflndContent + "]", "设备去激活", CnflndContent);
                            new Thread(() =>
                            {
                                if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                {
                                    ShowMessage("设备[" + parentFullPathName + "]去激活 ------------ [" + CnflndContent + "]", 64);
                                }
                            }).Start();

                            //修改属性
                            if (CnfInd == "0")
                            {
                                for (int i = 0; i < APATTributesLists.Count; i++)
                                {
                                    if (parentFullPathName == APATTributesLists[i].FullName)
                                    {
                                        JsonInterFace.APATTributesLists[i].Radio = "0";
                                        break;
                                    }
                                }
                            }

                            //CDMA激活操作完成
                            lock (JsonInterFace.ActionResultStatus.FinishedLock)
                            {
                                JsonInterFace.ActionResultStatus.Finished = true;
                            }
                        }
                        //GSM-V2 去激活成功
                        else if (resultData.ApInfo.Type == DeviceType.GSM_V2)
                        {
                            switch (JsonInterFace.GSMV2CarrierParameter.CarrierTotal)
                            {
                                //载波一
                                case 0:
                                    carrier = "0";
                                    SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, null, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon, false);
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]载波(1)去激活 ------------ [" + CnflndContent + "]", "设备去激活", CnflndContent);

                                    //修改属性
                                    if (CnfInd == "0")
                                    {
                                        for (int i = 0; i < APATTributesLists.Count; i++)
                                        {
                                            if (parentFullPathName == APATTributesLists[i].FullName)
                                            {
                                                JsonInterFace.APATTributesLists[i].CarrierOne = false;
                                                break;
                                            }
                                        }
                                    }

                                    new Thread(() =>
                                    {
                                        if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                        {
                                            ShowMessage("设备[" + parentFullPathName + "]载波(1)去激活 ------------ [" + CnflndContent + "]", 64);
                                        }
                                    }).Start();
                                    break;
                                //载波二
                                case 1:
                                    carrier = "1";
                                    SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, null, new NodeIcon().Carrier_One_ActiveIcon, new NodeIcon().Carrier_Two_ActiveIcon, false);
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]载波(2)去激活 ------------ [" + CnflndContent + "]", "设备去激活", CnflndContent);

                                    //修改属性
                                    if (CnfInd == "0")
                                    {
                                        for (int i = 0; i < APATTributesLists.Count; i++)
                                        {
                                            if (parentFullPathName == APATTributesLists[i].FullName)
                                            {
                                                JsonInterFace.APATTributesLists[i].CarrierTwo = false;
                                                break;
                                            }
                                        }
                                    }

                                    new Thread(() =>
                                    {
                                        if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                        {
                                            ShowMessage("设备[" + parentFullPathName + "]载波(2)去激活 ------------ [" + CnflndContent + "]", 64);
                                        }
                                    }).Start();
                                    break;
                                //两个载波同时
                                case 2:
                                    JsonInterFace.GSMV2CarrierParameter.SubmitCount++;
                                    if (JsonInterFace.GSMV2CarrierParameter.SubmitCount >= JsonInterFace.GSMV2CarrierParameter.CarrierTotal)
                                    {
                                        carrier = "2";
                                        SettingDeviceActiveStatus(JsonInterFace.UsrdomainData, parentFullPathName, carrier, new NodeIcon().LeafNoActiveNodeIcon, null, null, false);
                                        SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]双载波去激活 ------------ [" + CnflndContent + "]", "设备去激活", CnflndContent);

                                        //修改属性
                                        if (CnfInd == "0")
                                        {
                                            for (int i = 0; i < APATTributesLists.Count; i++)
                                            {
                                                if (parentFullPathName == APATTributesLists[i].FullName)
                                                {
                                                    JsonInterFace.APATTributesLists[i].CarrierOne = false;
                                                    JsonInterFace.APATTributesLists[i].CarrierTwo = false;
                                                    break;
                                                }
                                            }
                                        }

                                        new Thread(() =>
                                        {
                                            if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                            {
                                                ShowMessage("设备[" + parentFullPathName + "]双载波去激活 ------------ [" + CnflndContent + "]", 64);
                                            }
                                        }).Start();
                                    }
                                    break;
                            }

                            //GSMV2去激活操作完成
                            lock (JsonInterFace.ActionResultStatus.FinishedLock)
                            {
                                JsonInterFace.ActionResultStatus.Finished = true;
                            }
                        }
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONTROL_FAP_RADIO_OFF_MSG) && CnfInd != "0")
                    {
                        //CDMA 去激活失败
                        if (resultData.ApInfo.Type == DeviceType.CDMA)
                        {
                            SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]去激活 ------------ [" + CnflndContent + "]", "设备去激活", CnflndContent);
                            new Thread(() =>
                            {
                                if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                {
                                    ShowMessage("设备[" + parentFullPathName + "]去激活 ------------ [" + CnflndContent + "]", 48);
                                }
                            }).Start();

                            //CDMA激活操作完成
                            lock (JsonInterFace.ActionResultStatus.FinishedLock)
                            {
                                JsonInterFace.ActionResultStatus.Finished = true;
                            }
                        }
                        //GSM-V2 去激活失败
                        else if (resultData.ApInfo.Type == DeviceType.GSM_V2)
                        {
                            switch (JsonInterFace.GSMV2CarrierParameter.CarrierTotal)
                            {
                                //载波一
                                case 0:
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]载波(1)去激活 ------------ [" + CnflndContent + "]", "设备去激活", CnflndContent);
                                    new Thread(() =>
                                    {
                                        if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                        {
                                            ShowMessage("设备[" + parentFullPathName + "]载波(1)去激活 ------------ [" + CnflndContent + "]", 48);
                                        }
                                    }).Start();
                                    break;
                                //载波二
                                case 1:
                                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]载波(2)去激活 ------------ [" + CnflndContent + "]", "设备去激活", CnflndContent);
                                    new Thread(() =>
                                    {
                                        if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                        {
                                            ShowMessage("设备[" + parentFullPathName + "]载波(2)去激活 ------------ [" + CnflndContent + "]", 48);
                                        }
                                    }).Start();
                                    break;
                                //两个载波同时
                                case 2:
                                    JsonInterFace.GSMV2CarrierParameter.SubmitCount++;
                                    if (JsonInterFace.GSMV2CarrierParameter.SubmitCount >= JsonInterFace.GSMV2CarrierParameter.CarrierTotal)
                                    {
                                        SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "]双载波去激活 ------------ [" + CnflndContent + "]", "设备去激活", CnflndContent);
                                        new Thread(() =>
                                        {
                                            if (JsonInterFace.ActionResultStatus.ConfigType != "APVolumeActive" && JsonInterFace.ActionResultStatus.ConfigType != "APVolumeUnActive")
                                            {
                                                ShowMessage("设备[" + parentFullPathName + "]双载波去激活 ------------ [" + CnflndContent + "]", 48);
                                            }
                                        }).Start();
                                    }
                                    break;
                            }

                            //GSMV2激活操作完成
                            lock (JsonInterFace.ActionResultStatus.FinishedLock)
                            {
                                JsonInterFace.ActionResultStatus.Finished = true;
                            }
                        }
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONFIG_FAP_MSG) && CnfInd == "0")
                    {
                        if (Parameters.ActionType == "Delete All")
                        {
                            ShowMessage("清空名单成功", 64);
                            //ResultMessageList.AppendLine("设备[" + parentFullPathName + "]IMSI " + Parameters.ActionType + " ------------ [成功]");
                        }
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]小区参数更新 ------------ [成功]");
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONFIG_FAP_MSG) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]小区参数更新 ------------ [失败]");
                    }
                    //复位
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONTROL_FAP_RESET_MSG) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]复位 ------------ [成功]");
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONTROL_FAP_RESET_MSG) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]复位 ------------ [失败]");
                    }
                    //多载波设置
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONFIG_CDMA_CARRIER_MSG) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]多载波参数设置 ------------ [成功]");
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONFIG_CDMA_CARRIER_MSG) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]多载波参数设置 ------------ [失败]");
                    }
                    //CDMA IMSI配置
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONFIG_IMSI_MSG_V3_ID) && CnfInd == "0")
                    {
                        //ShowMessage("清空名单成功", 64);
                        JsonInterFace.ActionResultStatus.ResoultStatus = CnfInd;
                        lock (JsonInterFace.ActionResultStatus.FinishedLock)
                        {
                            JsonInterFace.ActionResultStatus.Finished = true;
                        }
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]IMSI " + Parameters.ActionType + " ------------ [成功]");
                        Parameters.ActionType = "";
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONFIG_IMSI_MSG_V3_ID) && CnfInd != "0")
                    {
                        JsonInterFace.ActionResultStatus.ResoultStatus = CnfInd;
                        lock (JsonInterFace.ActionResultStatus.FinishedLock)
                        {
                            JsonInterFace.ActionResultStatus.Finished = true;
                        }
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]IMSI " + Parameters.ConfigType + " ------------ [失败]");
                        Parameters.ActionType = "";
                    }
                    //GSMV2发送短信
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONFIG_SMS_CONTENT_MSG) && CnfInd == "0")
                    {
                        ShowMessage("发短信成功", 64);
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]发短信 ------------ [成功]");
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.CONFIG_SMS_CONTENT_MSG) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]发短信 " + Parameters.ConfigType + " ------------ [失败]");
                    }
                    //GSMV2上报UE主叫信息
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.UE_ORM_REPORT_MSG) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]截取信息 ------------ [成功]");
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.UE_ORM_REPORT_MSG) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]截取信息 " + Parameters.ConfigType + " ------------ [失败]");
                    }
                    //CDMA短信UEID配置
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.PAGE_UE_MSG) && CnfInd == "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]短信UEID配置 ------------ [成功]");
                    }
                    else if (Convert.ToInt32(MsgType) == Convert.ToInt32(CDMAMsgType.PAGE_UE_MSG) && CnfInd != "0")
                    {
                        ResultMessageList.AppendLine("设备[" + parentFullPathName + "]短信UEID配置 ------------ [失败]");
                    }

                    //提示信息
                    if (ResultMessageList.Length > 0)
                    {
                        JsonInterFace.SystemLogsInfo.Input(DateTime.Now.ToString(), ResultMessageList.ToString(), MsgTypeContent, CnflndContent);
                        StringBuilder ResultMessage = ResultMessageList;
                        new Thread(() =>
                        {
                            if (Parameters.ConfigType != "APVolumeUnActive" && Parameters.ConfigType != "APVolumeActive")
                            {
                                if (ResultMessage != null)
                                {
                                    if (ResultMessage.ToString() != "")
                                    {
                                        if (CnfInd == "0")
                                        {
                                            ShowMessage(ResultMessage.ToString(), 64);
                                        }
                                        else if (CnfInd == "1")
                                        {
                                            ShowMessage(ResultMessage.ToString(), 16);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                lock (JsonInterFace.ActionResultStatus.FinishedLock)
                                {
                                    JsonInterFace.ActionResultStatus.Finished = true;
                                }
                            }
                        }).Start();

                        ResultMessageList.Clear();
                    }
                }
                //GSM IMSI IMEI登录库白名单信息查询
                else if (Item.name.Equals(SendPktType.SEND_LIBRARY_REG.ToString()))
                {
                    string _InfoType = string.Empty;
                    string _Info = string.Empty;
                    foreach (KeyValuePair<string, object> ItemValue in Item.dic)
                    {
                        if (ItemValue.Key == "type")
                        {
                            _InfoType = ItemValue.Value.ToString();
                        }
                        else if (ItemValue.Key == "gLibrary")
                        {
                            _Info = ItemValue.Value.ToString();
                        }
                    }

                    if (_InfoType == "IMSI")
                    {
                        GSMLibyraryRegQuery.LibraryRegIMSITab.Rows.Clear();
                        DataRow dr = GSMLibyraryRegQuery.LibraryRegIMSITab.NewRow();
                        dr[0] = _Info;
                        GSMLibyraryRegQuery.LibraryRegIMSITab.Rows.Add(dr);
                        Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_GSMIMSILibraryRegQueryResponse, 0, 0);
                    }
                    else if (_InfoType == "IMEI")
                    {
                        GSMLibyraryRegQuery.LibraryRegIMEITab.Rows.Clear();
                        DataRow dr = GSMLibyraryRegQuery.LibraryRegIMEITab.NewRow();
                        dr[0] = _Info;
                        GSMLibyraryRegQuery.LibraryRegIMEITab.Rows.Add(dr);
                        Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_GSMIMEILibraryRegQueryResponse, 0, 0);
                    }
                    Thread.Sleep(50);
                }
                //GSM捕号上报(HJT)
                else if (Item.name.Equals(SendPktType.SEND_UE_INFO.ToString()))
                {
                    if (LoginFinish)
                    {
                        string ueImsi = "";
                        string ueImei = "";
                        string ueMsisdn = "";
                        string uePwr = "";
                        string UeRegtype = "";
                        string ueQueryResult = "";
                        string ueTmsi = "";
                        string ueLlac = "";
                        string ueSlac = "";
                        string UserType = "";
                        string Des = "";
                        string DTime = DateTime.Now.ToString();
                        sbyte SelfUserType = -1;

                        //捕号数量
                        ScannerData.ReportTotal += 1;

                        foreach (KeyValuePair<string, object> ItemValue in Item.dic)
                        {
                            if (ItemValue.Key == "ueImsi")
                            {
                                ueImsi = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key.Trim().Equals("userType"))
                            {
                                if (ItemValue.Value.ToString().Equals("0"))
                                {
                                    SelfUserType = 0;
                                    UserType = "白名单";
                                }
                                else if (ItemValue.Value.ToString().Equals("1"))
                                {
                                    SelfUserType = 1;
                                    UserType = "黑名单";
                                }
                                else if (ItemValue.Value.ToString().Equals("2"))
                                {
                                    SelfUserType = 2;
                                    UserType = "普通用户";
                                }
                            }
                            else if (ItemValue.Key == "ueImei")
                            {
                                ueImei = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "ueMsisdn")
                            {
                                ueMsisdn = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "uePwr")
                            {
                                uePwr = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "UeRegtype")
                            {
                                UeRegtype = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "ueQueryResult")
                            {
                                ueQueryResult = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "ueTmsi")
                            {
                                ueTmsi = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "ueLlac")
                            {
                                ueLlac = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "ueSlac")
                            {
                                ueSlac = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "des")
                            {
                                Des = ItemValue.Value.ToString();
                            }
                        }

                        GSMUEInformationParameter.UEInfoInput(
                                                                ueImsi,
                                                                ueImei,
                                                                ueMsisdn,
                                                                uePwr,
                                                                UeRegtype,
                                                                ueQueryResult,
                                                                ueTmsi,
                                                                ueLlac,
                                                                ueSlac,
                                                                DTime,
                                                                DeviceName,
                                                                UserType,
                                                                Des
                                                            );

                        //状态机
                        FSM.Input(SelfUserType);
                    }
                }
                //GSM 通话记录
                else if (Item.name.Equals(SendPktType.SEND_MS_CALL_SETUP.ToString()))
                {
                    string IMSI = string.Empty;
                    string PhoneNumber = string.Empty;
                    string DTime = DateTime.Now.ToString();
                    foreach (KeyValuePair<string, object> ItemValue in Item.dic)
                    {
                        if (ItemValue.Key == "imsi")
                        {
                            IMSI = ItemValue.Value.ToString();
                        }
                        else if (ItemValue.Key == "number")
                        {
                            PhoneNumber = ItemValue.Value.ToString();
                        }
                        else if (ItemValue.Key == "datetime")
                        {
                            DTime = ItemValue.Value.ToString();
                        }
                    }

                    //存放到对应的GSM属性
                    //for (int i = 0; i < APATTributesLists.Count; i++)
                    //{
                    //    if (APATTributesLists[i].FullName == parentFullPathName)
                    //    {
                    //        APATTributesLists[i].PhoneRecordInput(IMSI, PhoneNumber);
                    //        break;
                    //    }
                    //}

                    //目前修改存放到实时显示表
                    string Carrier = string.Empty;
                    if (carrier == "0")
                    {
                        Carrier = "载波(1)";
                    }
                    else
                    {
                        Carrier = "载波(2)";
                    }
                    GSMPhoneNumberSMSRecordInfo.PhoneNumberRecordInput(
                                                                        parentFullPathName,
                                                                        "1",
                                                                        IMSI,
                                                                        "0",
                                                                        "0",
                                                                        PhoneNumber,
                                                                        Carrier,
                                                                        DTime
                                                                      );
                }
                //GSM 短信记录
                else if (Item.name.Equals(SendPktType.SEND_MS_SMS_SEND.ToString()))
                {
                    string IMSI = string.Empty;
                    string PhoneNumber = string.Empty;
                    string CodeType = string.Empty;
                    string SMSData = string.Empty;
                    string DTime = DateTime.Now.ToString();

                    foreach (KeyValuePair<string, object> ItemValue in Item.dic)
                    {
                        if (ItemValue.Key == "imsi")
                        {
                            IMSI = ItemValue.Value.ToString();
                        }
                        else if (ItemValue.Key == "number")
                        {
                            PhoneNumber = ItemValue.Value.ToString();
                        }
                        else if (ItemValue.Key == "codetype")
                        {
                            if (ItemValue.Value.ToString() == "0")
                            {
                                CodeType = "Unicode";
                            }
                            else if (ItemValue.Value.ToString() == "1")
                            {
                                CodeType = "GSM 7 Bit";
                            }
                            else
                            {
                                CodeType = ItemValue.Value.ToString();
                            }
                        }
                        else if (ItemValue.Key == "data")
                        {
                            SMSData = ItemValue.Value.ToString();
                        }
                        else if (ItemValue.Key == "datetime")
                        {
                            DTime = ItemValue.Value.ToString();
                        }
                    }

                    //存放到对应的GSM属性
                    //for (int i = 0; i < APATTributesLists.Count; i++)
                    //{
                    //    if (APATTributesLists[i].FullName == parentFullPathName)
                    //    {
                    //        APATTributesLists[i].SMSRecordInput(IMSI, PhoneNumber, CodeType, SMSData);
                    //        break;
                    //    }
                    //}

                    //目前修改存放到实时显示表
                    string Carrier = string.Empty;
                    if (carrier == "0")
                    {
                        Carrier = "载波(1)";
                    }
                    else
                    {
                        Carrier = "载波(2)";
                    }
                    GSMPhoneNumberSMSRecordInfo.SMSRecordInput(
                                                                parentFullPathName,
                                                                "2",
                                                                IMSI,
                                                                "0",
                                                                "0",
                                                                SMSData,
                                                                PhoneNumber,
                                                                Carrier,
                                                                DTime
                                                              );
                }
                //CDMA GSMV2捕号上报
                else if (Item.name.Equals(CDMAMsgType.UE_STATUS_REPORT_MSG.ToString()))
                {
                    if (LoginFinish)
                    {
                        string IMSI = "";
                        string IMEI = "";
                        string TMSI = "";
                        string RSRP = "";
                        string SN = "";
                        string UserType = "";
                        string Des = "";
                        string DTime = DateTime.Now.ToString();
                        sbyte SelfUserType = -1;

                        //捕号数量
                        ScannerData.ReportTotal += 1;

                        foreach (KeyValuePair<string, object> ItemValue in Item.dic)
                        {
                            if (ItemValue.Key == "imsi")
                            {
                                IMSI = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "imei")
                            {
                                IMEI = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "tmsi")
                            {
                                TMSI = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "rsrp")
                            {
                                RSRP = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "sn")
                            {
                                SN = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key.Trim().Equals("userType"))
                            {
                                if (ItemValue.Value.ToString().Equals("0"))
                                {
                                    SelfUserType = 0;
                                    UserType = "白名单";
                                }
                                else if (ItemValue.Value.ToString().Equals("1"))
                                {
                                    SelfUserType = 1;
                                    UserType = "黑名单";
                                }
                                else if (ItemValue.Value.ToString().Equals("2"))
                                {
                                    SelfUserType = 2;
                                    UserType = "普通用户";
                                }
                            }
                            else if (ItemValue.Key == "des")
                            {
                                Des = ItemValue.Value.ToString();
                            }
                        }

                        CDMAUEInformationParameter.CDMAUEInfoInput(
                                                                    IMSI,
                                                                    IMEI,
                                                                    TMSI,
                                                                    RSRP,
                                                                    SN,
                                                                    UserType,
                                                                    DTime,
                                                                    DeviceName,
                                                                    Des
                                                                  );

                        //状态机
                        FSM.Input(SelfUserType);

                        //CDMA,GSMV2短信发送到指定的(IMSI)
                        lock (JsonInterFace.APATTributesParameter.APATTributesLock)
                        {
                            for (int i = 0; i < APATTributesLists.Count; i++)
                            {
                                if (parentFullPathName == APATTributesLists[i].FullName)
                                {
                                    APATTributesLists[i].IMSIReportInput(IMSI);
                                    break;
                                }
                            }
                        }
                    }
                }
                //CDMA 邻小区信息查询响应
                else if (Item.name.Equals(CDMAMsgType.FAP_NB_CELL_INFO_MSG.ToString()))
                {
                    CellInfoPara CellInfo = new CellInfoPara();
                    string CellNum = string.Empty;
                    string ItemCellNum = string.Empty;
                    int i = 0;
                    #region CDMA 邻小区信息查询响应
                    if (InnerType == DeviceType.CDMA)
                    {
                        //获取小区总数，邻小区总数
                        foreach (KeyValuePair<string, object> ItemValue in Item.dic)
                        {
                            if (ItemValue.Key.Equals("bFapNbCellNum"))
                            {
                                CellNum = ItemValue.Value.ToString();
                                i++;
                                break;
                            }
                        }
                        //取值
                        if (CellNum != "" && Convert.ToInt32(CellNum) > 0)
                        {
                            string ItemCellNumber = string.Empty;
                            for (int n = 0; n < Convert.ToInt32(CellNum); n++)
                            {
                                CellInfoPara CDMACellInfo = new CellInfoPara();
                                string tmpkey = "Cell_#" + n.ToString() + "#/bNbCellNum";
                                foreach (KeyValuePair<string, object> ItemValue in Item.dic)
                                {
                                    if (ItemValue.Key == tmpkey)
                                    {
                                        ItemCellNumber = ItemValue.Value.ToString();
                                        break;
                                    }
                                }
                                foreach (KeyValuePair<string, object> innerItem in Item.dic)
                                {
                                    if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/bGlobalCellId"))
                                    {
                                        CDMACellInfo.bGCId = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/bPLMNId"))
                                    {
                                        CDMACellInfo.bPLMNId = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/cRSRP"))
                                    {
                                        CDMACellInfo.cRSRP = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/wTac"))
                                    {
                                        CDMACellInfo.wTac = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/wPhyCellId"))
                                    {
                                        CDMACellInfo.wPhyCellId = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/wUARFCN"))
                                    {
                                        CDMACellInfo.wUARFCN = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/cRefTxPower"))
                                    {
                                        CDMACellInfo.cRefTxPower = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/bNbCellNum"))
                                    {
                                        CDMACellInfo.bNbCellNum = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/bC2"))
                                    {
                                        CDMACellInfo.bC2 = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/bReserved1"))
                                    {
                                        CDMACellInfo.bReserved1 = innerItem.Value.ToString();
                                    }
                                }
                                if (ItemCellNumber != "" && Convert.ToInt32(ItemCellNumber) > 0)
                                {
                                    for (int m = 0; m < Convert.ToInt32(ItemCellNumber); m++)
                                    {
                                        CellInfoPara.ItemCellInfoPara itemCellInfo = new CellInfoPara.ItemCellInfoPara();
                                        foreach (KeyValuePair<string, object> innerItem in Item.dic)
                                        {
                                            if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/NeighCell_#" + m.ToString() + "#/wUarfcn"))
                                            {
                                                itemCellInfo.ItemwUarfcn = innerItem.Value.ToString();
                                            }
                                            else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/NeighCell_#" + m.ToString() + "#/wPhyCellId"))
                                            {
                                                itemCellInfo.ItemwPhyCellId = innerItem.Value.ToString();
                                            }
                                            else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/NeighCell_#" + m.ToString() + "#/cRSRP"))
                                            {
                                                itemCellInfo.ItemcRSRP = innerItem.Value.ToString();
                                            }
                                            else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/NeighCell_#" + m.ToString() + "#/cC1"))
                                            {
                                                itemCellInfo.ItemcC1 = innerItem.Value.ToString();
                                            }
                                            else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/NeighCell_#" + m.ToString() + "#/bC2"))
                                            {
                                                itemCellInfo.ItembC2 = innerItem.Value.ToString();
                                            }
                                        }
                                        //将m条存入邻区信息表, 以n为索引
                                        CDMACellNeighParameter.ItemCellInfoInput(
                                                                                    itemCellInfo.ItemwUarfcn,
                                                                                    itemCellInfo.ItemwPhyCellId,
                                                                                    itemCellInfo.ItemcRSRP,
                                                                                    itemCellInfo.ItemcC1,
                                                                                    itemCellInfo.ItembC2,
                                                                                    n.ToString()
                                                                                );
                                    }
                                }
                                //将n条存入小区信息表
                                CDMACellNeighParameter.CellInfoInput(
                                                                            CDMACellInfo.bGCId,
                                                                            CDMACellInfo.bGCId,
                                                                            CDMACellInfo.bPLMNId,
                                                                            CDMACellInfo.cRSRP,
                                                                            CDMACellInfo.wTac,
                                                                            CDMACellInfo.wPhyCellId,
                                                                            CDMACellInfo.wUARFCN,
                                                                            CDMACellInfo.cRefTxPower,
                                                                            CDMACellInfo.bNbCellNum,
                                                                            CDMACellInfo.bC2,
                                                                            n.ToString()
                                                                    );
                            }
                        }
                    }
                    #endregion

                    #region GSMV2 邻小区信息查询响应
                    else if (InnerType == DeviceType.GSMV2)
                    {
                        //获取小区总数，邻小区总数
                        foreach (KeyValuePair<string, object> ItemValue in Item.dic)
                        {
                            if (ItemValue.Key.Equals("bFapNbCellNum"))
                            {
                                CellNum = ItemValue.Value.ToString();
                                i++;
                                break;
                            }
                        }
                        //取值
                        if (CellNum != "" && Convert.ToInt32(CellNum) > 0)
                        {
                            string ItemCellNumber = string.Empty;
                            for (int n = 0; n < Convert.ToInt32(CellNum); n++)
                            {
                                CellInfoPara GSMV2CellInfo = new CellInfoPara();
                                string tmpkey = "Cell_#" + n.ToString() + "#/bNbCellNum";
                                foreach (KeyValuePair<string, object> ItemValue in Item.dic)
                                {
                                    if (ItemValue.Key == tmpkey)
                                    {
                                        ItemCellNumber = ItemValue.Value.ToString();
                                        break;
                                    }
                                }
                                foreach (KeyValuePair<string, object> innerItem in Item.dic)
                                {
                                    if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/bGlobalCellId"))
                                    {
                                        GSMV2CellInfo.bGCId = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/bPLMNId"))
                                    {
                                        GSMV2CellInfo.bPLMNId = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/cRSRP"))
                                    {
                                        GSMV2CellInfo.cRSRP = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/wTac"))
                                    {
                                        GSMV2CellInfo.wTac = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/wPhyCellId"))
                                    {
                                        GSMV2CellInfo.wPhyCellId = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/wUARFCN"))
                                    {
                                        GSMV2CellInfo.wUARFCN = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/cRefTxPower"))
                                    {
                                        GSMV2CellInfo.cRefTxPower = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/bNbCellNum"))
                                    {
                                        GSMV2CellInfo.bNbCellNum = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/bC2"))
                                    {
                                        GSMV2CellInfo.bC2 = innerItem.Value.ToString();
                                    }
                                    else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/bReserved1"))
                                    {
                                        GSMV2CellInfo.bReserved1 = innerItem.Value.ToString();
                                    }
                                }
                                if (ItemCellNumber != "" && Convert.ToInt32(ItemCellNumber) > 0)
                                {
                                    for (int m = 0; m < Convert.ToInt32(ItemCellNumber); m++)
                                    {
                                        CellInfoPara.ItemCellInfoPara itemCellInfo = new CellInfoPara.ItemCellInfoPara();
                                        foreach (KeyValuePair<string, object> innerItem in Item.dic)
                                        {
                                            if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/NeighCell_#" + m.ToString() + "#/wUarfcn"))
                                            {
                                                itemCellInfo.ItemwUarfcn = innerItem.Value.ToString();
                                            }
                                            else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/NeighCell_#" + m.ToString() + "#/wPhyCellId"))
                                            {
                                                itemCellInfo.ItemwPhyCellId = innerItem.Value.ToString();
                                            }
                                            else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/NeighCell_#" + m.ToString() + "#/cRSRP"))
                                            {
                                                itemCellInfo.ItemcRSRP = innerItem.Value.ToString();
                                            }
                                            else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/NeighCell_#" + m.ToString() + "#/cC1"))
                                            {
                                                itemCellInfo.ItemcC1 = innerItem.Value.ToString();
                                            }
                                            else if (innerItem.Key.Equals("Cell_#" + n.ToString() + "#/NeighCell_#" + m.ToString() + "#/bC2"))
                                            {
                                                itemCellInfo.ItembC2 = innerItem.Value.ToString();
                                            }
                                        }
                                        //将m条存入邻区信息表, 以n为索引
                                        GSMV2CellNeighParameter.ItemCellInfoInput(
                                                                                    itemCellInfo.ItemwUarfcn,
                                                                                    itemCellInfo.ItemwPhyCellId,
                                                                                    itemCellInfo.ItemcRSRP,
                                                                                    itemCellInfo.ItemcC1,
                                                                                    itemCellInfo.ItembC2,
                                                                                    n.ToString()
                                                                                );
                                    }
                                }
                                //将n条存入小区信息表
                                GSMV2CellNeighParameter.GSMV2CellInfoInput(
                                                                            GSMV2CellInfo.bGCId,
                                                                            GSMV2CellInfo.bPLMNId,
                                                                            GSMV2CellInfo.cRSRP,
                                                                            GSMV2CellInfo.wTac,
                                                                            GSMV2CellInfo.wPhyCellId,
                                                                            GSMV2CellInfo.wUARFCN,
                                                                            GSMV2CellInfo.cRefTxPower,
                                                                            GSMV2CellInfo.bNbCellNum,
                                                                            GSMV2CellInfo.bC2,
                                                                            n.ToString()
                                                                    );
                            }
                        }
                    }
                    #endregion
                }
                //短信记录 通话记录
                else if (Item.name.Equals(CDMAMsgType.UE_ORM_REPORT_MSG.ToString()))
                {
                    string BOrmType = string.Empty;
                    string BUeId = string.Empty;
                    string CRSRP = string.Empty;
                    string BUeContentLen = string.Empty;
                    string BUeContent = string.Empty;
                    string Carrier = string.Empty;
                    string DTime = DateTime.Now.ToString();
                    if (carrier.Equals("1"))
                    {
                        Carrier = "载波2";
                    }
                    else
                    {
                        Carrier = "载波1";
                    }

                    #region CDMA 短信记录 通话记录
                    if (InnerType == DeviceType.CDMA)
                    {
                        Carrier = "载波1";
                        foreach (KeyValuePair<string, object> ItemValue in Item.dic)
                        {
                            if (ItemValue.Key == "bOrmType")
                            {
                                BOrmType = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "bUeId")
                            {
                                BUeId = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "cRSRP")
                            {
                                CRSRP = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "bUeContentLen")
                            {
                                BUeContentLen = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "bUeContent")
                            {
                                BUeContent = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "datetime")
                            {
                                DTime = ItemValue.Value.ToString();
                            }
                        }

                        //存缓存
                        if (BOrmType == "1") //通话记录
                        {
                            try
                            {
                                GSMPhoneNumberSMSRecordInfo.PhoneNumberRecordInput(
                                                                                    parentFullPathName,
                                                                                    BOrmType,
                                                                                    BUeId,
                                                                                    CRSRP,
                                                                                    BUeContentLen,
                                                                                    BUeContent,
                                                                                    Carrier,
                                                                                    DTime
                                                                                  );
                            }
                            catch (Exception ex)
                            {
                                Parameters.PrintfLogsExtended("通话记录", ex.Message, ex.StackTrace);
                            }
                        }
                        else if (BOrmType == "2") //短消记录
                        {
                            try
                            {
                                string DesPhoneNumber = BUeContent.Split(new char[] { ';' })[0];
                                BUeContent = BUeContent.Split(new char[] { ';' })[1];

                                GSMPhoneNumberSMSRecordInfo.SMSRecordInput(
                                                                            parentFullPathName,
                                                                            BOrmType,
                                                                            BUeId,
                                                                            CRSRP,
                                                                            BUeContentLen,
                                                                            BUeContent,
                                                                            DesPhoneNumber,
                                                                            Carrier,
                                                                            DTime
                                                                          );
                            }
                            catch (Exception ex)
                            {
                                Parameters.PrintfLogsExtended("短消记录", ex.Message, ex.StackTrace);
                            }
                        }
                        else if (BOrmType == "3") //寻呼测量
                        {
                            try
                            {

                            }
                            catch (Exception ex)
                            {
                                Parameters.PrintfLogsExtended("寻呼测量", ex.Message, ex.StackTrace);
                            }
                        }
                    }
                    #endregion

                    #region GSMV2 短信记录 通话记录
                    if (InnerType == DeviceType.GSMV2)
                    {
                        foreach (KeyValuePair<string, object> ItemValue in Item.dic)
                        {
                            if (ItemValue.Key == "bOrmType")
                            {
                                BOrmType = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "bUeId")
                            {
                                BUeId = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "cRSRP")
                            {
                                CRSRP = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "bUeContentLen")
                            {
                                BUeContentLen = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "bUeContent")
                            {
                                BUeContent = ItemValue.Value.ToString();
                            }
                            else if (ItemValue.Key == "datetime")
                            {
                                DTime = ItemValue.Value.ToString();
                            }
                        }

                        //存缓存
                        if (BOrmType == "1") //通话记录
                        {
                            try
                            {
                                GSMPhoneNumberSMSRecordInfo.PhoneNumberRecordInput(
                                                                                    parentFullPathName,
                                                                                    BOrmType,
                                                                                    BUeId,
                                                                                    CRSRP,
                                                                                    BUeContentLen,
                                                                                    BUeContent,
                                                                                    Carrier,
                                                                                    DTime
                                                                                  );
                            }
                            catch (Exception ex)
                            {
                                Parameters.PrintfLogsExtended("通话记录", ex.Message, ex.StackTrace);
                            }
                        }
                        else if (BOrmType == "2") //短消记录
                        {
                            try
                            {
                                string DesPhoneNumber = BUeContent.Split(new char[] { ';' })[0];
                                BUeContent = BUeContent.Split(new char[] { ';' })[1];

                                GSMPhoneNumberSMSRecordInfo.SMSRecordInput(
                                                                            parentFullPathName,
                                                                            BOrmType,
                                                                            BUeId,
                                                                            CRSRP,
                                                                            BUeContentLen,
                                                                            BUeContent,
                                                                            DesPhoneNumber,
                                                                            Carrier,
                                                                            DTime
                                                                          );
                            }
                            catch (Exception ex)
                            {
                                Parameters.PrintfLogsExtended("短消记录", ex.Message, ex.StackTrace);
                            }
                        }
                        else if (BOrmType == "3") //寻呼测量
                        {
                            try
                            {

                            }
                            catch (Exception ex)
                            {
                                Parameters.PrintfLogsExtended("寻呼测量", ex.Message, ex.StackTrace);
                            }
                        }
                    }
                    #endregion
                }
            }
        }

        /// <summary>
        /// CDMA,GSMV2参数查询响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void CDMAParameterGettingResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string domainId = string.Empty;
            string domainParentId = string.Empty;
            string parentFullPathName = string.Empty;
            string name = string.Empty;
            string carry = string.Empty;
            string MsgType = string.Empty;
            string DeviceMode = string.Empty;
            string FullName = string.Empty;

            try
            {
                FullName = resultData.ApInfo.Fullname;
                foreach (KeyValuePair<string, object> Itemcase in resultData.Body.dic)
                {
                    if (Itemcase.Key == "ReturnCode")
                    {
                        ReturnCode = Itemcase.Value.ToString();
                    }
                    else if (Itemcase.Key == "ReturnStr")
                    {
                        ReturnStr = Itemcase.Value.ToString();
                    }
                    else if (Itemcase.Key == "domainId")
                    {
                        domainId = Itemcase.Value.ToString();
                    }
                    else if (Itemcase.Key == "domainParentId")
                    {
                        domainParentId = Itemcase.Value.ToString();
                    }
                    else if (Itemcase.Key == "parentFullPathName")
                    {
                        parentFullPathName = Itemcase.Value.ToString();
                    }
                    else if (Itemcase.Key == "name")
                    {
                        name = Itemcase.Value.ToString();
                    }
                    else if (Itemcase.Key == "carry")
                    {
                        carry = Itemcase.Value.ToString();
                    }
                }
                if (ReturnCode == "0")
                {
                    for (int i = 0; i < APATTributesLists.Count; i++)
                    {
                        if ((parentFullPathName + "." + name) == APATTributesLists[i].FullName)
                        {
                            DeviceMode = APATTributesLists[i].Mode;
                            break;
                        }
                    }
                    #region CDMA
                    if (DeviceMode == DeviceType.CDMA)
                    {
                        foreach (MsgStruct.Name_DIC_Struct Itemcase in resultData.Body.n_dic)
                        {
                            MsgType = Itemcase.name;

                            //小区参数
                            if (MsgType == CDMAMsgType.CONFIG_FAP_MSG.ToString())
                            {
                                foreach (KeyValuePair<string, object> ItemValue in Itemcase.dic)
                                {
                                    if (ItemValue.Key == "bWorkingMode")
                                    {
                                        if (ItemValue.Value.ToString() == "1")
                                        {
                                            JsonInterFace.CDMACellNeighParameter.BWorkingMode = "侦码模式";
                                        }
                                        else if (ItemValue.Value.ToString() == "3")
                                        {
                                            JsonInterFace.CDMACellNeighParameter.BWorkingMode = "驻留模式";
                                        }
                                    }
                                    else if (ItemValue.Key == "bC")
                                    {
                                        if (ItemValue.Value.ToString() == "0")
                                        {
                                            JsonInterFace.CDMACellNeighParameter.BCYes = "false";
                                            JsonInterFace.CDMACellNeighParameter.BCNo = "true";
                                        }
                                        else if (ItemValue.Value.ToString() == "1")
                                        {
                                            JsonInterFace.CDMACellNeighParameter.BCYes = "true";
                                            JsonInterFace.CDMACellNeighParameter.BCNo = "false";
                                        }
                                    }
                                    else if (ItemValue.Key == "wRedirectCellUarfcn")
                                    {
                                        JsonInterFace.CDMACellNeighParameter.WRedirectCellUarfcn = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "dwDateTime")
                                    {
                                        JsonInterFace.CDMACellNeighParameter.DwDateTime = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "bPLMNId")
                                    {
                                        JsonInterFace.CDMACellNeighParameter.BPLMNId = ItemValue.Value.ToString();
                                        JsonInterFace.CDMACellNeighParameter.Operators = OperatorsList.GetOperators(JsonInterFace.CDMACellNeighParameter.BPLMNId);
                                    }
                                    else if (ItemValue.Key == "bTxPower")
                                    {
                                        JsonInterFace.CDMACellNeighParameter.BTxPower = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "bRxGain")
                                    {
                                        JsonInterFace.CDMACellNeighParameter.BRxGain = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "wPhyCellId")
                                    {
                                        JsonInterFace.CDMACellNeighParameter.WPhyCellId = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "wLAC")
                                    {
                                        JsonInterFace.CDMACellNeighParameter.WLAC = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "wUARFCN")
                                    {
                                        JsonInterFace.CDMACellNeighParameter.WUARFCN = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "dwCellId")
                                    {
                                        JsonInterFace.CDMACellNeighParameter.DwCellId = ItemValue.Value.ToString();
                                    }
                                }

                                IODataHelper.SaveLogs(DateTime.Now.ToString(), "设备[" + parentFullPathName + "." + name + "]小区信息查询", "参数查询", ReturnStr);
                                SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "." + name + "]小区信息查询", "参数查询", ReturnStr);

                                if (Parameters.ConfigType == "Auto")
                                {
                                    JsonInterFace.CDMADeviceDetail.PLMNInfo = JsonInterFace.CDMACellNeighParameter.BPLMNId + "-" + JsonInterFace.OperatorsList.GetOperators(JsonInterFace.CDMACellNeighParameter.BPLMNId);
                                    JsonInterFace.CDMADeviceDetail.FreqPCIInfo = JsonInterFace.CDMACellNeighParameter.WUARFCN + "/" + JsonInterFace.CDMACellNeighParameter.WLAC;
                                }
                            }
                            //CDMA多载波参数
                            else if (MsgType == CDMAMsgType.CONFIG_CDMA_CARRIER_MSG.ToString())
                            {
                                foreach (KeyValuePair<string, object> ItemValue in Itemcase.dic)
                                {
                                    //(1)
                                    if (ItemValue.Key == "wARFCN1")
                                    {
                                        JsonInterFace.CDMAMultiCarrierParameter.WARFCN1 = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "bARFCN1Mode")
                                    {
                                        if (ItemValue.Value.ToString() == "0")
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN1Mode.Scanner = true;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN1Mode.NormallyRun = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN1Mode.Closed = false;
                                        }
                                        else if (ItemValue.Value.ToString() == "1")
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN1Mode.Scanner = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN1Mode.NormallyRun = true;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN1Mode.Closed = false;
                                        }
                                        else if (ItemValue.Value.ToString() == "2")
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN1Mode.Scanner = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN1Mode.NormallyRun = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN1Mode.Closed = true;
                                        }
                                        else
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN1Mode.Scanner = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN1Mode.NormallyRun = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN1Mode.Closed = false;
                                        }
                                    }
                                    else if (ItemValue.Key == "wARFCN1Duration")
                                    {
                                        JsonInterFace.CDMAMultiCarrierParameter.WARFCN1Duration = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "wARFCN1Period")
                                    {
                                        JsonInterFace.CDMAMultiCarrierParameter.WARFCN1Period = ItemValue.Value.ToString();
                                    }
                                    //(2)
                                    else if (ItemValue.Key == "wARFCN2")
                                    {
                                        JsonInterFace.CDMAMultiCarrierParameter.WARFCN2 = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "bARFCN2Mode")
                                    {
                                        if (ItemValue.Value.ToString() == "0")
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN2Mode.Scanner = true;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN2Mode.NormallyRun = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN2Mode.Closed = false;
                                        }
                                        else if (ItemValue.Value.ToString() == "1")
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN2Mode.Scanner = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN2Mode.NormallyRun = true;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN2Mode.Closed = false;
                                        }
                                        else if (ItemValue.Value.ToString() == "2")
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN2Mode.Scanner = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN2Mode.NormallyRun = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN2Mode.Closed = true;
                                        }
                                        else
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN2Mode.Scanner = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN2Mode.NormallyRun = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN2Mode.Closed = false;
                                        }
                                    }
                                    else if (ItemValue.Key == "wARFCN2Duration")
                                    {
                                        JsonInterFace.CDMAMultiCarrierParameter.WARFCN2Duration = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "wARFCN2Period")
                                    {
                                        JsonInterFace.CDMAMultiCarrierParameter.WARFCN2Period = ItemValue.Value.ToString();
                                    }
                                    //(3)
                                    else if (ItemValue.Key == "wARFCN3")
                                    {
                                        JsonInterFace.CDMAMultiCarrierParameter.WARFCN3 = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "bARFCN3Mode")
                                    {
                                        if (ItemValue.Value.ToString() == "0")
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN3Mode.Scanner = true;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN3Mode.NormallyRun = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN3Mode.Closed = false;
                                        }
                                        else if (ItemValue.Value.ToString() == "1")
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN3Mode.Scanner = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN3Mode.NormallyRun = true;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN3Mode.Closed = false;
                                        }
                                        else if (ItemValue.Value.ToString() == "2")
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN3Mode.Scanner = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN3Mode.NormallyRun = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN3Mode.Closed = true;
                                        }
                                        else
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN3Mode.Scanner = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN3Mode.NormallyRun = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN3Mode.Closed = false;
                                        }
                                    }
                                    else if (ItemValue.Key == "wARFCN3Duration")
                                    {
                                        JsonInterFace.CDMAMultiCarrierParameter.WARFCN3Duration = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "wARFCN3Period")
                                    {
                                        JsonInterFace.CDMAMultiCarrierParameter.WARFCN3Period = ItemValue.Value.ToString();
                                    }
                                    //(4)
                                    else if (ItemValue.Key == "wARFCN4")
                                    {
                                        JsonInterFace.CDMAMultiCarrierParameter.WARFCN4 = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "bARFCN4Mode")
                                    {
                                        if (ItemValue.Value.ToString() == "0")
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN4Mode.Scanner = true;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN4Mode.NormallyRun = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN4Mode.Closed = false;
                                        }
                                        else if (ItemValue.Value.ToString() == "1")
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN4Mode.Scanner = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN4Mode.NormallyRun = true;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN4Mode.Closed = false;
                                        }
                                        else if (ItemValue.Value.ToString() == "2")
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN4Mode.Scanner = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN4Mode.NormallyRun = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN4Mode.Closed = true;
                                        }
                                        else
                                        {
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN4Mode.Scanner = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN4Mode.NormallyRun = false;
                                            JsonInterFace.CDMAMultiCarrierParameter.BARFCN4Mode.Closed = false;
                                        }
                                    }
                                    else if (ItemValue.Key == "wARFCN4Duration")
                                    {
                                        JsonInterFace.CDMAMultiCarrierParameter.WARFCN4Duration = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "wARFCN4Period")
                                    {
                                        JsonInterFace.CDMAMultiCarrierParameter.WARFCN4Period = ItemValue.Value.ToString();
                                    }
                                }

                                IODataHelper.SaveLogs(DateTime.Now.ToString(), "设备[" + parentFullPathName + "." + name + "]多载波信息查询", "参数查询", ReturnStr);
                                SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "." + name + "]多载波信息查询", "参数查询", ReturnStr);
                            }
                            //CDMA IMSI 查询
                            else if (MsgType == CDMAMsgType.CONFIG_IMSI_MSG_V3_ID.ToString())
                            {
                                int i = 0;
                                int IMSITotal = 0;
                                foreach (KeyValuePair<string, object> ItemValue in Itemcase.dic)
                                {
                                    if (ItemValue.Key == "wTotalImsi")
                                    {
                                        IMSITotal = Convert.ToInt32(ItemValue.Value.ToString());
                                        if (IMSITotal > 0)
                                        {
                                            CDMAIMSIControlInfo.IMSIListTab.Rows.Clear();
                                        }
                                        continue;
                                    }
                                    else if (ItemValue.Key == ("bIMSI_#" + i.ToString() + "#"))
                                    {
                                        CDMAIMSIControlInfo.IMSI = ItemValue.Value.ToString();
                                        continue;
                                    }
                                    else if (ItemValue.Key == ("bUeActionFlag_#" + i.ToString() + "#"))
                                    {
                                        CDMAIMSIControlInfo.ActionFlag = ItemValue.Value.ToString();
                                    }

                                    if (IMSITotal > 0)
                                    {
                                        CDMAIMSIControlInfo.Input(CDMAIMSIControlInfo.IMSI, CDMAIMSIControlInfo.ActionFlag);
                                    }
                                    i++;
                                }

                                if (IMSITotal > 0)
                                {
                                    Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_CDMAIMSIConfigWithQueryResponse, 0, 0);
                                }

                                new Thread(() =>
                                {
                                    ShowMessage("共查询IMSI[" + IMSITotal.ToString() + "]条！", 64);
                                }).Start();
                            }
                            //CDMA控制时间
                            else if (MsgType == CDMAMsgType.TIME_CONTROL.ToString())
                            {
                                string FirstPeriodTimeStart = string.Empty;
                                string FirstPeriodTimeEnd = string.Empty;
                                string SecondPeriodTimeStart = string.Empty;
                                string SecoondPeriodTimeEnd = string.Empty;
                                string ThreePeriodTimeStart = string.Empty;
                                string ThreePeriodTimeEnd = string.Empty;

                                foreach (KeyValuePair<string, object> ItemValue in Itemcase.dic)
                                {
                                    if (ItemValue.Key == "activeTime1Start")
                                    {
                                        FirstPeriodTimeStart = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "activeTime1Ended")
                                    {
                                        FirstPeriodTimeEnd = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "activeTime2Start")
                                    {
                                        SecondPeriodTimeStart = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "activeTime2Ended")
                                    {
                                        SecoondPeriodTimeEnd = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "activeTime3Start")
                                    {
                                        ThreePeriodTimeStart = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "activeTime3Ended")
                                    {
                                        ThreePeriodTimeEnd = ItemValue.Value.ToString();
                                    }
                                }

                                JsonInterFace.CDMADeviceAdvanceSettingParameter.FirstPeriodTimeStart = FirstPeriodTimeStart;
                                JsonInterFace.CDMADeviceAdvanceSettingParameter.FirstPeriodTimeEnd = FirstPeriodTimeEnd;
                                JsonInterFace.CDMADeviceAdvanceSettingParameter.SecondPeriodTimeStart = SecondPeriodTimeStart;
                                JsonInterFace.CDMADeviceAdvanceSettingParameter.SecoondPeriodTimeEnd = SecoondPeriodTimeEnd;
                                JsonInterFace.CDMADeviceAdvanceSettingParameter.ThreePeriodTimeStart = ThreePeriodTimeStart;
                                JsonInterFace.CDMADeviceAdvanceSettingParameter.ThreePeriodTimeEnd = ThreePeriodTimeEnd;

                                //更新到属性
                                for (int i = 0; i < APATTributesLists.Count; i++)
                                {
                                    if ((parentFullPathName + "." + name) == APATTributesLists[i].FullName)
                                    {
                                        APATTributesLists[i].FirstPeriodTimeStart = FirstPeriodTimeStart;
                                        APATTributesLists[i].FirstPeriodTimeEnd = FirstPeriodTimeEnd;
                                        APATTributesLists[i].SecondPeriodTimeStart = SecondPeriodTimeStart;
                                        APATTributesLists[i].SecoondPeriodTimeEnd = SecoondPeriodTimeEnd;
                                        APATTributesLists[i].ThreePeriodTimeStart = ThreePeriodTimeStart;
                                        APATTributesLists[i].ThreePeriodTimeEnd = ThreePeriodTimeEnd;
                                        break;
                                    }
                                }
                            }
                            //CDMA FAP 配置下发短信号码和内容
                            else if (MsgType == CDMAMsgType.CONFIG_SMS_CONTENT_MSG.ToString())
                            {
                                string MSGID = string.Empty;
                                string BSMSOriginalNumLen = string.Empty;
                                string BSMSOriginalNum = string.Empty;
                                string BSMSContentLen = string.Empty;
                                string BSMSContent = string.Empty;
                                string SMSctrl = Convert.ToBoolean(Convert.ToInt32("0")).ToString();
                                foreach (KeyValuePair<string, object> ItemValue in Itemcase.dic)
                                {
                                    if (ItemValue.Key == "sms_ctrl")
                                    {
                                        SMSctrl = Convert.ToBoolean(Convert.ToInt32(ItemValue.Value.ToString())).ToString();
                                    }
                                    else if (ItemValue.Key == "bSMSOriginalNumLen")
                                    {
                                        BSMSOriginalNumLen = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "bSMSOriginalNum")
                                    {
                                        BSMSOriginalNum = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "bSMSContentLen")
                                    {
                                        BSMSContentLen = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "bSMSContent")
                                    {
                                        BSMSContent = ItemValue.Value.ToString();
                                    }
                                }
                                //更新到属性
                                for (int i = 0; i < APATTributesLists.Count; i++)
                                {
                                    if ((parentFullPathName + "." + name) == APATTributesLists[i].FullName)
                                    {
                                        bool isExistence = false;
                                        for (int j = 0; j < APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows.Count; j++)
                                        {
                                            if (APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["BSMSOriginalNumLen"].ToString().Equals(BSMSOriginalNumLen) &&
                                                APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["BSMSOriginalNum"].ToString().Equals(BSMSOriginalNum) &&
                                                APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["BSMSContentLen"].ToString().Equals(BSMSContentLen) &&
                                                APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["BSMSContent"].ToString().Equals(BSMSContent) &&
                                                APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["CarrierOne"].ToString().Equals("true") &&
                                                APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["CarrierTwo"].ToString().Equals("false") &&
                                                APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["SMSctrl"].ToString().Equals(SMSctrl))
                                            {
                                                isExistence = true;
                                                break;
                                            }
                                        }
                                        if (!isExistence || APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows.Count == 0)
                                        {
                                            APATTributesLists[i].GSMV2ConfigSMSMSGInput(MSGID, BSMSOriginalNumLen, BSMSOriginalNum, BSMSContentLen, BSMSContent, "true", "false", SMSctrl);
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        if (Parameters.ConfigType == "Manul" && ReturnCode == "0")
                        {
                            new Thread(() =>
                            {
                                ShowMessage("设备[" + parentFullPathName + "." + name + "]信息查询" + ReturnStr + "！", 64);
                            }).Start();
                        }
                    }
                    #endregion
                    #region GSMV2
                    if (DeviceMode == DeviceType.GSMV2)
                    {
                        JsonInterFace.GSMV2DeviceAdvanceSettingParameter.FirstPeriodTimeStart = "";
                        JsonInterFace.GSMV2DeviceAdvanceSettingParameter.FirstPeriodTimeEnd = "";
                        JsonInterFace.GSMV2DeviceAdvanceSettingParameter.SecondPeriodTimeStart = "";
                        JsonInterFace.GSMV2DeviceAdvanceSettingParameter.SecoondPeriodTimeEnd = "";
                        JsonInterFace.GSMV2DeviceAdvanceSettingParameter.ThreePeriodTimeStart = "";
                        JsonInterFace.GSMV2DeviceAdvanceSettingParameter.ThreePeriodTimeEnd = "";
                        if (carry == "1")
                        {
                            JsonInterFace.GSMV2CarrierParameter.CarrierOne = false;
                            JsonInterFace.GSMV2CarrierParameter.CarrierTwo = true;
                        }
                        else
                        {
                            JsonInterFace.GSMV2CarrierParameter.CarrierOne = true;
                            JsonInterFace.GSMV2CarrierParameter.CarrierTwo = false;
                        }
                        foreach (MsgStruct.Name_DIC_Struct Itemcase in resultData.Body.n_dic)
                        {
                            MsgType = Itemcase.name;

                            //小区参数
                            if (MsgType == CDMAMsgType.CONFIG_FAP_MSG.ToString())
                            {
                                foreach (KeyValuePair<string, object> ItemValue in Itemcase.dic)
                                {
                                    if (ItemValue.Value != null)
                                    {
                                        if (ItemValue.Key == "bWorkingMode")
                                        {
                                            if (ItemValue.Value.ToString() == "1")
                                            {
                                                JsonInterFace.GSMV2CellNeighParameter.BWorkingMode = "侦码模式";
                                            }
                                            else if (ItemValue.Value.ToString() == "3")
                                            {
                                                JsonInterFace.GSMV2CellNeighParameter.BWorkingMode = "驻留模式";
                                            }
                                        }
                                        else if (ItemValue.Key == "bC")
                                        {
                                            if (ItemValue.Value.ToString() == "0")
                                            {
                                                JsonInterFace.GSMV2CellNeighParameter.BCYes = "false";
                                                JsonInterFace.GSMV2CellNeighParameter.BCNo = "true";
                                            }
                                            else if (ItemValue.Value.ToString() == "1")
                                            {
                                                JsonInterFace.GSMV2CellNeighParameter.BCYes = "true";
                                                JsonInterFace.GSMV2CellNeighParameter.BCNo = "false";
                                            }
                                        }
                                        else if (ItemValue.Key == "wRedirectCellUarfcn")
                                        {
                                            JsonInterFace.GSMV2CellNeighParameter.WRedirectCellUarfcn = ItemValue.Value.ToString();
                                        }
                                        else if (ItemValue.Key == "dwDateTime")
                                        {
                                            JsonInterFace.GSMV2CellNeighParameter.DwDateTime = ItemValue.Value.ToString();
                                        }
                                        else if (ItemValue.Key == "bPLMNId")
                                        {
                                            JsonInterFace.GSMV2CellNeighParameter.BPLMNId = ItemValue.Value.ToString();
                                            JsonInterFace.GSMV2CellNeighParameter.Operators = OperatorsList.GetOperators(JsonInterFace.GSMV2CellNeighParameter.BPLMNId);
                                        }
                                        else if (ItemValue.Key == "bTxPower")
                                        {
                                            JsonInterFace.GSMV2CellNeighParameter.BTxPower = ItemValue.Value.ToString();
                                        }
                                        else if (ItemValue.Key == "bRxGain")
                                        {
                                            JsonInterFace.GSMV2CellNeighParameter.BRxGain = ItemValue.Value.ToString();
                                        }
                                        else if (ItemValue.Key == "wPhyCellId")
                                        {
                                            JsonInterFace.GSMV2CellNeighParameter.WPhyCellId = ItemValue.Value.ToString();
                                        }
                                        else if (ItemValue.Key == "wLAC")
                                        {
                                            JsonInterFace.GSMV2CellNeighParameter.WLAC = ItemValue.Value.ToString();
                                        }
                                        else if (ItemValue.Key == "wUARFCN")
                                        {
                                            JsonInterFace.GSMV2CellNeighParameter.WUARFCN = ItemValue.Value.ToString();
                                        }
                                        else if (ItemValue.Key == "dwCellId")
                                        {
                                            JsonInterFace.GSMV2CellNeighParameter.DwCellId = ItemValue.Value.ToString();
                                        }
                                    }
                                }

                                IODataHelper.SaveLogs(DateTime.Now.ToString(), "设备[" + parentFullPathName + "." + name + "]小区信息查询", "参数查询", ReturnStr);
                                SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "." + name + "]小区信息查询", "参数查询", ReturnStr);

                                if (carry == "0")
                                {
                                    JsonInterFace.GSMV2SelfCarrierOneDetailInfo.PLMNInfo = JsonInterFace.GSMV2CellNeighParameter.BPLMNId + "-" + JsonInterFace.OperatorsList.GetOperators(JsonInterFace.GSMV2CellNeighParameter.BPLMNId);
                                    JsonInterFace.GSMV2SelfCarrierOneDetailInfo.FreqPCIInfo = JsonInterFace.GSMV2CellNeighParameter.WUARFCN + "/" + JsonInterFace.GSMV2CellNeighParameter.WLAC;
                                }
                                else
                                {
                                    JsonInterFace.GSMV2SelfCarrierTwoDetailInfo.PLMNInfo = JsonInterFace.GSMV2CellNeighParameter.BPLMNId + "-" + JsonInterFace.OperatorsList.GetOperators(JsonInterFace.GSMV2CellNeighParameter.BPLMNId);
                                    JsonInterFace.GSMV2SelfCarrierTwoDetailInfo.FreqPCIInfo = JsonInterFace.GSMV2CellNeighParameter.WUARFCN + "/" + JsonInterFace.GSMV2CellNeighParameter.WLAC;
                                }
                            }
                            //GSMV2 IMSI 查询
                            else if (MsgType == CDMAMsgType.CONFIG_IMSI_MSG_V3_ID.ToString())
                            {
                                int i = 0;
                                int IMSITotal = 0;
                                foreach (KeyValuePair<string, object> ItemValue in Itemcase.dic)
                                {
                                    if (ItemValue.Key == "wTotalImsi")
                                    {
                                        IMSITotal = Convert.ToInt32(ItemValue.Value.ToString());
                                        if (IMSITotal > 0)
                                        {
                                            GSMV2IMSIControlInfo.GSMV2IMSIListTab.Rows.Clear();
                                        }
                                        continue;
                                    }
                                    else if (ItemValue.Key == ("bIMSI_#" + i.ToString() + "#"))
                                    {
                                        GSMV2IMSIControlInfo.IMSI = ItemValue.Value.ToString();
                                        continue;
                                    }
                                    else if (ItemValue.Key == ("bUeActionFlag_#" + i.ToString() + "#"))
                                    {
                                        GSMV2IMSIControlInfo.ActionFlag = ItemValue.Value.ToString();
                                    }

                                    if (IMSITotal > 0)
                                    {
                                        GSMV2IMSIControlInfo.Input((i + 1).ToString(), GSMV2IMSIControlInfo.IMSI, GSMV2IMSIControlInfo.ActionFlag);
                                    }
                                    i++;
                                }

                                if (IMSITotal > 0)
                                {
                                    Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_CDMAIMSIConfigWithQueryResponse, 0, 0);
                                }
                            }
                            //GSMV2 生效时间 查询
                            else if (MsgType == CDMAMsgType.TIME_CONTROL.ToString())
                            {
                                foreach (KeyValuePair<string, object> ItemValue in Itemcase.dic)
                                {
                                    if (ItemValue.Key == "activeTime1Start")
                                    {
                                        JsonInterFace.GSMV2DeviceAdvanceSettingParameter.FirstPeriodTimeStart = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "activeTime1Ended")
                                    {
                                        JsonInterFace.GSMV2DeviceAdvanceSettingParameter.FirstPeriodTimeEnd = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "activeTime2Start")
                                    {
                                        JsonInterFace.GSMV2DeviceAdvanceSettingParameter.SecondPeriodTimeStart = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "activeTime2Ended")
                                    {
                                        JsonInterFace.GSMV2DeviceAdvanceSettingParameter.SecoondPeriodTimeEnd = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "activeTime3Start")
                                    {
                                        JsonInterFace.GSMV2DeviceAdvanceSettingParameter.ThreePeriodTimeStart = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "activeTime3Ended")
                                    {
                                        JsonInterFace.GSMV2DeviceAdvanceSettingParameter.ThreePeriodTimeEnd = ItemValue.Value.ToString();
                                    }
                                }
                                //更新到属性
                                for (int i = 0; i < APATTributesLists.Count; i++)
                                {
                                    if ((parentFullPathName + "." + name) == APATTributesLists[i].FullName)
                                    {
                                        APATTributesLists[i].FirstPeriodTimeStart = JsonInterFace.GSMV2DeviceAdvanceSettingParameter.FirstPeriodTimeStart;
                                        APATTributesLists[i].FirstPeriodTimeEnd = JsonInterFace.GSMV2DeviceAdvanceSettingParameter.FirstPeriodTimeEnd;
                                        APATTributesLists[i].SecondPeriodTimeStart = JsonInterFace.GSMV2DeviceAdvanceSettingParameter.SecondPeriodTimeStart;
                                        APATTributesLists[i].SecoondPeriodTimeEnd = JsonInterFace.GSMV2DeviceAdvanceSettingParameter.SecoondPeriodTimeEnd;
                                        APATTributesLists[i].ThreePeriodTimeStart = JsonInterFace.GSMV2DeviceAdvanceSettingParameter.ThreePeriodTimeStart;
                                        APATTributesLists[i].ThreePeriodTimeEnd = JsonInterFace.GSMV2DeviceAdvanceSettingParameter.ThreePeriodTimeEnd;
                                        break;
                                    }
                                }
                            }
                            //GSMV2 FAP 配置下发短信号码和内容
                            else if (MsgType == CDMAMsgType.CONFIG_SMS_CONTENT_MSG.ToString())
                            {
                                string MSGID = string.Empty;
                                string BSMSOriginalNumLen = string.Empty;
                                string BSMSOriginalNum = string.Empty;
                                string BSMSContentLen = string.Empty;
                                string BSMSContent = string.Empty;
                                string CarrierOne = string.Empty;
                                string CarrierTwo = string.Empty;
                                string SMSctrl = Convert.ToBoolean(Convert.ToInt32("0")).ToString();
                                CarrierOne = Convert.ToString(JsonInterFace.GSMV2CarrierParameter.CarrierOne);
                                CarrierTwo = Convert.ToString(JsonInterFace.GSMV2CarrierParameter.CarrierTwo);
                                foreach (KeyValuePair<string, object> ItemValue in Itemcase.dic)
                                {
                                    if (ItemValue.Key == "sms_ctrl")
                                    {
                                        SMSctrl = Convert.ToBoolean(Convert.ToInt32(ItemValue.Value.ToString())).ToString();
                                    }
                                    else if (ItemValue.Key == "bSMSOriginalNumLen")
                                    {
                                        BSMSOriginalNumLen = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "bSMSOriginalNum")
                                    {
                                        BSMSOriginalNum = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "bSMSContentLen")
                                    {
                                        BSMSContentLen = ItemValue.Value.ToString();
                                    }
                                    else if (ItemValue.Key == "bSMSContent")
                                    {
                                        BSMSContent = ItemValue.Value.ToString();
                                    }
                                }
                                //更新到属性
                                for (int i = 0; i < APATTributesLists.Count; i++)
                                {
                                    if ((parentFullPathName + "." + name) == APATTributesLists[i].FullName)
                                    {
                                        bool isExistence = false;
                                        for (int j = 0; j < APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows.Count; j++)
                                        {
                                            if (APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["BSMSOriginalNumLen"].ToString().Equals(BSMSOriginalNumLen) &&
                                                APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["BSMSOriginalNum"].ToString().Equals(BSMSOriginalNum) &&
                                                APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["BSMSContentLen"].ToString().Equals(BSMSContentLen) &&
                                                APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["BSMSContent"].ToString().Equals(BSMSContent) &&
                                                APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["CarrierOne"].ToString().Equals(CarrierOne) &&
                                                APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["CarrierTwo"].ToString().Equals(CarrierTwo) &&
                                                APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows[j]["SMSctrl"].ToString().Equals(SMSctrl))
                                            {
                                                isExistence = true;
                                                break;
                                            }
                                        }
                                        if (!isExistence || APATTributesLists[i].GSMV2ConfigSMSMSGDataTab.Rows.Count == 0)
                                        {
                                            APATTributesLists[i].GSMV2ConfigSMSMSGInput(MSGID, BSMSOriginalNumLen, BSMSOriginalNum, BSMSContentLen, BSMSContent, CarrierOne, CarrierTwo, SMSctrl);
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        if (Parameters.ConfigType == "Manul" && ReturnCode == "0")
                        {
                            new Thread(() =>
                            {
                                ShowMessage("设备[" + parentFullPathName + "." + name + "]信息查询" + ReturnStr + "！", 64);
                            }).Start();
                        }
                    }
                    #endregion
                }
                else
                {
                    if (parentFullPathName == "" || parentFullPathName == null)
                    {
                        parentFullPathName = FullName;
                    }

                    IODataHelper.SaveLogs(DateTime.Now.ToString(), "设备[" + parentFullPathName + "." + name + "]信息查询", "参数查询", ReturnStr);
                    SystemLogsInfo.Input(DateTime.Now.ToString(), "设备[" + parentFullPathName + "." + name + "]信息查询", "参数查询", ReturnStr);

                    new Thread(() =>
                    {
                        ShowMessage("设备[" + parentFullPathName + "." + name + "]信息查询" + ReturnStr + "(" + ReturnCode + ")", 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            Parameters.ConfigType = "null";
        }

        /// <summary>
        /// 获取GSM某个载波的参数
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="Carrier"></param>
        public static string GetGSMCarrierOneGenParaRequest(string domainFullPathName, string deviceName, string CarrierType)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMParameterGetting = new Dictionary<string, object>();
                GSMParameterGetting.Add("parentFullPathName", domainFullPathName);
                GSMParameterGetting.Add("name", deviceName);
                GSMParameterGetting.Add("carry", CarrierType);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMParameterGetting.Add("AllNum", GSMParameterGetting.Count + 1);

                MsgStruct.Msg_Body_Struct GSMParameterGettingBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_GsmInfo_Request, GSMParameterGetting);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.ApInfo.Type = string.Empty;
                msgStruct.Body = GSMParameterGettingBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 获取GSM参数响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void GetGSMCarrierGenParaResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string domainId = string.Empty;
            string domainParentId = string.Empty;
            string parentFullPathName = string.Empty;
            string DeviceName = string.Empty;
            string carrier = string.Empty;
            int Loop = 0;

            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key == "ReturnCode")
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key == "ReturnStr")
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key == "domainId")
                    {
                        domainId = Item.Value.ToString();
                    }
                    else if (Item.Key == "domainParentId")
                    {
                        domainParentId = Item.Value.ToString();
                    }
                    else if (Item.Key == "parentFullPathName")
                    {
                        parentFullPathName = Item.Value.ToString();
                    }
                    else if (Item.Key == "name")
                    {
                        DeviceName = Item.Value.ToString();
                    }
                    else if (Item.Key == "carry")
                    {
                        carrier = Item.Value.ToString();
                    }

                    if (Loop > 6) { break; }
                    Loop++;
                }

                if (ReturnCode == "0")
                {
                    int UnLoop = 0;
                    string FirstPeriodTimeStart = string.Empty;
                    string FirstPeriodTimeEnd = string.Empty;
                    string SecondPeriodTimeStart = string.Empty;
                    string SecoondPeriodTimeEnd = string.Empty;
                    string ThreePeriodTimeStart = string.Empty;
                    string ThreePeriodTimeEnd = string.Empty;

                    for (int i = 0; i < APATTributesLists.Count; i++)
                    {
                        if (APATTributesLists[i].SelfName == DeviceName
                            && APATTributesLists[i].ParentID == domainId)
                        {
                            if (carrier == "0")
                            {
                                GSMSelfCarrierOneDetailInfo.DomainFullPathName = parentFullPathName + "." + DeviceName;
                                GSMSelfCarrierOneDetailInfo.CarrierOne = Convert.ToBoolean(Convert.ToInt32(carrier) + 1);
                                GSMSelfCarrierOneDetailInfo.PLMN = string.Empty;
                                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                                {
                                    if (UnLoop <= Loop - 1) { UnLoop++; continue; }

                                    //系统参数
                                    if (Item.Key == "paraMcc")
                                    {
                                        if (Item.Value.ToString().Length == 1)
                                        {
                                            GSMSystemParameter.ParaMcc = "00" + Item.Value.ToString();
                                            GSMSelfCarrierOneDetailInfo.ParaMcc = "00" + Item.Value.ToString();
                                        }
                                        else
                                        {
                                            GSMSystemParameter.ParaMcc = Item.Value.ToString();
                                            GSMSelfCarrierOneDetailInfo.ParaMcc = Item.Value.ToString();
                                        }

                                        if (GSMSelfCarrierOneDetailInfo.PLMN != "" && GSMSelfCarrierOneDetailInfo.PLMN != null)
                                        {
                                            GSMSelfCarrierOneDetailInfo.PLMN = GSMSystemParameter.ParaMcc + GSMSelfCarrierOneDetailInfo.PLMN;
                                        }
                                        else
                                        {
                                            GSMSelfCarrierOneDetailInfo.PLMN = GSMSystemParameter.ParaMcc;
                                        }
                                    }
                                    else if (Item.Key == "paraMnc")
                                    {
                                        if (Item.Value.ToString().Length == 1)
                                        {
                                            GSMSystemParameter.ParaMnc = "0" + Item.Value.ToString();
                                            GSMSelfCarrierOneDetailInfo.ParaMnc = "0" + Item.Value.ToString();
                                        }
                                        else
                                        {
                                            GSMSystemParameter.ParaMnc = Item.Value.ToString();
                                            GSMSelfCarrierOneDetailInfo.ParaMnc = Item.Value.ToString();
                                        }

                                        if (GSMSelfCarrierOneDetailInfo.PLMN != "" && GSMSelfCarrierOneDetailInfo.PLMN != null)
                                        {
                                            GSMSelfCarrierOneDetailInfo.PLMN += GSMSystemParameter.ParaMnc;
                                        }
                                        else
                                        {
                                            GSMSelfCarrierOneDetailInfo.PLMN = GSMSystemParameter.ParaMnc;
                                        }
                                    }
                                    else if (Item.Key == "paraBsic")
                                    {
                                        GSMSystemParameter.ParaBsic = Item.Value.ToString();
                                        GSMSelfCarrierOneDetailInfo.ParaBsic = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraLac")
                                    {
                                        GSMSystemParameter.ParaLac = Item.Value.ToString();
                                        GSMSelfCarrierOneDetailInfo.ParaLac = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraCellId")
                                    {
                                        GSMSystemParameter.CellID = Item.Value.ToString();
                                        GSMSelfCarrierOneDetailInfo.CellID = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraC2")
                                    {
                                        GSMSystemParameter.ParaC2 = Item.Value.ToString();
                                        GSMSelfCarrierOneDetailInfo.ParaC2 = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraPeri")
                                    {
                                        GSMSystemParameter.ParaPeri = Item.Value.ToString();
                                        GSMSelfCarrierOneDetailInfo.ParaPeri = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraAccPwr")
                                    {
                                        GSMSystemParameter.ParaAccPwr = Item.Value.ToString();
                                        GSMSelfCarrierOneDetailInfo.ParaAccPwr = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraMsPwr")
                                    {
                                        GSMSystemParameter.ParaMsPwr = Item.Value.ToString();
                                        GSMSelfCarrierOneDetailInfo.ParaMsPwr = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraRejCau")
                                    {
                                        GSMSystemParameter.ParaRejCau = Item.Value.ToString();
                                        GSMSelfCarrierOneDetailInfo.ParaRejCau = Item.Value.ToString();
                                    }

                                    //系充选项
                                    else if (Item.Key == "opLuSms")
                                    {
                                        GSMSystemOptionParameter.OpLuSms = Item.Value.ToString();
                                        if (Item.Value.ToString() == "0")
                                        {
                                            GSMSelfCarrierOneDetailInfo.OpLuSms = "否";
                                        }
                                        else if (Item.Value.ToString() == "1")
                                        {
                                            GSMSelfCarrierOneDetailInfo.OpLuSms = "是";
                                        }
                                    }
                                    else if (Item.Key == "opLuImei")
                                    {
                                        GSMSystemOptionParameter.OpLuImei = Item.Value.ToString();
                                        if (Item.Value.ToString() == "0")
                                        {
                                            GSMSelfCarrierOneDetailInfo.OpLuImei = "否";
                                        }
                                        else if (Item.Value.ToString() == "1")
                                        {
                                            GSMSelfCarrierOneDetailInfo.OpLuImei = "是";
                                        }
                                    }
                                    else if (Item.Key == "opCallEn")
                                    {
                                        GSMSystemOptionParameter.OpCallEn = Item.Value.ToString();
                                        if (Item.Value.ToString() == "0")
                                        {
                                            GSMSelfCarrierOneDetailInfo.OpLuImei = "不允许";
                                        }
                                        else if (Item.Value.ToString() == "1")
                                        {
                                            GSMSelfCarrierOneDetailInfo.OpLuImei = "允许";
                                        }
                                    }
                                    else if (Item.Key == "opDebug")
                                    {
                                        GSMSystemOptionParameter.OpDebug = Item.Value.ToString();
                                        GSMSelfCarrierOneDetailInfo.OpDebug = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "opSmsType")
                                    {
                                        GSMSystemOptionParameter.OpSmsType = (int.Parse(Item.Value.ToString()) - 1).ToString();
                                        if (Item.Value.ToString() == "1")
                                        {
                                            GSMSelfCarrierOneDetailInfo.OpSmsType = "所有用户";
                                        }
                                        else if (Item.Value.ToString() == "2")
                                        {
                                            GSMSelfCarrierOneDetailInfo.OpSmsType = "库内用户";
                                        }
                                        else if (Item.Value.ToString() == "3")
                                        {
                                            GSMSelfCarrierOneDetailInfo.OpSmsType = "库外用户";
                                        }
                                    }
                                    else if (Item.Key == "opLuType")
                                    {
                                        GSMSystemOptionParameter.OpLuType = (int.Parse(Item.Value.ToString()) - 1).ToString();
                                        if (Item.Value.ToString() == "1")
                                        {
                                            GSMSelfCarrierOneDetailInfo.OpLuType = "全抓";
                                        }
                                        else if (Item.Value.ToString() == "2")
                                        {
                                            GSMSelfCarrierOneDetailInfo.OpLuType = "特定目标";
                                        }
                                        else if (Item.Value.ToString() == "3")
                                        {
                                            GSMSelfCarrierOneDetailInfo.OpLuType = "普通用户";
                                        }
                                    }

                                    //注册工作模式
                                    else if (Item.Key == "opRegModel")
                                    {
                                        GSMRegModeParameter.RegMode = Item.Value.ToString();
                                        GSMSelfCarrierOneDetailInfo.RegMode = Item.Value.ToString();
                                    }

                                    //射频参数
                                    else if (Item.Key == "rfEnable")
                                    {
                                        GSMRadioFrequencyParameter.RfEnable = Item.Value.ToString();
                                        if (GSMRadioFrequencyParameter.RfEnable == "0")
                                        {
                                            GSMSelfCarrierOneDetailInfo.RfEnable = "未激活";
                                        }
                                        else
                                        {
                                            GSMSelfCarrierOneDetailInfo.RfEnable = "激活";
                                        }
                                    }
                                    else if (Item.Key == "rfFreq")
                                    {
                                        GSMRadioFrequencyParameter.RfFreq = Item.Value.ToString();
                                        GSMSelfCarrierOneDetailInfo.RfFreq = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "rfPwr")
                                    {
                                        GSMRadioFrequencyParameter.RfPwr = Item.Value.ToString();
                                        GSMSelfCarrierOneDetailInfo.RfPwr = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "activeTime1Start")
                                    {
                                        FirstPeriodTimeStart = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "activeTime1Ended")
                                    {
                                        FirstPeriodTimeEnd = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "activeTime2Start")
                                    {
                                        SecondPeriodTimeStart = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "activeTime2Ended")
                                    {
                                        SecoondPeriodTimeEnd = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "activeTime3Start")
                                    {
                                        ThreePeriodTimeStart = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "activeTime3Ended")
                                    {
                                        ThreePeriodTimeEnd = Item.Value.ToString();
                                    }

                                    UnLoop++;
                                }

                                //GSM短信列表(载波一)
                                if (Parameters.ConfigType != "LoadedDevice") //自动加载不存入
                                {
                                    if (resultData.Body.n_dic != null)
                                    {
                                        if (resultData.Body.n_dic.Count > 0)
                                        {
                                            foreach (MsgStruct.Name_DIC_Struct MsgItems in resultData.Body.n_dic)
                                            {
                                                GSMSMSParameterClass SMS = new GSMSMSParameterClass();
                                                SMS.CarrierOne = true;
                                                SMS.CarrierTwo = false;
                                                foreach (KeyValuePair<string, object> Item in MsgItems.dic)
                                                {
                                                    if (Item.Key == "smsRPOA")
                                                    {
                                                        SMS.GSmsRpoa = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "smsTPOA")
                                                    {
                                                        SMS.GSmsTpoa = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "smsSCTS")
                                                    {
                                                        SMS.GSmsScts = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "smsDATA")
                                                    {
                                                        SMS.GSmsData = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "autoSend")
                                                    {
                                                        SMS.AutoSendtiny = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "autoFilterSMS")
                                                    {
                                                        SMS.AutoFilterSMStiny = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "delayTime")
                                                    {
                                                        SMS.DelayTime = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "smsCoding")
                                                    {
                                                        SMS.SmsCodingtiny = Item.Value.ToString();
                                                    }
                                                }

                                                lock (JsonInterFace.APATTributesLists[i].SMSRWLock)
                                                {
                                                    JsonInterFace.APATTributesLists[i].GSMSMSParameterList.Add(SMS);
                                                }
                                            }

                                            //显示到列表
                                            Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_GSMSMSListResponse, 0, 0);
                                        }
                                    }
                                }

                                GSMSelfCarrierOneDetailInfo.PLMN = GSMSelfCarrierOneDetailInfo.PLMN + "-" + OperatorsList.GetOperators(GSMSelfCarrierOneDetailInfo.PLMN);

                                APATTributesLists[i].GSMDeviceCarrierOneInfoList.Clear();
                                APATTributesLists[i].GSMDeviceCarrierOneInfoList.Add(GSMSelfCarrierOneDetailInfo);

                                //时间控制
                                APATTributesLists[i].FirstPeriodTimeStart = FirstPeriodTimeStart;
                                APATTributesLists[i].FirstPeriodTimeEnd = FirstPeriodTimeEnd;
                                APATTributesLists[i].SecondPeriodTimeStart = SecondPeriodTimeStart;
                                APATTributesLists[i].SecoondPeriodTimeEnd = SecoondPeriodTimeEnd;
                                APATTributesLists[i].ThreePeriodTimeStart = ThreePeriodTimeStart;
                                APATTributesLists[i].ThreePeriodTimeEnd = ThreePeriodTimeEnd;
                                JsonInterFace.GSMDeviceAdvanceSettingParameter.FirstPeriodTimeStart = FirstPeriodTimeStart;
                                JsonInterFace.GSMDeviceAdvanceSettingParameter.FirstPeriodTimeEnd = FirstPeriodTimeEnd;
                                JsonInterFace.GSMDeviceAdvanceSettingParameter.SecondPeriodTimeStart = SecondPeriodTimeStart;
                                JsonInterFace.GSMDeviceAdvanceSettingParameter.SecoondPeriodTimeEnd = SecoondPeriodTimeEnd;
                                JsonInterFace.GSMDeviceAdvanceSettingParameter.ThreePeriodTimeStart = ThreePeriodTimeStart;
                                JsonInterFace.GSMDeviceAdvanceSettingParameter.ThreePeriodTimeEnd = ThreePeriodTimeEnd;

                                break;
                            }
                            else if (carrier == "1")
                            {
                                GSMSelfCarrierTwoDetailInfo.DomainFullPathName = parentFullPathName + "." + DeviceName;
                                GSMSelfCarrierTwoDetailInfo.CarrierOne = Convert.ToBoolean(Convert.ToInt32(carrier));
                                GSMSelfCarrierTwoDetailInfo.PLMN = string.Empty;

                                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                                {
                                    if (UnLoop <= Loop - 1) { UnLoop++; continue; }

                                    //系统参数
                                    if (Item.Key == "paraMcc")
                                    {
                                        if (Item.Value.ToString().Length == 1)
                                        {
                                            GSMSystemParameter.ParaMcc = "00" + Item.Value.ToString();
                                            GSMSelfCarrierTwoDetailInfo.ParaMcc = "00" + Item.Value.ToString();
                                        }
                                        else if (Item.Value.ToString().Length == 2)
                                        {
                                            GSMSystemParameter.ParaMcc = "0" + Item.Value.ToString();
                                            GSMSelfCarrierTwoDetailInfo.ParaMcc = "0" + Item.Value.ToString();
                                        }
                                        else
                                        {
                                            GSMSystemParameter.ParaMcc = Item.Value.ToString();
                                            GSMSelfCarrierTwoDetailInfo.ParaMcc = Item.Value.ToString();
                                        }

                                        if (GSMSelfCarrierTwoDetailInfo.PLMN != "" && GSMSelfCarrierTwoDetailInfo.PLMN != null)
                                        {
                                            GSMSelfCarrierTwoDetailInfo.PLMN = GSMSystemParameter.ParaMcc + GSMSelfCarrierTwoDetailInfo.PLMN;
                                        }
                                        else
                                        {
                                            GSMSelfCarrierTwoDetailInfo.PLMN = GSMSystemParameter.ParaMcc;
                                        }
                                    }
                                    else if (Item.Key == "paraMnc")
                                    {
                                        if (Item.Value.ToString().Length == 1)
                                        {
                                            GSMSystemParameter.ParaMnc = "0" + Item.Value.ToString();
                                            GSMSelfCarrierTwoDetailInfo.ParaMnc = "0" + Item.Value.ToString();
                                        }
                                        else
                                        {
                                            GSMSystemParameter.ParaMnc = Item.Value.ToString();
                                            GSMSelfCarrierTwoDetailInfo.ParaMnc = Item.Value.ToString();
                                        }

                                        if (GSMSelfCarrierTwoDetailInfo.PLMN != "" && GSMSelfCarrierTwoDetailInfo.PLMN != null)
                                        {
                                            GSMSelfCarrierTwoDetailInfo.PLMN += GSMSystemParameter.ParaMnc;
                                        }
                                        else
                                        {
                                            GSMSelfCarrierTwoDetailInfo.PLMN = GSMSystemParameter.ParaMnc;
                                        }
                                    }
                                    else if (Item.Key == "paraBsic")
                                    {
                                        GSMSystemParameter.ParaBsic = Item.Value.ToString();
                                        GSMSelfCarrierTwoDetailInfo.ParaBsic = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraLac")
                                    {
                                        GSMSystemParameter.ParaLac = Item.Value.ToString();
                                        GSMSelfCarrierTwoDetailInfo.ParaLac = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraCellId")
                                    {
                                        GSMSystemParameter.CellID = Item.Value.ToString();
                                        GSMSelfCarrierTwoDetailInfo.CellID = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraC2")
                                    {
                                        GSMSystemParameter.ParaC2 = Item.Value.ToString();
                                        GSMSelfCarrierTwoDetailInfo.ParaC2 = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraPeri")
                                    {
                                        GSMSystemParameter.ParaPeri = Item.Value.ToString();
                                        GSMSelfCarrierTwoDetailInfo.ParaPeri = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraAccPwr")
                                    {
                                        GSMSystemParameter.ParaAccPwr = Item.Value.ToString();
                                        GSMSelfCarrierTwoDetailInfo.ParaAccPwr = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraMsPwr")
                                    {
                                        GSMSystemParameter.ParaMsPwr = Item.Value.ToString();
                                        GSMSelfCarrierTwoDetailInfo.ParaMsPwr = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "paraRejCau")
                                    {
                                        GSMSystemParameter.ParaRejCau = Item.Value.ToString();
                                        GSMSelfCarrierTwoDetailInfo.ParaRejCau = Item.Value.ToString();
                                    }

                                    //系充选项
                                    else if (Item.Key == "opLuSms")
                                    {
                                        GSMSystemOptionParameter.OpLuSms = Item.Value.ToString();
                                        if (Item.Value.ToString() == "0")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.OpLuSms = "否";
                                        }
                                        else if (Item.Value.ToString() == "1")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.OpLuSms = "是";
                                        }
                                    }
                                    else if (Item.Key == "opLuImei")
                                    {
                                        GSMSystemOptionParameter.OpLuImei = Item.Value.ToString();
                                        if (Item.Value.ToString() == "0")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.OpLuImei = "否";
                                        }
                                        else if (Item.Value.ToString() == "1")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.OpLuImei = "是";
                                        }
                                    }
                                    else if (Item.Key == "opCallEn")
                                    {
                                        GSMSystemOptionParameter.OpCallEn = Item.Value.ToString();
                                        if (Item.Value.ToString() == "0")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.OpLuImei = "不允许";
                                        }
                                        else if (Item.Value.ToString() == "1")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.OpLuImei = "允许";
                                        }
                                    }
                                    else if (Item.Key == "opDebug")
                                    {
                                        GSMSystemOptionParameter.OpDebug = Item.Value.ToString();
                                        GSMSelfCarrierTwoDetailInfo.OpDebug = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "opSmsType")
                                    {
                                        GSMSystemOptionParameter.OpSmsType = (int.Parse(Item.Value.ToString()) - 1).ToString();
                                        if (Item.Value.ToString() == "1")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.OpSmsType = "所有用户";
                                        }
                                        else if (Item.Value.ToString() == "2")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.OpSmsType = "库内用户";
                                        }
                                        else if (Item.Value.ToString() == "3")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.OpSmsType = "库外用户";
                                        }
                                    }
                                    else if (Item.Key == "opLuType")
                                    {
                                        GSMSystemOptionParameter.OpLuType = (int.Parse(Item.Value.ToString()) - 1).ToString();
                                        if (Item.Value.ToString() == "1")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.OpLuType = "全抓";
                                        }
                                        else if (Item.Value.ToString() == "2")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.OpLuType = "特定目标";
                                        }
                                        else if (Item.Value.ToString() == "3")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.OpLuType = "普通用户";
                                        }
                                    }

                                    //注册工作模式
                                    else if (Item.Key == "opRegModel")
                                    {
                                        GSMRegModeParameter.RegMode = Item.Value.ToString();
                                        GSMSelfCarrierTwoDetailInfo.RegMode = Item.Value.ToString();
                                    }

                                    //射频参数
                                    else if (Item.Key == "rfEnable")
                                    {
                                        GSMRadioFrequencyParameter.RfEnable = Item.Value.ToString();
                                        if (GSMRadioFrequencyParameter.RfEnable == "0")
                                        {
                                            GSMSelfCarrierTwoDetailInfo.RfEnable = "未激活";
                                        }
                                        else
                                        {
                                            GSMSelfCarrierTwoDetailInfo.RfEnable = "激活";
                                        }
                                    }
                                    else if (Item.Key == "rfFreq")
                                    {
                                        GSMRadioFrequencyParameter.RfFreq = Item.Value.ToString();
                                        GSMSelfCarrierTwoDetailInfo.RfFreq = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "rfPwr")
                                    {
                                        GSMRadioFrequencyParameter.RfPwr = Item.Value.ToString();
                                        GSMSelfCarrierTwoDetailInfo.RfPwr = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "activeTime1Start")
                                    {
                                        FirstPeriodTimeStart = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "activeTime1Ended")
                                    {
                                        FirstPeriodTimeEnd = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "activeTime2Start")
                                    {
                                        SecondPeriodTimeStart = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "activeTime2Ended")
                                    {
                                        SecoondPeriodTimeEnd = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "activeTime3Start")
                                    {
                                        ThreePeriodTimeStart = Item.Value.ToString();
                                    }
                                    else if (Item.Key == "activeTime3Ended")
                                    {
                                        ThreePeriodTimeEnd = Item.Value.ToString();
                                    }

                                    UnLoop++;
                                }

                                //GSM短信列表(载波二)
                                if (Parameters.ConfigType != "LoadedDevice") //自动加载不存入
                                {
                                    if (resultData.Body.n_dic != null)
                                    {
                                        if (resultData.Body.n_dic.Count > 0)
                                        {
                                            foreach (MsgStruct.Name_DIC_Struct MsgItems in resultData.Body.n_dic)
                                            {
                                                GSMSMSParameterClass SMS = new GSMSMSParameterClass();
                                                SMS.CarrierOne = false;
                                                SMS.CarrierTwo = true;
                                                foreach (KeyValuePair<string, object> Item in MsgItems.dic)
                                                {
                                                    if (Item.Key == "smsRPOA")
                                                    {
                                                        SMS.GSmsRpoa = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "smsTPOA")
                                                    {
                                                        SMS.GSmsTpoa = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "smsSCTS")
                                                    {
                                                        SMS.GSmsScts = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "smsDATA")
                                                    {
                                                        SMS.GSmsData = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "autoSend")
                                                    {
                                                        SMS.AutoSendtiny = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "autoFilterSMS")
                                                    {
                                                        SMS.AutoFilterSMStiny = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "delayTime")
                                                    {
                                                        SMS.DelayTime = Item.Value.ToString();
                                                    }
                                                    if (Item.Key == "smsCoding")
                                                    {
                                                        SMS.SmsCodingtiny = Item.Value.ToString();
                                                    }
                                                }
                                                lock (JsonInterFace.APATTributesLists[i].SMSRWLock)
                                                {
                                                    JsonInterFace.APATTributesLists[i].GSMSMSParameterList.Add(SMS);
                                                }
                                            }

                                            //显示到列表
                                            Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_GSMSMSListResponse, 0, 0);
                                        }
                                    }
                                }

                                GSMSelfCarrierTwoDetailInfo.PLMN = GSMSelfCarrierTwoDetailInfo.PLMN + "-" + OperatorsList.GetOperators(GSMSelfCarrierTwoDetailInfo.PLMN);

                                APATTributesLists[i].GSMDeviceCarrierTwoInfoList.Clear();
                                APATTributesLists[i].GSMDeviceCarrierTwoInfoList.Add(GSMSelfCarrierTwoDetailInfo);

                                //时间控制
                                APATTributesLists[i].FirstPeriodTimeStart = FirstPeriodTimeStart;
                                APATTributesLists[i].FirstPeriodTimeEnd = FirstPeriodTimeEnd;
                                APATTributesLists[i].SecondPeriodTimeStart = SecondPeriodTimeStart;
                                APATTributesLists[i].SecoondPeriodTimeEnd = SecoondPeriodTimeEnd;
                                APATTributesLists[i].ThreePeriodTimeStart = ThreePeriodTimeStart;
                                APATTributesLists[i].ThreePeriodTimeEnd = ThreePeriodTimeEnd;
                                JsonInterFace.GSMDeviceAdvanceSettingParameter.FirstPeriodTimeStart = FirstPeriodTimeStart;
                                JsonInterFace.GSMDeviceAdvanceSettingParameter.FirstPeriodTimeEnd = FirstPeriodTimeEnd;
                                JsonInterFace.GSMDeviceAdvanceSettingParameter.SecondPeriodTimeStart = SecondPeriodTimeStart;
                                JsonInterFace.GSMDeviceAdvanceSettingParameter.SecoondPeriodTimeEnd = SecoondPeriodTimeEnd;
                                JsonInterFace.GSMDeviceAdvanceSettingParameter.ThreePeriodTimeStart = ThreePeriodTimeStart;
                                JsonInterFace.GSMDeviceAdvanceSettingParameter.ThreePeriodTimeEnd = ThreePeriodTimeEnd;
                            }

                            break;
                        }
                    }
                }

                if (Parameters.ConfigType == "LoadedDevice")
                {
                    if (carrier == "0")
                    {
                        SystemLogsInfo.Input(DateTime.Now.ToString(), "获取设备[" + parentFullPathName + "." + DeviceName + "]载波(" + carrier + ")系统参数" + ReturnStr + " ------ [" + Parameters.UniversalCounter.ToString() + "/" + JsonInterFace.ActionResultStatus.APCount.ToString() + "]", "获取载波(" + carrier + ")参数", ReturnStr);
                    }
                    else if (carrier == "1")
                    {
                        lock (JsonInterFace.ActionResultStatus.FinishedLock)
                        {
                            JsonInterFace.ActionResultStatus.Carrier = carrier;
                            JsonInterFace.ActionResultStatus.Finished = true;
                        }
                    }
                }
                else
                {
                    if (carrier == "0")
                    {
                        SystemLogsInfo.Input(DateTime.Now.ToString(), "获取设备[" + parentFullPathName + "." + DeviceName + "]载波(1)系统参数" + ReturnStr, "获取载波(1)参数", ReturnStr);
                    }
                    else if (carrier == "1")
                    {
                        SystemLogsInfo.Input(DateTime.Now.ToString(), "获取设备[" + parentFullPathName + "." + DeviceName + "]载波(2)系统参数" + ReturnStr, "获取载波(2)参数", ReturnStr);
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 添加登录库IMSI
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        public static string GSMLibraryRegAddIMSIRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMLibraryRegAddPara = new Dictionary<string, object>();
                if (GSMLibyraryRegAdd.CarrierOne)
                {
                    GSMLibraryRegAddPara.Add("sys", (Convert.ToInt32(GSMLibyraryRegAdd.CarrierOne) - 1).ToString());
                }
                else if (GSMLibyraryRegAdd.CarrierTwo)
                {
                    GSMLibraryRegAddPara.Add("sys", Convert.ToInt32(GSMLibyraryRegAdd.CarrierTwo).ToString());
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMLibraryRegAddPara.Add("AllNum", GSMLibraryRegAddPara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMLibraryAddBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMLibraryRegAddPara);

                GSMLibraryAddBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();

                //系统参数
                MsgStruct.Name_DIC_Struct LibraryAdd_n_dic = new MsgStruct.Name_DIC_Struct();
                LibraryAdd_n_dic.name = "RECV_LIBRARY_REG_ADD";
                if (GSMLibyraryRegAdd.IMSI != "" && GSMLibyraryRegAdd.IMSI != null)
                {
                    LibraryAdd_n_dic.dic.Add("type", "IMSI");
                    LibraryAdd_n_dic.dic.Add("gLibrary", GSMLibyraryRegAdd.IMSI);
                }
                GSMLibraryAddBody.n_dic.Add(LibraryAdd_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMLibraryAddBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 添加登录库IMEI
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        public static string GSMLibraryRegAddIMEIRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMLibraryRegAddPara = new Dictionary<string, object>();
                if (GSMLibyraryRegAdd.CarrierOne)
                {
                    GSMLibraryRegAddPara.Add("sys", (Convert.ToInt32(GSMLibyraryRegAdd.CarrierOne) - 1).ToString());
                }
                else if (GSMLibyraryRegAdd.CarrierTwo)
                {
                    GSMLibraryRegAddPara.Add("sys", Convert.ToInt32(GSMLibyraryRegAdd.CarrierTwo).ToString());
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMLibraryRegAddPara.Add("AllNum", GSMLibraryRegAddPara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMLibraryAddBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMLibraryRegAddPara);

                GSMLibraryAddBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();

                //系统参数
                MsgStruct.Name_DIC_Struct LibraryAdd_n_dic = new MsgStruct.Name_DIC_Struct();
                LibraryAdd_n_dic.name = "RECV_LIBRARY_REG_ADD";
                if (GSMLibyraryRegAdd.IMEI != "" && GSMLibyraryRegAdd.IMEI != null)
                {
                    LibraryAdd_n_dic.dic.Add("type", "IMEI");
                    LibraryAdd_n_dic.dic.Add("gLibrary", GSMLibyraryRegAdd.IMEI);
                }
                GSMLibraryAddBody.n_dic.Add(LibraryAdd_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMLibraryAddBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSM查询登录库(白名单)
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMLibraryRegQueryRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMLibraryRegQueryPara = new Dictionary<string, object>();
                if (GSMLibyraryRegAdd.CarrierOne)
                {
                    GSMLibraryRegQueryPara.Add("sys", (Convert.ToInt32(GSMLibyraryRegAdd.CarrierOne) - 1).ToString());
                }
                else if (GSMLibyraryRegAdd.CarrierTwo)
                {
                    GSMLibraryRegQueryPara.Add("sys", Convert.ToInt32(GSMLibyraryRegAdd.CarrierTwo).ToString());
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMLibraryRegQueryPara.Add("AllNum", GSMLibraryRegQueryPara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMLibraryAddBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMLibraryRegQueryPara);

                GSMLibraryAddBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct LibraryAdd_n_dic = new MsgStruct.Name_DIC_Struct();
                LibraryAdd_n_dic.name = RecvPktType.RECV_LIBRARY_REG_QUERY.ToString();
                GSMLibraryAddBody.n_dic.Add(LibraryAdd_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMLibraryAddBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSM清空登录库(白名单)
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMLibraryRegDelAllRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMLibraryRegDelAllPara = new Dictionary<string, object>();
                if (GSMLibyraryRegAdd.CarrierOne)
                {
                    GSMLibraryRegDelAllPara.Add("sys", (Convert.ToInt32(GSMLibyraryRegAdd.CarrierOne) - 1).ToString());
                }
                else if (GSMLibyraryRegAdd.CarrierTwo)
                {
                    GSMLibraryRegDelAllPara.Add("sys", Convert.ToInt32(GSMLibyraryRegAdd.CarrierTwo).ToString());
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMLibraryRegDelAllPara.Add("AllNum", GSMLibraryRegDelAllPara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMLibraryAddBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMLibraryRegDelAllPara);

                GSMLibraryAddBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct LibraryAdd_n_dic = new MsgStruct.Name_DIC_Struct();
                LibraryAdd_n_dic.name = RecvPktType.RECV_LIBRARY_REG_DELALL.ToString();
                GSMLibraryAddBody.n_dic.Add(LibraryAdd_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMLibraryAddBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSM 短信息发送
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMSMSSenderRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMSMSSenderPara = new Dictionary<string, object>();
                if (GSMSMSParameter.CarrierOne)
                {
                    GSMSMSSenderPara.Add("sys", (Convert.ToInt32(GSMSMSParameter.CarrierOne) - 1).ToString());
                }
                else if (GSMSMSParameter.CarrierTwo)
                {
                    GSMSMSSenderPara.Add("sys", Convert.ToInt32(GSMSMSParameter.CarrierTwo).ToString());
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMSMSSenderPara.Add("AllNum", GSMSMSSenderPara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMSMSSenderParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMSMSSenderPara);

                GSMSMSSenderParaBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct LibraryAdd_n_dic = new MsgStruct.Name_DIC_Struct();

                LibraryAdd_n_dic.name = RecvPktType.RECV_SMS_OPTION.ToString();

                LibraryAdd_n_dic.dic.Add("gSmsRpoa", GSMSMSParameter.GSmsRpoa);
                LibraryAdd_n_dic.dic.Add("gSmsTpoa", GSMSMSParameter.GSmsTpoa);
                LibraryAdd_n_dic.dic.Add("gSmsScts", GSMSMSParameter.GSmsScts);
                LibraryAdd_n_dic.dic.Add("gSmsData", GSMSMSParameter.GSmsData);
                LibraryAdd_n_dic.dic.Add("autoSendtiny", GSMSMSParameter.AutoSendtiny);
                LibraryAdd_n_dic.dic.Add("autoFilterSMStiny", GSMSMSParameter.AutoFilterSMStiny);
                LibraryAdd_n_dic.dic.Add("delayTime", GSMSMSParameter.DelayTime);
                LibraryAdd_n_dic.dic.Add("smsCodingtiny", GSMSMSParameter.SmsCodingtiny);
                GSMSMSSenderParaBody.n_dic.Add(LibraryAdd_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMSMSSenderParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// CDMA重启动
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string CDMARebootRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> CDMARebootPara = new Dictionary<string, object>();
                CDMARebootPara.Add("sys", "0");

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                CDMARebootPara.Add("AllNum", CDMARebootPara.Count + 1);

                MsgStruct.Msg_Body_Struct CDMARebootParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, CDMARebootPara);

                CDMARebootParaBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct Reboot_n_dic = new MsgStruct.Name_DIC_Struct();
                Reboot_n_dic.name = CDMAMsgType.CONTROL_FAP_REBOOT_MSG.ToString();
                Reboot_n_dic.dic.Add("bRebootFlag", "1");
                CDMARebootParaBody.n_dic.Add(Reboot_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = CDMARebootParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// CDMA激活
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string CDMAActiveRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> CDMAActivePara = new Dictionary<string, object>();
                CDMAActivePara.Add("sys", "0");

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                CDMAActivePara.Add("AllNum", CDMAActivePara.Count + 1);

                MsgStruct.Msg_Body_Struct CDMAActiveParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, CDMAActivePara);

                CDMAActiveParaBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct Active_n_dic = new MsgStruct.Name_DIC_Struct();
                Active_n_dic.name = CDMAMsgType.CONTROL_FAP_RADIO_ON_MSG.ToString();
                CDMAActiveParaBody.n_dic.Add(Active_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = CDMAActiveParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// CDMA去激活
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string CDMAUnActiveRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> CDMAUnActivePara = new Dictionary<string, object>();
                CDMAUnActivePara.Add("sys", "0");

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                CDMAUnActivePara.Add("AllNum", CDMAUnActivePara.Count + 1);

                MsgStruct.Msg_Body_Struct CDMAUnActiveParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, CDMAUnActivePara);

                CDMAUnActiveParaBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct UnActive_n_dic = new MsgStruct.Name_DIC_Struct();
                UnActive_n_dic.name = CDMAMsgType.CONTROL_FAP_RADIO_OFF_MSG.ToString();
                CDMAUnActiveParaBody.n_dic.Add(UnActive_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = CDMAUnActiveParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// CDMA小区参数信息查询
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string CDMACellPARAMRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> CDMACellPARAMPara = new Dictionary<string, object>();
                CDMACellPARAMPara.Add("parentFullPathName", domainFullPathName);
                CDMACellPARAMPara.Add("name", deviceName);
                CDMACellPARAMPara.Add("carry", "-1");

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                CDMACellPARAMPara.Add("AllNum", CDMACellPARAMPara.Count + 1);

                MsgStruct.Msg_Body_Struct CDMACellPARAMParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_GCInfo_Request, CDMACellPARAMPara);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = string.Empty;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.ApInfo.Type = string.Empty;
                msgStruct.Body = CDMACellPARAMParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// CDMA多载波参数设置请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string CDMAMultiCarrierSettingRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            string FreqMode = string.Empty;
            try
            {
                Dictionary<string, object> CDMAMultiCarrierPara = new Dictionary<string, object>();
                CDMAMultiCarrierPara.Add("sys", "0");

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                CDMAMultiCarrierPara.Add("AllNum", CDMAMultiCarrierPara.Count + 1);

                MsgStruct.Msg_Body_Struct CDMAMultiCarrierParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, CDMAMultiCarrierPara);

                CDMAMultiCarrierParaBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct ModelPara_n_dic = new MsgStruct.Name_DIC_Struct();
                ModelPara_n_dic.name = CDMAMsgType.CONFIG_CDMA_CARRIER_MSG.ToString();
                ModelPara_n_dic.dic.Add("wARFCN1", CDMAMultiCarrierParameter.WARFCN1);
                if (CDMAMultiCarrierParameter.BARFCN1Mode.Scanner)
                {
                    FreqMode = "0";
                }
                else if (CDMAMultiCarrierParameter.BARFCN1Mode.NormallyRun)
                {
                    FreqMode = "1";
                }
                else if (CDMAMultiCarrierParameter.BARFCN1Mode.Closed)
                {
                    FreqMode = "2";
                }
                else
                {
                    FreqMode = "-1";
                }
                ModelPara_n_dic.dic.Add("bARFCN1Mode", FreqMode);
                ModelPara_n_dic.dic.Add("wARFCN1Duration", CDMAMultiCarrierParameter.WARFCN1Duration);
                ModelPara_n_dic.dic.Add("wARFCN1Period", CDMAMultiCarrierParameter.WARFCN1Period);

                ModelPara_n_dic.dic.Add("wARFCN2", CDMAMultiCarrierParameter.WARFCN2);
                if (CDMAMultiCarrierParameter.BARFCN2Mode.Scanner)
                {
                    FreqMode = "0";
                }
                else if (CDMAMultiCarrierParameter.BARFCN2Mode.NormallyRun)
                {
                    FreqMode = "1";
                }
                else if (CDMAMultiCarrierParameter.BARFCN2Mode.Closed)
                {
                    FreqMode = "2";
                }
                else
                {
                    FreqMode = "-1";
                }
                ModelPara_n_dic.dic.Add("bARFCN2Mode", FreqMode);
                ModelPara_n_dic.dic.Add("wARFCN2Duration", CDMAMultiCarrierParameter.WARFCN2Duration);
                ModelPara_n_dic.dic.Add("wARFCN2Period", CDMAMultiCarrierParameter.WARFCN2Period);

                ModelPara_n_dic.dic.Add("wARFCN3", CDMAMultiCarrierParameter.WARFCN3);
                if (CDMAMultiCarrierParameter.BARFCN3Mode.Scanner)
                {
                    FreqMode = "0";
                }
                else if (CDMAMultiCarrierParameter.BARFCN3Mode.NormallyRun)
                {
                    FreqMode = "1";
                }
                else if (CDMAMultiCarrierParameter.BARFCN3Mode.Closed)
                {
                    FreqMode = "2";
                }
                else
                {
                    FreqMode = "-1";
                }
                ModelPara_n_dic.dic.Add("bARFCN3Mode", FreqMode);
                ModelPara_n_dic.dic.Add("wARFCN3Duration", CDMAMultiCarrierParameter.WARFCN3Duration);
                ModelPara_n_dic.dic.Add("wARFCN3Period", CDMAMultiCarrierParameter.WARFCN3Period);

                ModelPara_n_dic.dic.Add("wARFCN4", CDMAMultiCarrierParameter.WARFCN4);
                if (CDMAMultiCarrierParameter.BARFCN4Mode.Scanner)
                {
                    FreqMode = "0";
                }
                else if (CDMAMultiCarrierParameter.BARFCN4Mode.NormallyRun)
                {
                    FreqMode = "1";
                }
                else if (CDMAMultiCarrierParameter.BARFCN4Mode.Closed)
                {
                    FreqMode = "2";
                }
                else
                {
                    FreqMode = "-1";
                }
                ModelPara_n_dic.dic.Add("bARFCN4Mode", FreqMode);
                ModelPara_n_dic.dic.Add("wARFCN4Duration", CDMAMultiCarrierParameter.WARFCN4Duration);
                ModelPara_n_dic.dic.Add("wARFCN4Period", CDMAMultiCarrierParameter.WARFCN4Period);
                CDMAMultiCarrierParaBody.n_dic.Add(ModelPara_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = Convert.ToInt32(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = CDMAMultiCarrierParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// CDMA多载波参数查询
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string CDMAMultiCarrierQueryRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> CDMAMultiCarrierQueryPara = new Dictionary<string, object>();
                CDMAMultiCarrierQueryPara.Add("parentFullPathName", domainFullPathName);
                CDMAMultiCarrierQueryPara.Add("name", deviceName);
                CDMAMultiCarrierQueryPara.Add("carry", "-1");

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                CDMAMultiCarrierQueryPara.Add("AllNum", CDMAMultiCarrierQueryPara.Count + 1);

                MsgStruct.Msg_Body_Struct CDMAMultiCarrierQueryParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_GCInfo_Request, CDMAMultiCarrierQueryPara);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = string.Empty;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = CDMAMultiCarrierQueryParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// CDMA IMSI 查询请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string CDMAIMSIQueryRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> CDMAIMSIQueryPara = new Dictionary<string, object>();
                CDMAIMSIQueryPara.Add("parentFullPathName", domainFullPathName);
                CDMAIMSIQueryPara.Add("name", deviceName);
                CDMAIMSIQueryPara.Add("carry", "-1");

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                CDMAIMSIQueryPara.Add("AllNum", CDMAIMSIQueryPara.Count + 1);

                MsgStruct.Msg_Body_Struct CDMAIMSIQueryParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_GCInfo_Request, CDMAIMSIQueryPara);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = string.Empty;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = CDMAIMSIQueryParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// CDMA IMSI 设置请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string CDMAIMSIActionRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, Dictionary<string, string> IMSIParaList)
        {
            string jsonStr = string.Empty;
            string FreqMode = string.Empty;
            try
            {
                Dictionary<string, object> CDMAMultiCarrierPara = new Dictionary<string, object>();
                CDMAMultiCarrierPara.Add("sys", "0");

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                CDMAMultiCarrierPara.Add("AllNum", CDMAMultiCarrierPara.Count + 1);

                MsgStruct.Msg_Body_Struct CDMAMultiCarrierParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, CDMAMultiCarrierPara);

                CDMAMultiCarrierParaBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct ModelPara_n_dic = new MsgStruct.Name_DIC_Struct();

                ModelPara_n_dic.name = CDMAMsgType.CONFIG_IMSI_MSG_V3_ID.ToString();

                foreach (KeyValuePair<string, string> ItemValue in IMSIParaList)
                {
                    ModelPara_n_dic.dic.Add(ItemValue.Key, ItemValue.Value);
                }
                CDMAMultiCarrierParaBody.n_dic.Add(ModelPara_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = Convert.ToInt32(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = CDMAMultiCarrierParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSMV2激活请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMV2ActiveRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string Carrier)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMV2ActivePara = new Dictionary<string, object>();
                GSMV2ActivePara.Add("sys", Carrier);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMV2ActivePara.Add("AllNum", GSMV2ActivePara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMV2ActiveParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMV2ActivePara);

                GSMV2ActiveParaBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct Active_n_dic = new MsgStruct.Name_DIC_Struct();
                Active_n_dic.name = CDMAMsgType.CONTROL_FAP_RADIO_ON_MSG.ToString();
                GSMV2ActiveParaBody.n_dic.Add(Active_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMV2ActiveParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSMV2去激活请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMV2UnActiveRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string Carrier)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMV2UnActivePara = new Dictionary<string, object>();
                GSMV2UnActivePara.Add("sys", Carrier);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMV2UnActivePara.Add("AllNum", GSMV2UnActivePara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMV2UnActiveParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMV2UnActivePara);

                GSMV2UnActiveParaBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct UnActive_n_dic = new MsgStruct.Name_DIC_Struct();
                UnActive_n_dic.name = CDMAMsgType.CONTROL_FAP_RADIO_OFF_MSG.ToString();
                GSMV2UnActiveParaBody.n_dic.Add(UnActive_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMV2UnActiveParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSMV2小区参数信息查询
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMV2CellPARAMRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string Carrier)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMV2CellPARAMPara = new Dictionary<string, object>();
                GSMV2CellPARAMPara.Add("parentFullPathName", domainFullPathName);
                GSMV2CellPARAMPara.Add("name", deviceName);
                GSMV2CellPARAMPara.Add("carry", Carrier);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMV2CellPARAMPara.Add("AllNum", GSMV2CellPARAMPara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMV2CellPARAMParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_GCInfo_Request, GSMV2CellPARAMPara);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = string.Empty;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = string.Empty;
                msgStruct.Body = GSMV2CellPARAMParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSMV2 IMSI 查询请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMV2IMSIQueryRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string Carrier)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMV2IMSIQueryPara = new Dictionary<string, object>();
                GSMV2IMSIQueryPara.Add("parentFullPathName", domainFullPathName);
                GSMV2IMSIQueryPara.Add("name", deviceName);
                GSMV2IMSIQueryPara.Add("carry", Carrier);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMV2IMSIQueryPara.Add("AllNum", GSMV2IMSIQueryPara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMV2IMSIQueryParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_GCInfo_Request, GSMV2IMSIQueryPara);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = string.Empty;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMV2IMSIQueryParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSMV2 IMSI 设置请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMV2IMSIActionRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, Dictionary<string, string> IMSIParaList, string Carrier)
        {
            string jsonStr = string.Empty;
            string FreqMode = string.Empty;
            try
            {
                Dictionary<string, object> GSMV2MultiCarrierPara = new Dictionary<string, object>();
                GSMV2MultiCarrierPara.Add("sys", Carrier);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMV2MultiCarrierPara.Add("AllNum", GSMV2MultiCarrierPara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMV2MultiCarrierParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMV2MultiCarrierPara);

                GSMV2MultiCarrierParaBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct ModelPara_n_dic = new MsgStruct.Name_DIC_Struct();

                ModelPara_n_dic.name = CDMAMsgType.CONFIG_IMSI_MSG_V3_ID.ToString();

                foreach (KeyValuePair<string, string> ItemValue in IMSIParaList)
                {
                    ModelPara_n_dic.dic.Add(ItemValue.Key, ItemValue.Value);
                }
                GSMV2MultiCarrierParaBody.n_dic.Add(ModelPara_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = Convert.ToInt32(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMV2MultiCarrierParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSMV2小区参数设置请求( TO AP)
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <param name="APCellNeighConfiguration"></param>
        /// <returns></returns>
        public static string GSMV2ConfigurationFAPRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string Carrier, Dictionary<string, string> APCellNeighConfiguration)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMV2CellNeighParam = new Dictionary<string, object>();
                GSMV2CellNeighParam.Add("sys", Carrier);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //CellNeighParam.Add("AllNum", CellNeighParam.Count + 1);

                MsgStruct.Msg_Body_Struct GSMV2CellNeighParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMV2CellNeighParam);
                GSMV2CellNeighParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct n_dic = new MsgStruct.Name_DIC_Struct();
                n_dic.name = CDMAMsgType.CONFIG_FAP_MSG.ToString();
                foreach (KeyValuePair<string, string> item in APCellNeighConfiguration)
                {
                    n_dic.dic.Add(item.Key, item.Value);
                }
                GSMV2CellNeighParamBody.n_dic.Add(n_dic);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }
                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }
                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }

                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }

                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = GSMV2CellNeighParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSMV2邻小区信息查询请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMV2NeighCellInfoQueryRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string Carrier)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMV2CellInfoQueryParam = new Dictionary<string, object>();
                GSMV2CellInfoQueryParam.Add("sys", Carrier);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //CellNeighParam.Add("AllNum", CellNeighParam.Count + 1);

                MsgStruct.Msg_Body_Struct GSMV2CellInfoQueryParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMV2CellInfoQueryParam);
                GSMV2CellInfoQueryParamBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct n_dic = new MsgStruct.Name_DIC_Struct();
                n_dic.name = "QUERY_NB_CELL_INFO_MSG";
                GSMV2CellInfoQueryParamBody.n_dic.Add(n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();

                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }

                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }

                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }
                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }
                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = GSMV2CellInfoQueryParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// GSMV2复位
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMV2ReStartRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string Carrier)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMV2ReStartPara = new Dictionary<string, object>();
                GSMV2ReStartPara.Add("sys", Carrier);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMV2ReStartPara.Add("AllNum", GSMV2ReStartPara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMV2ReStartParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMV2ReStartPara);

                GSMV2ReStartParaBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct UnActive_n_dic = new MsgStruct.Name_DIC_Struct();
                UnActive_n_dic.name = CDMAMsgType.CONTROL_FAP_RESET_MSG.ToString();
                GSMV2ReStartParaBody.n_dic.Add(UnActive_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMV2ReStartParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSMV2配置下发短信号码和内容
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMV2SMSIMSISettingRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string Carrier, string Type, string IMSI)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMV2SMSUEIDPara = new Dictionary<string, object>();
                GSMV2SMSUEIDPara.Add("sys", Carrier);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMV2SMSUEIDPara.Add("AllNum", GSMV2SMSUEIDPara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMV2SMSUEIDParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMV2SMSUEIDPara);

                GSMV2SMSUEIDParaBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct Reboot_n_dic = new MsgStruct.Name_DIC_Struct();
                Reboot_n_dic.name = "PAGE_UE_MSG";
                Reboot_n_dic.dic.Add("bpageType", Type);
                Reboot_n_dic.dic.Add("bUeId", IMSI);
                GSMV2SMSUEIDParaBody.n_dic.Add(Reboot_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMV2SMSUEIDParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSMV2配置下发短信号码和内容
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMV2SMSRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string Smsctrl, string BSMSOriginalNum, string BSMSContent, string Carrier)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMV2RebootPara = new Dictionary<string, object>();
                GSMV2RebootPara.Add("sys", Carrier);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMV2RebootPara.Add("AllNum", GSMV2RebootPara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMV2RebootParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.gsm_msg_send, GSMV2RebootPara);

                GSMV2RebootParaBody.n_dic = new List<MsgStruct.Name_DIC_Struct>();
                MsgStruct.Name_DIC_Struct Reboot_n_dic = new MsgStruct.Name_DIC_Struct();
                Reboot_n_dic.name = "CONFIG_SMS_CONTENT_MSG";
                Reboot_n_dic.dic.Add("sms_ctrl", Smsctrl);
                Reboot_n_dic.dic.Add("bSMSOriginalNum", BSMSOriginalNum);
                Reboot_n_dic.dic.Add("bSMSContent", BSMSContent);
                GSMV2RebootParaBody.n_dic.Add(Reboot_n_dic);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMV2RebootParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// GSMV2 上报UE主叫信息请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string GSMV2UEReportRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string Carrier)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> GSMV2IMSIQueryPara = new Dictionary<string, object>();
                GSMV2IMSIQueryPara.Add("parentFullPathName", domainFullPathName);
                GSMV2IMSIQueryPara.Add("name", deviceName);
                GSMV2IMSIQueryPara.Add("carry", Carrier);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                GSMV2IMSIQueryPara.Add("AllNum", GSMV2IMSIQueryPara.Count + 1);

                MsgStruct.Msg_Body_Struct GSMV2IMSIQueryParaBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_GCInfo_Request, GSMV2IMSIQueryPara);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = string.Empty;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = GSMV2IMSIQueryParaBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        #endregion

        #region LTE扫频查询相关
        /// <summary>
        /// 扫频结果请求
        /// </summary>
        /// <param></param>
        /// <returns></returns>
        public static string Get_son_earfcn_Request(string domainFullPathName, string deviceName, string IP, int Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> sonEarfcnParam = new Dictionary<string, object>();
                MsgStruct.Msg_Body_Struct sonEarfcnParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.cell_info_request, sonEarfcnParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = Port;
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = sonEarfcnParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 扫频结果响应
        /// </summary>
        /// <param></param>
        /// <returns></returns>
        public static void Get_son_earfcn_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Timestamp = string.Empty;
            string Frequency = string.Empty;
            string CellID = string.Empty;
            string mcc = string.Empty;
            string mnc = string.Empty;
            string cell = string.Empty;
            string ScramblingCode = string.Empty;
            string TAC_LAC = string.Empty;
            string Intensity = string.Empty;
            string CellNeighInfo = string.Empty;
            string CellNeighLevel = string.Empty;
            string Level = string.Empty;


            string UARFCN = string.Empty;
            string RSCP = string.Empty;
            string RSSI = string.Empty;
            string LAC = string.Empty;
            string CI = string.Empty;

            bool nextCount = false;
            string Fullname = string.Empty;
            try
            {
                string model = resultData.ApInfo.Type.Replace("_", "-");
                Fullname = resultData.ApInfo.Fullname;
                if (Parameters.ConfigType == "SelectScanner")
                {
                    if (model.Equals(DeviceType.TD_SCDMA))
                    {
                        TDSScannerInformation.ScannerInforTable.Rows.Clear();
                        DataRow dr = TDSScannerInformation.ScannerInforTable.NewRow();
                        foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                        {
                            if (Item.Key.Trim().Equals("timestamp"))
                            {
                                Timestamp = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/UARFCN"))
                            {
                                if (nextCount)
                                {
                                    DataRow tmpdr = TDSScannerInformation.ScannerInforTable.NewRow();
                                    tmpdr[0] = CellID;
                                    tmpdr[1] = UARFCN;
                                    tmpdr[2] = RSCP;
                                    tmpdr[3] = RSSI;
                                    tmpdr[4] = LAC;
                                    tmpdr[5] = CI;
                                    tmpdr[6] = Fullname;
                                    DataRow[] tempdr = TDSScannerInformation.ScannerInforTable.Select("CellID='" + CellID + "'");//去重复
                                    if (tempdr.Length > 0) continue;
                                    //TDSScannerInformation.ScannerInforTable.Rows.Add(tmpdr);
                                    TDSScannerInformation.ScannerInput(CellID, UARFCN, RSCP, RSSI, LAC, CI, Fullname);
                                }
                                CellID = "";
                                UARFCN = "";
                                RSCP = "";
                                RSSI = "";
                                LAC = "";
                                CI = "";
                                UARFCN = Item.Value.ToString();
                                nextCount = true;
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/RSCP"))
                            {
                                RSCP = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/RSSI"))
                            {
                                RSSI = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/CellId"))
                            {
                                CellID = Item.Value.ToString();
                                if (TDSScannerInformation.ScannerInforTable.Rows.Count > 0)
                                {
                                    foreach (DataRow tempdr in TDSScannerInformation.ScannerInforTable.Rows)
                                    {
                                        if (tempdr[0].ToString().Equals(CellID))
                                        {
                                            //nextCount = false;
                                        }
                                    }
                                }
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/LAC"))
                            {
                                LAC = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/CI"))
                            {
                                CI = Item.Value.ToString();
                            }
                        }
                        DataRow[] _tempdr = TDSScannerInformation.ScannerInforTable.Select("CellID='" + CellID + "'");
                        if (_tempdr.Length <= 0)
                        {
                            dr[0] = CellID;
                            dr[1] = UARFCN;
                            dr[2] = RSCP;
                            dr[3] = RSSI;
                            dr[4] = LAC;
                            dr[5] = CI;
                            dr[6] = Fullname;
                            //TDSScannerInformation.ScannerInforTable.Rows.Add(dr);
                            TDSScannerInformation.ScannerInput(CellID, UARFCN, RSCP, RSSI, LAC, CI, Fullname);
                        }
                    }
                    else
                    {
                        ScannerInformation.ScannerInforTable.Rows.Clear();
                        DataRow dr = ScannerInformation.ScannerInforTable.NewRow();
                        foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                        {
                            if (Item.Key.Trim().Equals("timestamp"))
                            {
                                Timestamp = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/earfcnDl"))//频点
                            {
                                if (nextCount)
                                {
                                    DataRow tmpdr = ScannerInformation.ScannerInforTable.NewRow();
                                    tmpdr[0] = CellID;
                                    tmpdr[1] = mcc + mnc;
                                    tmpdr[2] = Frequency;
                                    tmpdr[3] = ScramblingCode;
                                    tmpdr[4] = TAC_LAC;
                                    tmpdr[5] = Intensity;
                                    tmpdr[6] = CellNeighInfo;
                                    tmpdr[7] = CellNeighLevel;
                                    tmpdr[8] = Level;
                                    tmpdr[9] = Fullname;
                                    DataRow[] tempdr = ScannerInformation.ScannerInforTable.Select("CellID='" + CellID + "'");//去重复
                                    if (tempdr.Length > 0) continue;
                                    //ScannerInformation.ScannerInforTable.Rows.Add(tmpdr);
                                    ScannerInformation.ScannerInput(tmpdr[0].ToString(), tmpdr[1].ToString(), tmpdr[2].ToString(), tmpdr[3].ToString(), tmpdr[4].ToString(), tmpdr[5].ToString(), tmpdr[6].ToString(), tmpdr[7].ToString(), tmpdr[8].ToString(), tmpdr[9].ToString());
                                    Frequency = "";
                                    CellID = "";
                                    mcc = "";
                                    mnc = "";
                                    cell = "";
                                    ScramblingCode = "";
                                    TAC_LAC = "";
                                    Intensity = "";
                                    CellNeighInfo = "";
                                    CellNeighLevel = "";
                                    Level = "";
                                }

                                Frequency = Item.Value.ToString();
                                nextCount = true;
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/CellId"))//小区id
                            {
                                CellID = Item.Value.ToString();
                                if (ScannerInformation.ScannerInforTable.Rows.Count > 0)
                                {
                                    foreach (DataRow tempdr in ScannerInformation.ScannerInforTable.Rows)
                                    {
                                        if (tempdr[0].ToString().Equals(CellID))
                                        {
                                            nextCount = false;
                                        }
                                    }
                                }
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/mcc"))
                            {
                                mcc = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/mnc"))
                            {
                                mnc = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/pci"))//扰码
                            {
                                ScramblingCode = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/tac"))//TAC/LAC
                            {
                                TAC_LAC = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/rsrp"))//信号强度
                            {
                                Intensity = Item.Value.ToString();
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/NeighCell/EarfcnPci"))//临区信息
                            {
                                if (CellNeighInfo == "")
                                {
                                    CellNeighInfo = Item.Value.ToString();
                                }
                                else
                                {
                                    CellNeighInfo += "\n" + Item.Value.ToString();
                                }
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/priority/FreqPriority"))//优先级
                            {
                                if (Item.Value.ToString().Split(new char[] { ',' }).Length > 1)
                                {
                                    if (CellNeighLevel == "")
                                    {
                                        CellNeighLevel = Item.Value.ToString().Split(new char[] { ',' })[1];
                                    }
                                    else
                                    {
                                        CellNeighLevel += "\n" + Item.Value.ToString().Split(new char[] { ',' })[1];
                                    }
                                }
                            }
                            else if (Item.Key.Trim().Contains("cells/cell/Priority"))
                            {
                                Level = Item.Value.ToString();
                            }

                        }
                        DataRow[] _tempdr = ScannerInformation.ScannerInforTable.Select("CellID='" + CellID + "'");
                        if ((_tempdr.Length <= 0) && (!Frequency.Equals("")))
                        {
                            dr[0] = CellID;
                            dr[1] = mcc + mnc;
                            dr[2] = Frequency;
                            dr[3] = ScramblingCode;
                            dr[4] = TAC_LAC;
                            dr[5] = Intensity;
                            dr[6] = CellNeighInfo;
                            dr[7] = CellNeighLevel;
                            dr[8] = Level;
                            dr[9] = Fullname;
                            //ScannerInformation.ScannerInforTable.Rows.Add(dr);
                            ScannerInformation.ScannerInput(dr[0].ToString(), dr[1].ToString(), dr[2].ToString(), dr[3].ToString(), dr[4].ToString(), dr[5].ToString(), dr[6].ToString(), dr[7].ToString(), dr[8].ToString(), dr[9].ToString());
                        }
                    }
                    Parameters.ConfigType = "";
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 重定向相关
        /// <summary>
        /// 重定向请求
        /// </summary>
        /// <param name="parentFullPathName"></param>
        /// <param name="name"></param>
        /// <param name="category"></param>
        /// <returns></returns>
        public static string Get_redirection_Request(string parentFullPathName, string name, string category)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> redirectionParam = new Dictionary<string, object>();
                redirectionParam.Add("parentFullPathName", parentFullPathName);
                redirectionParam.Add("name", name);
                redirectionParam.Add("category", category);

                MsgStruct.Msg_Body_Struct redirectionParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_redirection_request, redirectionParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = redirectionParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 重定向响应
        /// </summary>
        /// <param></param>
        /// <returns></returns>
        public static void Get_redirection_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            try
            {
                ReDirection.RedirectionTable.Rows.Clear();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                }

                if (ReturnCode.Trim().Equals("0"))
                {
                    foreach (MsgStruct.Name_DIC_Struct x in resultData.Body.n_dic)
                    {
                        DataRow rw = ReDirection.RedirectionTable.NewRow();
                        ReDirectionClass tmpReDirection = new ReDirectionClass();
                        foreach (KeyValuePair<string, object> item in x.dic)
                        {
                            if (item.Key.Trim().Equals("category"))
                            {
                                if (item.Value.ToString().Equals("0"))
                                {
                                    tmpReDirection.UserType = "白名单";
                                }
                                else if (item.Value.ToString().Equals("1"))
                                {
                                    tmpReDirection.UserType = "黑名单";
                                }
                                else
                                {
                                    tmpReDirection.UserType = "其它";
                                }
                            }
                            else if (item.Key.Trim().Equals("priority"))
                            {
                                tmpReDirection.Priority = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("RejectMethod"))
                            {
                                if (item.Value.ToString().Equals("1"))
                                {
                                    tmpReDirection.RejectMethod = "永久拒绝";
                                }
                                else if (item.Value.ToString().Equals("2"))
                                {
                                    tmpReDirection.RejectMethod = "拒绝一次";
                                }
                                else if (item.Value.ToString().Equals("255"))
                                {
                                    tmpReDirection.RejectMethod = "不拒绝";
                                }
                                else
                                {
                                    tmpReDirection.RejectMethod = item.Value.ToString();
                                }
                            }
                            else if (item.Key.Trim().Equals("additionalFreq"))
                            {
                                if (item.Value == null)
                                {
                                    tmpReDirection.AddtionFrequency = "";
                                }
                                else
                                {
                                    tmpReDirection.AddtionFrequency = item.Value.ToString();
                                }
                            }

                            else if (item.Key.Trim().Equals("GeranRedirect"))
                            {
                                tmpReDirection.GeranRedirect = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("arfcn"))
                            {
                                tmpReDirection.Arfcn = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("UtranRedirect"))
                            {
                                tmpReDirection.UtranRedirect = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("uarfcn"))
                            {
                                tmpReDirection.Uarfcn = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("EutranRedirect"))
                            {
                                tmpReDirection.EutranRedirect = item.Value.ToString();
                            }
                            else if (item.Key.Trim().Equals("earfcn"))
                            {
                                tmpReDirection.Earfcn = item.Value.ToString();
                            }
                            tmpReDirection.Operation = "更新";

                        }
                        if (tmpReDirection.Priority.Equals("2"))
                        {
                            tmpReDirection.Optimization = "2G";
                            tmpReDirection.Frequency = tmpReDirection.Arfcn;
                        }
                        else if (tmpReDirection.Priority.Equals("3"))
                        {
                            tmpReDirection.Optimization = "3G";
                            tmpReDirection.Frequency = tmpReDirection.Uarfcn;
                        }
                        else if (tmpReDirection.Priority.Equals("4"))
                        {
                            tmpReDirection.Optimization = "4G";
                            tmpReDirection.Frequency = tmpReDirection.Earfcn;
                        }
                        else
                        {
                            tmpReDirection.Optimization = "无";
                            tmpReDirection.Frequency = "";
                        }
                        rw[0] = tmpReDirection.UserType;
                        rw[1] = tmpReDirection.Optimization;
                        rw[2] = tmpReDirection.Priority;
                        rw[3] = tmpReDirection.RejectMethod;
                        rw[4] = tmpReDirection.Frequency;
                        rw[5] = tmpReDirection.AddtionFrequency;
                        rw[6] = tmpReDirection.Operation;
                        ReDirection.RedirectionTable.Rows.Add(rw);
                    }
                }
                if (ReturnCode.Equals("0"))
                {
                    if (Parameters.ConfigType == "Redirect")
                    {
                        new Thread(() =>
                        {
                            ShowMessage("重定向查询：" + ReturnStr, 64);
                        }).Start();
                    }
                }
                else if (ReturnCode.Equals("-6"))
                {
                    new Thread(() =>
                    {
                        ShowMessage("重定向查询：记录不存在，请先设置", 48);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("重定向查询：" + ReturnStr, 48);
                    }).Start();
                }
                Parameters.SendMessage(Parameters.SpeciallistWinHandle, Parameters.WM_RedirectListQueryResponse, 0, 0);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 重定向设置请求
        /// </summary>
        /// <param name="parentFullPathName"></param>
        /// <param name="name"></param>
        /// <param name="category"></param>
        /// <param name="priority"></param>
        /// <param name="GeranRedirect"></param>
        /// <param name="arfcn"></param>
        /// <param name="UtranRedirect"></param>
        /// <param name="uarfcn"></param>
        /// <param name="EutranRedirect"></param>
        /// <param name="earfcn"></param>
        /// <param name="RejectMethod"></param>
        /// <param name="additionalFreq"></param>
        /// <returns></returns>
        public static string Set_redirection_Request(string parentFullPathName, string name, string category, string priority,
                                                     string GeranRedirect, string arfcn, string UtranRedirect, string uarfcn,
                                                     string EutranRedirect, string earfcn, string RejectMethod, string additionalFreq)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> redirectionParam = new Dictionary<string, object>();
                redirectionParam.Add("parentFullPathName", parentFullPathName);
                redirectionParam.Add("name", name);
                redirectionParam.Add("category", category);
                redirectionParam.Add("priority", priority);
                redirectionParam.Add("GeranRedirect", GeranRedirect);
                redirectionParam.Add("arfcn", arfcn);
                redirectionParam.Add("UtranRedirect", UtranRedirect);
                redirectionParam.Add("uarfcn", uarfcn);
                redirectionParam.Add("EutranRedirect", EutranRedirect);
                redirectionParam.Add("earfcn", earfcn);
                redirectionParam.Add("RejectMethod", RejectMethod);
                redirectionParam.Add("additionalFreq", additionalFreq);


                MsgStruct.Msg_Body_Struct redirectionParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_set_redirection_request, redirectionParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = redirectionParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 重定向设置响应
        /// </summary>
        /// <param></param>
        /// <returns></returns>
        public static void Set_redirection_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            try
            {
                ReDirection.RedirectionTable.Rows.Clear();
                foreach (KeyValuePair<string, object> item in resultData.Body.dic)
                {
                    if (item.Key.Trim().Equals("result"))
                    {
                        ReturnCode = item.Value.ToString();
                    }
                    else if (item.Key.Trim().Equals("rebootflag"))
                    {
                        if (item.Value.ToString().Equals("1"))
                        {
                            ReturnStr = "立刻reboot";
                        }
                        else if (item.Value.ToString().Equals("2"))
                        {
                            ReturnStr = "需要reboot";
                        }
                        else
                        {
                            ReturnStr = item.Value.ToString();
                        }
                    }
                }
                if (ReturnCode.Equals("0"))
                {
                    new Thread(() =>
                    {
                        ShowMessage("重定向设置：成功", 64);
                    }).Start();
                    Parameters.SendMessage(Parameters.SpeciallistWinHandle, Parameters.WM_RedirectConfigurationResponse, 0, 0);
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("重定向设置：" + ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 工程设置相关
        /// <summary>
        ///  工程参数设置
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <param name="ProjectMsg"></param>
        /// <returns></returns>
        public static string APProjectSettingRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> ProjectSettingPara = new Dictionary<string, object>();
                if (new Regex(DeviceType.LTE).Match(InnerType).Success)
                {
                    ProjectSettingPara.Add("transparent_msg", LteDeviceObjectSettingParameter.ParameterCommandList);
                }
                else if (DeviceType.GSM == InnerType)
                {
                    ProjectSettingPara.Add("transparent_msg", GSMDeviceObjectSettingParameter.ParameterCommandList);
                }
                else if (DeviceType.CDMA == InnerType)
                {
                    ProjectSettingPara.Add("transparent_msg", CDMADeviceObjectSettingParameter.ParameterCommandList);
                }
                else if (DeviceType.GSMV2 == InnerType.Replace("_", "-"))
                {
                    ProjectSettingPara.Add("transparent_msg", GSMV2DeviceObjectSettingParameter.ParameterCommandList);
                }
                else if (DeviceType.WCDMA == InnerType)
                {
                    ProjectSettingPara.Add("transparent_msg", WCDMADeviceObjectSettingParameter.ParameterCommandList);
                }
                else if (DeviceType.TD_SCDMA == InnerType.Replace("_", "-"))
                {
                    ProjectSettingPara.Add("transparent_msg", TDSDeviceObjectSettingParameter.ParameterCommandList);
                }

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                ProjectSettingPara.Add("AllNum", ProjectSettingPara.Count + 1);

                MsgStruct.Msg_Body_Struct ProjectSettingBody = new MsgStruct.Msg_Body_Struct(AppMsgType.transparent_msg_request, ProjectSettingPara);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = int.Parse(Port);
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = ProjectSettingBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 工程参数设置响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APProjectSettingResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Model = string.Empty;

            Model = resultData.ApInfo.Type.Replace("_", "-");

            if (new Regex(DeviceType.LTE).Match(Model).Success)
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key == "transparent_msg")
                    {
                        LteDeviceObjectSettingParameter.ParameterResultValue = Item.Value.ToString();
                    }
                }
            }
            else if (DeviceType.GSM == Model)
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key == "transparent_msg")
                    {
                        GSMDeviceObjectSettingParameter.ParameterResultValue = Item.Value.ToString();
                    }
                }
            }
            else if (DeviceType.WCDMA == Model)
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key == "transparent_msg")
                    {
                        WCDMADeviceObjectSettingParameter.ParameterResultValue = Item.Value.ToString();
                    }
                }
            }
            else if (DeviceType.CDMA == Model)
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key == "transparent_msg")
                    {
                        CDMADeviceObjectSettingParameter.ParameterResultValue = Item.Value.ToString();
                    }
                }
            }
            else if (DeviceType.GSMV2 == Model)
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key == "transparent_msg")
                    {
                        GSMV2DeviceObjectSettingParameter.ParameterResultValue = Item.Value.ToString();
                    }
                }
            }
            else if (DeviceType.TD_SCDMA == Model)
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key == "transparent_msg")
                    {
                        TDSDeviceObjectSettingParameter.ParameterResultValue = Item.Value.ToString();
                    }
                }
            }
        }

        /// <summary>
        /// 指定参数工程设置
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string APProjectSingleParameterSettingRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN, string ParameterKeyName, string ParameterValue)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> KeyValueParam = new Dictionary<string, object>();
                KeyValueParam.Add("paramName", ParameterKeyName);
                KeyValueParam.Add("paramValue", ParameterValue);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //CellNeighParam.Add("AllNum", CellNeighParam.Count + 1);

                MsgStruct.Msg_Body_Struct KeyValueParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.set_parameter_request, KeyValueParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }

                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }

                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }

                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }

                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = KeyValueParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        #endregion

        #region LTE白名单自学习相关
        /// <summary>
        /// LTE白名单自学习设置请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <param name="APCellNeighConfiguration"></param>
        /// <returns></returns>
        public static string APWhiteListSelfLearningSettingRequest(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> WhiteListSelfLearningParam = new Dictionary<string, object>();
                WhiteListSelfLearningParam.Add("command", WhiteListSelfLearningParameter.Command);
                WhiteListSelfLearningParam.Add("txpower", WhiteListSelfLearningParameter.Txpower);
                WhiteListSelfLearningParam.Add("duration", WhiteListSelfLearningParameter.Duration);
                WhiteListSelfLearningParam.Add("clearWhiteList", WhiteListSelfLearningParameter.ClearWhiteList);

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //CellNeighParam.Add("AllNum", CellNeighParam.Count + 1);

                MsgStruct.Msg_Body_Struct WhiteListSelfLearningParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.set_whitelist_study_request, WhiteListSelfLearningParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }
                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }
                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }
                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName + "." + deviceName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }
                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = WhiteListSelfLearningParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// LTE白名单自学习设置响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APWhiteListSelfLearningSettingResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Resoult = string.Empty;
            string RebootFlag = string.Empty;
            string Timestamp = string.Empty;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("result"))
                {
                    Resoult = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("rebootflag"))
                {
                    RebootFlag = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("timestamp"))
                {
                    Timestamp = Item.Value.ToString();
                }
            }

            if (Resoult.Trim().Equals("0"))
            {
                SystemLogsInfo.Input(DateTime.Now.ToString(), "白名单自学习", "设置", "成功");

                new Thread(() =>
                {
                    ShowMessage(APResourltErrorType("白名单自学习设置", Resoult, RebootFlag, Timestamp), 64);
                }).Start();
            }
            else
            {
                WhiteListSelfLearningParameter.Command = WhiteListSelfLearningParameter.EditorParameter.Command;
                WhiteListSelfLearningParameter.Txpower = WhiteListSelfLearningParameter.EditorParameter.Txpower;
                WhiteListSelfLearningParameter.Duration = WhiteListSelfLearningParameter.EditorParameter.Duration;
                WhiteListSelfLearningParameter.ClearWhiteList = WhiteListSelfLearningParameter.EditorParameter.ClearWhiteList;
                SystemLogsInfo.Input(DateTime.Now.ToString(), "白名单自学习", "设置", "失败");

                new Thread(() =>
                {
                    ShowMessage(APResourltErrorType("白名单自学习设置", Resoult, RebootFlag, Timestamp), 16);
                }).Start();
            }
        }

        /// <summary>
        /// 白名单自学习参数查询请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string APWhiteListSelfLearningParameterQuery(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> WhiteListSelfLearningParamQuery = new Dictionary<string, object>();

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //CellNeighParam.Add("AllNum", CellNeighParam.Count + 1);

                MsgStruct.Msg_Body_Struct WhiteListSelfLearningParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.get_whitelist_study_request, WhiteListSelfLearningParamQuery);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }
                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }
                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }
                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }
                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = WhiteListSelfLearningParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 白名单自学习参数查询响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APWhiteListSelfLearningParameterResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string DomainFullNamePath = string.Empty;
            string SN = string.Empty;
            string Command = string.Empty;
            string Txpower = string.Empty;
            string Duration = string.Empty;
            string ClearWhiteList = string.Empty;

            DomainFullNamePath = resultData.ApInfo.Fullname;
            SN = resultData.ApInfo.SN;

            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key.Trim().Equals("command"))
                {
                    Command = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("txpower"))
                {
                    Txpower = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("duration"))
                {
                    Duration = Item.Value.ToString();
                }
                else if (Item.Key.Trim().Equals("clearWhiteList"))
                {
                    ClearWhiteList = Item.Value.ToString();
                }
            }

            WhiteListSelfLearningParameter.Command = Command;
            WhiteListSelfLearningParameter.Txpower = Txpower;
            WhiteListSelfLearningParameter.Duration = Duration;
            WhiteListSelfLearningParameter.ClearWhiteList = ClearWhiteList;

            //设置前备份
            WhiteListSelfLearningParameter.EditorParameter.Command = WhiteListSelfLearningParameter.Command;
            WhiteListSelfLearningParameter.EditorParameter.Txpower = WhiteListSelfLearningParameter.Txpower;
            WhiteListSelfLearningParameter.EditorParameter.Duration = WhiteListSelfLearningParameter.Duration;
            WhiteListSelfLearningParameter.EditorParameter.ClearWhiteList = WhiteListSelfLearningParameter.ClearWhiteList;

            SystemLogsInfo.Input(DateTime.Now.ToString(), "白名单自学习参数查询", "参数查询", "成功");
        }
        #endregion

        #region 非XML查询
        /// <summary>
        /// 获取非XML请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string Get_Upload_Request(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> UploadParam = new Dictionary<string, object>();

                MsgStruct.Msg_Body_Struct UploadParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.get_upload_req, UploadParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }

                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }

                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }

                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }

                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = UploadParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 获取非XML响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void Get_Upload_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("enable"))
                    {
                        DeviceNoXMLUpload.Enable = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("type"))
                    {
                        DeviceNoXMLUpload.Type = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("messageFormat"))
                    {
                        DeviceNoXMLUpload.MessageFormat = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("Period"))
                    {
                        DeviceNoXMLUpload.Period = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("nameFormat"))
                    {
                        DeviceNoXMLUpload.NameFormat = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("dataFormat"))
                    {
                        DeviceNoXMLUpload.DataFormat = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("URLorIP"))
                    {
                        DeviceNoXMLUpload.URLorIP = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("addInfo"))
                    {
                        DeviceNoXMLUpload.AddInfo = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("commEnable"))
                    {
                        DeviceNoXMLUpload.CommEnable = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("commIp"))
                    {
                        DeviceNoXMLUpload.CommIp = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("commPort"))
                    {
                        DeviceNoXMLUpload.CommPort = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("encryptType"))
                    {
                        DeviceNoXMLUpload.EncryptType = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("cacheMax"))
                    {
                        DeviceNoXMLUpload.CacheMax = Item.Value.ToString();
                    }
                }
                if (Parameters.ConfigType == "SelectUpload")
                {
                    new Thread(() =>
                    {
                        ShowMessage("非XML信息查询：成功", 64);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
        /// <summary>
        /// 非XML设置请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string Set_Upload_Request(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> UploadParam = new Dictionary<string, object>();
                UploadParam.Add("command", WhiteListSelfLearningParameter.Command);

                UploadParam.Add("enable", DeviceNoXMLUpload.Enable);
                UploadParam.Add("messageFormat", DeviceNoXMLUpload.MessageFormat);
                UploadParam.Add("dataFormat", DeviceNoXMLUpload.DataFormat);
                UploadParam.Add("nameFormat", DeviceNoXMLUpload.NameFormat);
                UploadParam.Add("type", DeviceNoXMLUpload.Type);
                UploadParam.Add("period", DeviceNoXMLUpload.Period);
                UploadParam.Add("URLorIP", DeviceNoXMLUpload.URLorIP);
                UploadParam.Add("addInfo", DeviceNoXMLUpload.AddInfo);
                UploadParam.Add("CommEnable", DeviceNoXMLUpload.CommEnable);
                UploadParam.Add("CommIP", DeviceNoXMLUpload.CommIp);
                UploadParam.Add("CommPort", DeviceNoXMLUpload.CommPort);
                UploadParam.Add("encryptType", DeviceNoXMLUpload.EncryptType);
                UploadParam.Add("cacheMax", DeviceNoXMLUpload.CacheMax);
                MsgStruct.Msg_Body_Struct UploadParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.set_upload_req, UploadParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }

                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }

                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }

                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }

                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = UploadParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 非XML设置响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void Set_Upload_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Result = string.Empty;
            string RebootFlag = string.Empty;
            string Timestamp = string.Empty;
            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("result"))
                    {
                        Result = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("rebootFlag"))
                    {
                        RebootFlag = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("timestamp"))
                    {
                        Timestamp = Item.Value.ToString();
                    }
                }
                if (Result.Equals("0"))
                {
                    ShowMessage(APResourltErrorType("非XML信息设置", Result, RebootFlag, Timestamp), 64);
                }
                else
                {
                    ShowMessage(APResourltErrorType("非XML信息设置", Result, RebootFlag, Timestamp), 16);
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 服务器配置操作
        //参数请求
        public static string ServerBaseParameterRequest()
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> ServerBaseParam = new Dictionary<string, object>();
                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                ServerBaseParam.Add("AllNum", ServerBaseParam.Count + 1);

                MsgStruct.Msg_Body_Struct ServerBaseParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_ServerConfig_Request, ServerBaseParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "2.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = ServerBaseParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        //参数响应
        public static void ServerBaseParameterResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            int Next = 0;
            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key == "ReturnCode")
                {
                    ReturnCode = Item.Value.ToString();
                    Next++;
                }
                else if (Item.Key == "ReturnStr")
                {
                    ReturnStr = Item.Value.ToString();
                    Next++;
                }

                if (Next >= 2)
                {
                    break;
                }
            }

            if (ReturnCode == "0")
            {
                try
                {
                    Next = 0;
                    foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                    {
                        if (Next < 2)
                        {
                            Next++;
                            continue;
                        }

                        if (Item.Key == "strDbIpAddr")
                        {
                            Parameters.ServerBaseParameter.StrDbIpAddr = Item.Value.ToString();
                        }
                        else if (Item.Key == "logOutputLevel")
                        {
                            Parameters.ServerBaseParameter.LogOutputLevel = Item.Value.ToString();
                        }
                        else if (Item.Key == "strFtpIpAddr")
                        {
                            Parameters.ServerBaseParameter.StrFtpIpAddr = Item.Value.ToString();
                        }
                        else if (Item.Key == "strFtpUserId")
                        {
                            Parameters.ServerBaseParameter.StrFtpUserId = Item.Value.ToString();
                        }
                        else if (Item.Key == "strFtpUserPsw")
                        {
                            Parameters.ServerBaseParameter.StrFtpUserPsw = Item.Value.ToString();
                        }
                        else if (Item.Key == "strFtpPort")
                        {
                            Parameters.ServerBaseParameter.StrFtpPort = Item.Value.ToString();
                        }
                        else if (Item.Key == "strFtpUpdateDir")
                        {
                            Parameters.ServerBaseParameter.StrFtpUpdateDir = Item.Value.ToString();
                        }
                        else if (Item.Key == "strStartPortCDMA_ZYF")
                        {
                            Parameters.ServerBaseParameter.StrStartPortCDMA_ZYF = Item.Value.ToString();
                        }
                        else if (Item.Key == "strStartPortGSM_ZYF")
                        {
                            Parameters.ServerBaseParameter.StrStartPortGSM_ZYF = Item.Value.ToString();
                        }
                        else if (Item.Key == "strStartPortGSM_HJT")
                        {
                            Parameters.ServerBaseParameter.StrStartPortGSM_HJT = Item.Value.ToString();
                        }
                        else if (Item.Key == "strStartPortLTE")
                        {
                            Parameters.ServerBaseParameter.StrStartPortLTE = Item.Value.ToString();
                        }
                        else if (Item.Key == "strStartPortTDS")
                        {
                            Parameters.ServerBaseParameter.StrStartPortTDS = Item.Value.ToString();
                        }
                        else if (Item.Key == "strStartPortWCDMA")
                        {
                            Parameters.ServerBaseParameter.StrStartPortWCDMA = Item.Value.ToString();
                        }
                        else if (Item.Key == "strStartPortAppWindows")
                        {
                            Parameters.ServerBaseParameter.StrStartPortAppWindows = Item.Value.ToString();
                        }
                        else if (Item.Key == "strStartPortAppLinux")
                        {
                            Parameters.ServerBaseParameter.StrStartPortAppLinux = Item.Value.ToString();
                        }
                        else if (Item.Key == "strStartPortAppAndroid")
                        {
                            Parameters.ServerBaseParameter.StrStartPortAppAndroid = Item.Value.ToString();
                        }
                        else if (Item.Key == "dataAlignMode")
                        {
                            Parameters.ServerBaseParameter.DataAlignMode = Item.Value.ToString();
                        }
                        else if (Item.Key == "logMaxSize")
                        {
                            Parameters.ServerBaseParameter.LogMaxSize = Item.Value.ToString();
                        }
                    }
                }
                catch (Exception ex)
                {
                    Parameters.PrintfLogsExtended("加载可控系统基本参数配置处理异常", ex.Message, ex.StackTrace);
                }
            }
            else
            {
                SystemLogsInfo.Input(DateTime.Now.ToString(), "加载可控系统基本参数配置失败", "可控系统参数加载", "失败");
            }

        }
        //参数保存
        public static string ServerBaseParameterSaveRequest(Dictionary<string, string> Params)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> ServerBaseSaveParam = new Dictionary<string, object>();
                foreach (KeyValuePair<string, string> Item in Params)
                {
                    ServerBaseSaveParam.Add(Item.Key, Item.Value);
                }
                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                ServerBaseSaveParam.Add("AllNum", ServerBaseSaveParam.Count + 1);

                MsgStruct.Msg_Body_Struct ServerBaseSaveParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_set_ServerConfig_Request, ServerBaseSaveParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "2.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = ServerBaseSaveParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        //保存响应
        public static void ServerBaseParameterSaveResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            int Next = 0;
            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key == "ReturnCode")
                {
                    ReturnCode = Item.Value.ToString();
                    Next++;
                }
                else if (Item.Key == "ReturnStr")
                {
                    ReturnStr = Item.Value.ToString();
                    Next++;
                }

                if (Next >= 2)
                {
                    break;
                }
            }

            if (ReturnCode == "0")
            {
                SystemLogsInfo.Input(DateTime.Now.ToString(), "保存可控系统基本配置参数", "可控系统参数保存", "成功");
                new Thread(() =>
                {
                    ShowMessage("保存可控系统基本配置参数成功！", 64);
                }).Start();
            }
            else
            {
                SystemLogsInfo.Input(DateTime.Now.ToString(), "保存可控系统基本配置参数: " + ReturnStr, "可控系统参数保存", "失败");
                new Thread(() =>
                {
                    ShowMessage("保存可控系统基本配置参数失败," + ReturnStr + "！", 48);
                }).Start();
            }
        }
        #endregion

        #region 配置批量导入导出
        //导出请求
        public static string BatchConfigurationInfoRequest(string FileName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> BatchConfigurationParam = new Dictionary<string, object>();
                BatchConfigurationParam.Add("fileName", FileName);
                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                BatchConfigurationParam.Add("AllNum", BatchConfigurationParam.Count + 1);

                MsgStruct.Msg_Body_Struct BatchConfigurationParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_BIE_ExportConfig_Request, BatchConfigurationParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "2.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = BatchConfigurationParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        //导出响应
        public static void BatchConfigurationInfoResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key == "ReturnCode")
                {
                    ReturnCode = Item.Value.ToString();
                }
                else if (Item.Key == "ReturnStr")
                {
                    ReturnStr = Item.Value.ToString();
                }
                else if (Item.Key == "ftpUsrName")
                {
                    BatchConfigurationOutputParameter.FtpUsrName = Item.Value.ToString();
                }
                else if (Item.Key == "ftpPwd")
                {
                    BatchConfigurationOutputParameter.FtpPwd = Item.Value.ToString();
                }
                else if (Item.Key == "ftpRootDir")
                {
                    BatchConfigurationOutputParameter.FtpRootDir = Item.Value.ToString();
                }
                else if (Item.Key == "ftpServerIp")
                {
                    BatchConfigurationOutputParameter.FtpServerIp = Item.Value.ToString();
                }
                else if (Item.Key == "ftpPort")
                {
                    BatchConfigurationOutputParameter.FtpPort = Item.Value.ToString();
                }
                else if (Item.Key == "fileName")
                {
                    BatchConfigurationOutputParameter.FileName = Item.Value.ToString();
                }
            }

            if (ReturnCode == "0")
            {
                Parameters.SendMessage(Parameters.AdvanceSettingWinHandle, Parameters.WM_BatchConfigurationOutputMessage, 0, 0);
            }
        }

        //导入请求
        public static string BatchConfigurationImportRequest(string FileName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> BatchConfigurationImportParam = new Dictionary<string, object>();
                BatchConfigurationImportParam.Add("fileName", FileName);
                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                BatchConfigurationImportParam.Add("AllNum", BatchConfigurationImportParam.Count + 1);

                MsgStruct.Msg_Body_Struct BatchConfigurationImportParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_set_BIE_ImportConfig_Request, BatchConfigurationImportParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "2.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = BatchConfigurationImportParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        //导入响应
        public static void BatchConfigurationImportResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
            {
                if (Item.Key == "ReturnCode")
                {
                    ReturnCode = Item.Value.ToString();
                }
                else if (Item.Key == "ReturnStr")
                {
                    ReturnStr = Item.Value.ToString();
                }
            }

            if (ReturnCode == "0")
            {
                Parameters.SendMessage(Parameters.WinHandle, Parameters.WM_ReLoadDeviceListMessage, 0, 0);
                new Thread(() =>
                {
                    ShowMessage("批量配置导入成功,设备信息需要重载,请稍后...", 64);
                }).Start();
            }
            else
            {
                IntPtr ErrorStr = Marshal.StringToHGlobalUni(ReturnStr);
                Parameters.SendMessage(Parameters.AdvanceSettingWinHandle, Parameters.WM_BatchConfigurationImportMessage, 0, Convert.ToInt32(ErrorStr));
                new Thread(() =>
                {
                    ShowMessage("批量配置导入失败," + ReturnStr + "！", 16);
                }).Start();
            }
        }
        #endregion

        #region 地图功能
        /// <summary>
        /// 获取站点位置请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <returns></returns>
        public static string Get_station_location_Request(string domainFullPathName, string deviceName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> LocationParam = new Dictionary<string, object>();
                LocationParam.Add("name", deviceName);
                LocationParam.Add("parentNameFullPath", domainFullPathName);
                LocationParam.Add("AllNum", LocationParam.Count + 1);
                MsgStruct.Msg_Body_Struct LocationParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_station_location_request, LocationParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = LocationParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 获取站点位置相应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void Get_station_location_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            try
            {
                StationMap.FullName = "";
                StationMap.DeviceName = "";
                StationMap.Lng = "";
                StationMap.Lat = "";
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("name"))
                    {
                        StationMap.DeviceName = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("parentNameFullPath"))
                    {
                        StationMap.FullName = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("longitude"))
                    {
                        StationMap.Lng = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("latitude"))
                    {
                        StationMap.Lat = Item.Value.ToString();
                    }
                }
                if (ReturnCode.Trim().Equals("0"))
                {
                    Parameters.SendMessage(Parameters.ShowDBMapWinHandle, Parameters.WM_StationLocationResponse, 0, 0);
                }
                //else
                //{
                //    new Thread(() =>
                //    {
                //        ShowMessage("获取站点位置：" + ReturnStr, 16);
                //    }).Start();
                //}
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }

        }
        /// <summary>
        /// 设置站点位置请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="lng"></param>
        /// <param name="lat"></param>
        /// <returns></returns>
        public static string Set_station_location_Request(string domainFullPathName, string deviceName, string lng, string lat)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> LocationParam = new Dictionary<string, object>();
                LocationParam.Add("name", deviceName);
                LocationParam.Add("parentNameFullPath", domainFullPathName);
                LocationParam.Add("longitude", lng);
                LocationParam.Add("latitude", lat);
                LocationParam.Add("AllNum", LocationParam.Count + 1);
                MsgStruct.Msg_Body_Struct LocationParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_set_station_location_request, LocationParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = LocationParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 设置站点位置响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void Set_station_location_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                }

                if (ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        ShowMessage("设置站点位置：" + ReturnStr, 64);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("设置站点位置：" + ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 分时统计
        /// <summary>
        /// 分时统计请求
        /// </summary>
        /// <param name="timeStart"></param>
        /// <param name="timeEnded"></param>
        /// <param name="deviceCount"></param>
        /// <param name="deviceFullPathNames"></param>
        /// <param name="bwFlag"></param>
        /// <param name="operators"></param>
        /// <returns></returns>
        public static string Get_statistics_Request(string timeStart, string timeEnded, string deviceCount, List<string> deviceFullPathNames, string bwFlag, string operators)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> StatisticsParam = new Dictionary<string, object>();
                StatisticsParam.Add("timeStart", timeStart);
                StatisticsParam.Add("timeEnded", timeEnded);
                StatisticsParam.Add("deviceCount", deviceCount);
                StatisticsParam.Add("bwFlag", bwFlag);
                StatisticsParam.Add("operators", operators);
                for (int i = 0; i < deviceFullPathNames.Count; i++)
                {
                    StatisticsParam.Add("deviceFullPathName" + (i + 1).ToString(), deviceFullPathNames[i]);
                }
                StatisticsParam.Add("AllNum", StatisticsParam.Count + 1);
                MsgStruct.Msg_Body_Struct StatisticsParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_statistics_request, StatisticsParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = StatisticsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 分时统计响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void Get_statistics_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ImsiTotal"))
                    {
                        Statistical.ImsiTotal = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ImsiTotalRmDup"))
                    {
                        Statistical.ImsiTotalRmDup = Item.Value.ToString();
                    }
                }
                if (ReturnCode.Trim().Equals("0"))
                {
                    Statistical.ImsiRow++;
                    if (Statistical.ImsiTotalRmDupMax < int.Parse(Statistical.ImsiTotalRmDup))
                        Statistical.ImsiTotalRmDupMax = int.Parse(Statistical.ImsiTotalRmDup);
                    if (Statistical.ImsiTotalMax < int.Parse(Statistical.ImsiTotal))
                        Statistical.ImsiTotalMax = int.Parse(Statistical.ImsiTotal);
                    Statistical.ImsiCountInsert(Statistical.ImsiRow.ToString(), Statistical.ImsiTotal, Statistical.ImsiTotalRmDup);

                }
                else
                {
                    Statistical.ImsiRow--;
                    new Thread(() =>
                    {
                        ShowMessage("分时统计请求：" + ReturnStr, 16);
                    }).Start();
                }
                if (Statistical.ImsiRow >= Statistical.ImsiRowTotal)
                {
                    new Thread(() =>
                    {
                        Parameters.SendMessage(Parameters.StatisticalWinHandle, Parameters.WM_StatisticalResponse, 0, 0);
                        ShowMessage("分时统计请求：" + ReturnStr, 64);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }

        }
        #endregion

        #region 常驻人口分析
        public static string Get_resident_imsi_list_Request(string timeStart, string timeEnd, string deviceFullPathNames)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> ResidentIMSIParam = new Dictionary<string, object>();
                ResidentIMSIParam.Add("timeStart", timeStart);
                ResidentIMSIParam.Add("timeEnded", timeEnd);
                ResidentIMSIParam.Add("deviceFullPathName", deviceFullPathNames);
                ResidentIMSIParam.Add("AllNum", ResidentIMSIParam.Count + 1);
                MsgStruct.Msg_Body_Struct ResidentIMSIParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_resident_imsi_list_request, ResidentIMSIParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = ResidentIMSIParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        public static void Get_resident_imsi_list_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            try
            {
                ResidentIMSI.IMSICount = 0;
                ResidentIMSI.IMSITotal = 0;
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("imsiTotal"))
                    {
                        ResidentIMSI.IMSITotal = int.Parse(Item.Value.ToString());
                    }
                    else if (Item.Key.Trim().Equals("imsiCount"))
                    {
                        ResidentIMSI.IMSICount = int.Parse(Item.Value.ToString());
                    }
                }
                if (ResidentIMSI.IMSICount > 0)
                {
                    foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                    {
                        string imsi = string.Empty;
                        for (int i = 1; i <= ResidentIMSI.IMSICount; i++)
                        {
                            if (Item.Key.Trim().Equals("imsi" + i.ToString()))
                            {
                                imsi = Item.Value.ToString();
                                ResidentIMSI.ResidentIMSIinput((ResidentIMSI.ResidentIMSIDT.Rows.Count + 1).ToString(), imsi);
                                break;
                            }
                        }
                    }
                }
                if (ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        Parameters.SendMessage(Parameters.StatisticalWinHandle, Parameters.WM_ResidentIMSIResponse, 0, 0);
                        if (ResidentIMSI.IMSITotal > 0)
                            ShowMessage("常驻人口分析响应：" + ReturnStr, 64);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("常驻人口分析响应：" + ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }

        }
        #endregion

        #region 碰撞分析
        public static string Get_collision_imsi_list_Request(List<ConditionsClass> ConditionList)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> CollisionIMSIParam = new Dictionary<string, object>();
                CollisionIMSIParam.Add("groupCount", ConditionList.Count);
                for (int i = 0; i < ConditionList.Count; i++)
                {
                    CollisionIMSIParam.Add("timeStart" + (i + 1).ToString(), ConditionList[i].TimeStart);
                    CollisionIMSIParam.Add("timeEnded" + (i + 1).ToString(), ConditionList[i].TimeEnd);
                    CollisionIMSIParam.Add("deviceFullPathName" + (i + 1).ToString(), ConditionList[i].FullName);
                }
                CollisionIMSIParam.Add("AllNum", CollisionIMSIParam.Count + 1);
                MsgStruct.Msg_Body_Struct CollisionIMSIParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_collision_imsi_list_request, CollisionIMSIParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = CollisionIMSIParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        public static void Get_Collision_imsi_list_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            int count = 0;
            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("imsiCount"))
                    {
                        count = int.Parse(Item.Value.ToString());
                    }
                }
                if (count > 0)
                {
                    foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                    {
                        string imsi = string.Empty;
                        for (int i = 1; i <= count; i++)
                        {
                            if (Item.Key.Trim().Equals("imsi" + i.ToString()))
                            {
                                imsi = Item.Value.ToString();
                                ConditionsIMSI.ResidentIMSIinput((ConditionsIMSI.ResidentIMSIDT.Rows.Count + 1).ToString(), imsi);
                                break;
                            }
                        }
                    }
                }
                if (ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        Parameters.SendMessage(Parameters.StatisticalWinHandle, Parameters.WM_ConditionsIMSIResponse, 0, 0);
                        ShowMessage("碰撞分析响应：" + ReturnStr, 64);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("碰撞分析响应：" + ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }

        }
        #endregion

        #region 伴随分析
        public static string Get_Accompany_imsi_list_Request(string imsi, string timeStart, string timeEnd, string timeWindow)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> AccompanyIMSIParam = new Dictionary<string, object>();
                AccompanyIMSIParam.Add("imsi", imsi);
                AccompanyIMSIParam.Add("timeStart", timeStart);
                AccompanyIMSIParam.Add("timeEnded", timeEnd);
                AccompanyIMSIParam.Add("timeWindow", timeWindow);
                AccompanyIMSIParam.Add("AllNum", AccompanyIMSIParam.Count + 1);
                MsgStruct.Msg_Body_Struct AccompanyIMSIParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_accompany_request, AccompanyIMSIParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = AccompanyIMSIParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        public static void Get_Accompany_imsi_list_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string imsi = string.Empty;
            string accompanyFlag = string.Empty;
            try
            {
                AccompanyIMSI.AccompanyIMSIDT.Clear();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("imsiCount"))
                    {
                        AccompanyIMSI.ImsiCount = int.Parse(Item.Value.ToString());
                    }
                    else if (Item.Key.Trim().Contains("imsi"))
                    {
                        imsi = Item.Value.ToString();
                        AccompanyIMSI.AccompanyIMSIinput((AccompanyIMSI.AccompanyIMSIDT.Rows.Count + 1).ToString(), imsi);
                    }
                }
                if (ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        Parameters.SendMessage(Parameters.StatisticalWinHandle, Parameters.WM_AccompanyIMSIResponse, 0, 0);
                        ShowMessage("伴随分析响应：" + ReturnStr + ",伴随IMSI数量为：" + AccompanyIMSI.ImsiCount.ToString() + "个。", 64);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("伴随分析响应：" + ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }

        }
        #endregion

        #region IMSI轨迹
        public static string Get_imsi_path_Request(string timeStart, string timeEnd, string imsi)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> IMSIPathParam = new Dictionary<string, object>();
                IMSIPathParam.Add("timeStart", timeStart);
                IMSIPathParam.Add("timeEnded", timeEnd);
                IMSIPathParam.Add("imsi", imsi);
                IMSIPathParam.Add("AllNum", IMSIPathParam.Count + 1);
                MsgStruct.Msg_Body_Struct IMSIPathParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.app_get_imsi_path_request, IMSIPathParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = MsgStruct.NullDevice;
                msgStruct.ApInfo.Port = 0;
                msgStruct.ApInfo.SN = string.Empty;
                msgStruct.ApInfo.Fullname = string.Empty;
                msgStruct.Body = IMSIPathParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        public static void Get_imsi_path_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string ReturnCode = string.Empty;
            string ReturnStr = string.Empty;
            string WarnInfo = string.Empty;
            string imsi = string.Empty;
            int stationCount = 0;
            string nameFullPath = string.Empty;
            string longitude = string.Empty;
            string latitude = string.Empty;
            bool namebol = false;
            bool lngbol = false;
            bool latbol = false;
            try
            {
                AccompanyIMSI.AccompanyIMSIDT.Clear();
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("ReturnCode"))
                    {
                        ReturnCode = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ReturnStr"))
                    {
                        ReturnStr = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("WarnInfo"))
                    {
                        imsi = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("stationCount"))
                    {
                        stationCount = int.Parse(Item.Value.ToString());
                    }
                }
                if (stationCount > 0)
                {
                    foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                    {
                        for (int i = 1; i <= stationCount; i++)
                        {
                            if (Item.Key.Trim() == ("nameFullPath" + i.ToString()))
                            {
                                nameFullPath = Item.Value.ToString();
                                namebol = true;
                                break;
                            }
                            else if (Item.Key.Trim() == ("longitude" + i.ToString()))
                            {
                                longitude = Item.Value.ToString();
                                lngbol = true;
                                break;
                            }
                            else if (Item.Key.Trim() == ("latitude" + i.ToString()))
                            {
                                latitude = Item.Value.ToString();
                                latbol = true;
                                break;
                            }
                        }
                        if (namebol && lngbol && latbol)
                        {
                            namebol = false;
                            lngbol = false;
                            latbol = false;
                            IMSIPath.IMSIPathinput((IMSIPath.DTIMSIPath.Rows.Count + 1).ToString(), nameFullPath, longitude, latitude);
                        }
                    }
                }
                if (ReturnCode.Trim().Equals("0"))
                {
                    new Thread(() =>
                    {
                        Parameters.SendMessage(Parameters.ShowDBMapWinHandle, Parameters.WM_IMSIPathResponse, 0, 0);
                        ShowMessage("IMSI轨迹响应：" + ReturnStr, 64);
                    }).Start();
                }
                else
                {
                    new Thread(() =>
                    {
                        ShowMessage("IMSI轨迹响应：" + ReturnStr, 16);
                    }).Start();
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }

        }
        #endregion

        #region 同步状态信息
        public static string Get_SYNC_Info_Request(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Parameters.GetSYNCInfoType = "GetSYNCInfo";
                Dictionary<string, object> SYNCParam = new Dictionary<string, object>();

                MsgStruct.Msg_Body_Struct SYNCParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.SYNC_request, SYNCParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }

                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }

                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }

                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }

                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = SYNCParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        public static void Get_SYNC_Info_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                if (Parameters.GetSYNCInfoType == "GetSYNCInfo")
                {
                    foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                    {
                        if (Item.Key.Trim().Equals("status"))
                        {
                            if (Item.Value.ToString() == "0")
                                SYNCInfo.Status = "失步";
                            else
                                SYNCInfo.Status = "同步";
                        }
                        else if (Item.Key.Trim().Equals("source"))
                        {
                            if (Item.Value.ToString() == "0")
                                SYNCInfo.Source = "GPS";
                            else
                                SYNCInfo.Source = "空口同步";
                        }
                        else if (Item.Key.Trim().Equals("euarfcn"))
                        {
                            SYNCInfo.Euarfcn = Item.Value.ToString();
                        }
                        else if (Item.Key.Trim().Equals("pci"))
                        {
                            SYNCInfo.PCI = Item.Value.ToString();
                        }
                    }

                    Parameters.GetSYNCInfoType = "";
                    ShowMessage("同步状态信息查询：成功", 64);
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 同步参考源查询 
        /// <summary>
        /// 同步参考源查询请求
        /// </summary>
        /// <param name="domainFullPathName"></param>
        /// <param name="deviceName"></param>
        /// <param name="IP"></param>
        /// <param name="Port"></param>
        /// <param name="InnerType"></param>
        /// <param name="SN"></param>
        /// <returns></returns>
        public static string APSyncinfoGetRequest(string domainFullPathName, string deviceName, string IP, int Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> SyncSourceParam = new Dictionary<string, object>();

                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                //SyncSourceParam.Add("AllNum", SyncSourceParam.Count + 1);

                MsgStruct.Msg_Body_Struct deviceListsParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.Syncinfo_get, SyncSourceParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = IP;
                msgStruct.ApInfo.Port = Port;
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = domainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = deviceListsParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        /// <summary>
        /// 同步参考源查询相应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void Get_Syncinfo_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("CNMSyncpriority"))
                    {
                        if (Item.Value.ToString().Equals("0"))
                        {
                            JsonInterFace.LteDeviceAdvanceSettingParameter.SyncSourceWithGPS = true;
                            JsonInterFace.LteDeviceAdvanceSettingParameter.SyncSourceWithKongKou = false;
                        }
                        else if (Item.Value.ToString().Equals("1"))
                        {
                            JsonInterFace.LteDeviceAdvanceSettingParameter.SyncSourceWithKongKou = true;
                            JsonInterFace.LteDeviceAdvanceSettingParameter.SyncSourceWithGPS = false;
                        }
                        else
                        {
                            JsonInterFace.LteDeviceAdvanceSettingParameter.SyncSourceWithGPS = false;
                            JsonInterFace.LteDeviceAdvanceSettingParameter.SyncSourceWithKongKou = false;
                        }
                    }
                    else if (Item.Key.Trim().Equals("ScanEnable"))
                    {
                        JsonInterFace.LteDeviceAdvanceSettingParameter.ScanEnable = int.Parse(Item.Value.ToString());
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region 下载AP日志文件
        /// <summary>
        /// 登录
        /// </summary>
        /// <param name="UserName"></param>
        /// <param name="PassWord"></param>
        /// <returns></returns>
        public static string APLogFilesDownloadLoginRequest(string UserName, string PassWord, string FTPType, string RemoteServer, string SN, string InnerType, int Port, string DomainFullPathName)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> FTPLoginParam = new Dictionary<string, object>();
                FTPLoginParam.Add("User_name", UserName);
                FTPLoginParam.Add("Password", PassWord);
                FTPLoginParam.Add("ftp_type", FTPType);
                //目前采用Server端作为FTP服务器，此外的ServerAddr 地址为服务端所在的主机的IP地址:RemoteHost
                FTPLoginParam.Add("serverAdd", RemoteHost + Parameters.DownLoadLogRoot + SN);
                FTPLoginParam.Add("timestamp", 3);
                //-----------------------------------------
                //AllNum表示该字典中所有键值对的个数,协议规定，每条消息必须包括
                FTPLoginParam.Add("AllNum", FTPLoginParam.Count + 1);
                //---------------------------------------------------
                MsgStruct.Msg_Body_Struct loginParamBody = new MsgStruct.Msg_Body_Struct(AppMsgType.Get_Log, FTPLoginParam);
                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                msgStruct.ApInfo.IP = RemoteServer;  //AP
                msgStruct.ApInfo.Port = Port;
                msgStruct.ApInfo.SN = SN;
                msgStruct.ApInfo.Fullname = DomainFullPathName;
                msgStruct.ApInfo.Type = InnerType;
                msgStruct.Body = loginParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }

        /// <summary>
        /// 登录响应
        /// </summary>
        /// <param name="resultData"></param>
        /// <param name="RemoteHost"></param>
        /// <param name="RemotePort"></param>
        public static void APLogFilesDownloadLoginResponse(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            string Result = string.Empty;
            string Rebootflag = string.Empty;
            string Timestamp = string.Empty;
            string SN = string.Empty;
            string Fullname = string.Empty;
            string IP = string.Empty;
            int Port = 0;
            string Type = string.Empty;
            StringBuilder TmpMessage = new StringBuilder();

            try
            {
                SN = resultData.ApInfo.SN;
                Fullname = resultData.ApInfo.Fullname;
                IP = resultData.ApInfo.IP;
                Port = resultData.ApInfo.Port;
                Type = resultData.ApInfo.Type.Replace("_", "-");

                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("result"))
                    {
                        Result = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("rebootflag"))
                    {
                        Rebootflag = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("timestamp"))
                    {
                        Timestamp = Item.Value.ToString();
                    }
                }

                //打印日志
                TmpMessage.AppendLine("---------- 下载AP日志,建立【AP-->Server】连接 " + (Result == "0" ? "成功" : "失败") + " [" + Timestamp + "] ----------");
                TmpMessage.AppendLine("设备名称：[" + Fullname + "]");
                TmpMessage.AppendLine("SN：[" + SN + "]");
                TmpMessage.AppendLine("IP：[" + IP + "]");
                TmpMessage.AppendLine("端口：[" + Port.ToString() + "]");
                TmpMessage.AppendLine("制式：[" + Type + "]");
                TmpMessage.AppendLine("Result = [" + Result + "] (" + (Result == "0" ? "成功" : "失败") + ")");
                TmpMessage.AppendLine("Rebootflag = [" + Rebootflag + "] (" + (Rebootflag == "0" ? "无" : Rebootflag == "2" ? "需要重启" : "立刻重启") + ")");
                TmpMessage.AppendLine("-------------------------------------------------------------------------------");

                IntPtr TmpMessageHandle = Marshal.StringToBSTR(TmpMessage.ToString());
                if (new Regex(DeviceType.LTE).Match(Type).Success)
                {
                    Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_DOWNLOAD_LTE_LOG_RESULT_MESSAGE, 0, (int)TmpMessageHandle);
                }
                else if (Type == DeviceType.WCDMA)
                {
                    Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_DOWNLOAD_WCDMA_LOG_RESULT_MESSAGE, 0, (int)TmpMessageHandle);
                }
                else if (Type == DeviceType.TD_SCDMA)
                {
                    Parameters.SendMessage(Parameters.DeviceManageWinHandle, Parameters.WM_DOWNLOAD_TDS_LOG_RESULT_MESSAGE, 0, (int)TmpMessageHandle);
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended("下载日志登录响应解析", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// 请求文件列表
        /// </summary>
        public static void APLogFilesListingRequest()
        {

        }
        #endregion

        #region 获取TDS扫频频点
        public static string Get_Son_Earfcn_Request(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> SonEarfcnParam = new Dictionary<string, object>();

                MsgStruct.Msg_Body_Struct SonEarfcnParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.get_son_earfcn, SonEarfcnParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }

                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }

                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }

                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }

                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = SonEarfcnParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        public static void Get_Son_Earfcn_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                string Earfcnlist = string.Empty;
                string fullName = string.Empty;
                fullName = resultData.ApInfo.Fullname;
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("earfcnlist"))
                    {
                        Earfcnlist = Item.Value.ToString();
                        break;
                    }
                }
                for (int i = 0; i < APATTributesLists.Count; i++)
                {
                    if (APATTributesLists[i].FullName == fullName)
                    {
                        APATTributesLists[i].FrequencyList = Earfcnlist;
                        TDSDeviceAdvanceSettingParameter.FrequencyList = Earfcnlist;
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
        #endregion

        #region GSMV3配置信息
        public static string Get_Config_Request(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> SonEarfcnParam = new Dictionary<string, object>();

                MsgStruct.Msg_Body_Struct SonEarfcnParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.get_son_earfcn, SonEarfcnParam); //get_config_request

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }

                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }

                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }

                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }

                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = SonEarfcnParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        public static void Get_Config_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                string Earfcnlist = string.Empty;
                string fullName = string.Empty;
                fullName = resultData.ApInfo.Fullname;
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("device_ip"))
                    {
                        GSMV3CellNeighParameter.DeviceIP = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("device_gateway"))
                    {
                        GSMV3CellNeighParameter.DeviceGateway = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("device_netmask"))
                    {
                        GSMV3CellNeighParameter.DeviceNetmask = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("version"))
                    {
                        GSMV3CellNeighParameter.Version = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("run_time"))
                    {
                        GSMV3CellNeighParameter.RunTime = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("time"))
                    {
                        GSMV3CellNeighParameter.Devicetime = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("status"))
                    {
                        GSMV3CellNeighParameter.Status = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("number"))
                    {
                        GSMV3CellNeighParameter.DeviceNumber = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("ntp"))
                    {
                        GSMV3CellNeighParameter.NTP = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("channel_U"))
                    {
                        GSMV3CellNeighParameter.ChannelU = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("lac_U"))
                    {
                        GSMV3CellNeighParameter.LacU = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("att_U"))
                    {
                        GSMV3CellNeighParameter.AttU = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("channel_M"))
                    {
                        GSMV3CellNeighParameter.ChannelM = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("lac_M"))
                    {
                        GSMV3CellNeighParameter.LacM = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("att_M"))
                    {
                        GSMV3CellNeighParameter.AttM = Item.Value.ToString();
                    }
                    else if (Item.Key.Trim().Equals("redio"))
                    {
                        GSMV3CellNeighParameter.Redio = Item.Value.ToString();
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
        public static string Set_Config_Request(string domainFullPathName, string deviceName, string IP, string Port, string InnerType, string SN)
        {
            string jsonStr = string.Empty;
            try
            {
                Dictionary<string, object> SonEarfcnParam = new Dictionary<string, object>();

                MsgStruct.Msg_Body_Struct SonEarfcnParamBody = new MsgStruct.Msg_Body_Struct(ApMsgType.get_son_earfcn, SonEarfcnParam);

                MsgStruct.DeviceServerMsgStruct msgStruct = new MsgStruct.DeviceServerMsgStruct();
                msgStruct.Version = "1.0.0";
                if (IP != null && IP != "")
                {
                    msgStruct.ApInfo.IP = IP;
                }
                else
                {
                    msgStruct.ApInfo.IP = string.Empty;
                }

                if (Port != null && Port != "")
                {
                    msgStruct.ApInfo.Port = int.Parse(Port);
                }
                else
                {
                    msgStruct.ApInfo.Port = 0;
                }

                if (SN != null && SN != "")
                {
                    msgStruct.ApInfo.SN = SN;
                }
                else
                {
                    msgStruct.ApInfo.SN = string.Empty;
                }

                if (domainFullPathName != null && domainFullPathName != "")
                {
                    msgStruct.ApInfo.Fullname = domainFullPathName;
                }
                else
                {
                    msgStruct.ApInfo.Fullname = string.Empty;
                }

                if (InnerType != null && InnerType != "")
                {
                    msgStruct.ApInfo.Type = InnerType;
                }
                else
                {
                    msgStruct.ApInfo.Type = string.Empty;
                }
                msgStruct.Body = SonEarfcnParamBody;
                jsonStr = JsonConvert.SerializeObject(msgStruct);
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
            return jsonStr;
        }
        public static void Set_Config_Response(MsgStruct.InterModuleMsgStruct resultData, string RemoteHost, int RemotePort)
        {
            try
            {
                string Earfcnlist = string.Empty;
                string fullName = string.Empty;
                fullName = resultData.ApInfo.Fullname;
                foreach (KeyValuePair<string, object> Item in resultData.Body.dic)
                {
                    if (Item.Key.Trim().Equals("earfcnlist"))
                    {
                        Earfcnlist = Item.Value.ToString();
                        break;
                    }
                }
                for (int i = 0; i < APATTributesLists.Count; i++)
                {
                    if (APATTributesLists[i].FullName == fullName)
                    {
                        APATTributesLists[i].FrequencyList = Earfcnlist;
                        TDSDeviceAdvanceSettingParameter.FrequencyList = Earfcnlist;
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                Parameters.PrintfLogsExtended(ex.Message, ex.StackTrace);
            }
        }
        #endregion
    }
    #endregion

    #region UDP客户端
    public class UDPClientClass
    {
        public static UdpClient Client = null;
        public static bool Connected = false;

        public void Start()
        {
            try
            {
                if (!Connected)
                {
                    Client = new UdpClient(Parameters.UDPHost, Parameters.UDPPort);
                    Connected = true;
                }
                else
                {
                    Client.Close();
                    Client = new UdpClient(Parameters.UDPHost, Parameters.UDPPort);
                    Connected = true;
                }
            }
            catch (Exception ex)
            {
                Connected = false;
                Parameters.PrintfLogsExtended("UDP Client 连接失败！", ex.Message, ex.StackTrace);
            }

            //欢迎窗口切换
            //Parameters.SendMessage(Parameters.WelcomeWindowHandle, Parameters.WM_WelcomeWindowMessage, 0, 0);
        }

        //发送
        public void Send(string DataBuff)
        {
            if (Connected)
            {
                byte[] Data = Encoding.UTF8.GetBytes(DataBuff);
                Client.Send(Data, Data.Length);
            }
        }

        //发送
        public void Send(byte[] DataBuff)
        {
            if (Connected)
            {
                Client.Send(DataBuff, DataBuff.Length);
            }
        }

        public void Close()
        {
            try
            {
                if (Connected)
                {
                    Client.Close();
                    Connected = false;
                }
            }
            catch (Exception Ex)
            {
                Parameters.PrintfLogsExtended("UDP 客户端断开失败", Ex.Message, Ex.StackTrace);
            }
        }
    }
    #endregion

    #region 保存接收信息到数据库
    public class SaveReceiveDataToDB
    {
        private List<StringBuilder> MsgList = null;
        private Thread SaveEventLogsThread = null;
        public object SaveLock = null;

        public SaveReceiveDataToDB()
        {
            if (MsgList == null)
            {
                MsgList = new List<StringBuilder>();
            }

            if (SaveLock == null)
            {
                SaveLock = new object();
            }

            if (SaveEventLogsThread == null)
            {
                SaveEventLogsThread = new Thread(new ThreadStart(this.Save));
                SaveEventLogsThread.Start();
            }
        }

        public void Input(params string[] Msg)
        {
            try
            {
                lock (SaveLock)
                {
                    if (Msg.Length > 0)
                    {
                        StringBuilder LogsItem = new StringBuilder();
                        for (int i = 0; i < Msg.Length; i++)
                        {
                            LogsItem.AppendLine(Msg[i]);
                        }
                        MsgList.Add(LogsItem);
                    }
                }
            }
            catch (Exception Ex)
            {
                Parameters.PrintfLogsExtended("接收到服务端数据的缓存失败,", Ex.Message, MsgList[0].ToString(), Ex.StackTrace);
            }
        }

        private void Save()
        {
            while (true)
            {
                try
                {
                    lock (SaveLock)
                    {
                        if (MsgList.Count > 0)
                        {
                            //Save Logs To DB
                            if (Parameters.LogStatus == 0)
                            {
                                JsonInterFace.IODataHelper.SaveLogs(DateTime.Now.ToString(), "接收到服务端数据", MsgList[0].ToString(), "正常");
                            }

                            MsgList.RemoveAt(0);
                        }
                    }
                }
                catch (Exception e)
                {
                    //保存失败，则输出到日志文件
                    Parameters.PrintfLogsExtended("接收到服务端数据的存库失败,", e.Message, MsgList[0].ToString());
                }

                Thread.Sleep(50);
            }
        }
    }
    #endregion
}
